-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_Mat_exit75_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    shrink_x_max : IN STD_LOGIC_VECTOR (7 downto 0);
    shrink_y_min : IN STD_LOGIC_VECTOR (7 downto 0);
    shrink_y_max : IN STD_LOGIC_VECTOR (7 downto 0);
    bound_x_max : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_x_max_ap_vld : IN STD_LOGIC;
    bound_y_min : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_y_min_ap_vld : IN STD_LOGIC;
    bound_y_max : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_y_max_ap_vld : IN STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    shrink_x_min : IN STD_LOGIC_VECTOR (7 downto 0);
    bound_x_min : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_x_min_ap_vld : IN STD_LOGIC;
    img_1_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_1_rows_V_out_full_n : IN STD_LOGIC;
    img_1_rows_V_out_write : OUT STD_LOGIC;
    img_1_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_1_cols_V_out_full_n : IN STD_LOGIC;
    img_1_cols_V_out_write : OUT STD_LOGIC;
    bound_x_min_r_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_x_min_r_out_out_full_n : IN STD_LOGIC;
    bound_x_min_r_out_out_write : OUT STD_LOGIC;
    bound_x_max_r_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_x_max_r_out_out_full_n : IN STD_LOGIC;
    bound_x_max_r_out_out_write : OUT STD_LOGIC;
    bound_y_min_r_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_y_min_r_out_out_full_n : IN STD_LOGIC;
    bound_y_min_r_out_out_write : OUT STD_LOGIC;
    bound_y_max_r_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_y_max_r_out_out_full_n : IN STD_LOGIC;
    bound_y_max_r_out_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Block_Mat_exit75_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal bound_x_max_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound_y_min_blk_n : STD_LOGIC;
    signal bound_y_max_blk_n : STD_LOGIC;
    signal bound_x_min_blk_n : STD_LOGIC;
    signal img_1_rows_V_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal img_1_cols_V_out_blk_n : STD_LOGIC;
    signal bound_x_min_r_out_out_blk_n : STD_LOGIC;
    signal bound_x_max_r_out_out_blk_n : STD_LOGIC;
    signal bound_y_min_r_out_out_blk_n : STD_LOGIC;
    signal bound_y_max_r_out_out_blk_n : STD_LOGIC;
    signal tmp_i_fu_248_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_reg_410 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_10_i_fu_258_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_i_reg_415 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_fu_264_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_i_reg_420 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_i_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_i_reg_425 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal bound_x_min_r_fu_309_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_x_min_r_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_x_max_r_fu_340_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_x_max_r_reg_447 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_y_min_r_fu_361_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_y_min_r_reg_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_y_max_r_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_y_max_r_reg_457 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_4_cast_i_fu_244_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_i_fu_240_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_i_fu_254_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast_i_fu_236_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_cast_i_fu_232_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_i_fu_270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_i_30_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_305_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_cast_i_fu_288_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_cast_i_fu_280_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_i_fu_316_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_i_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_fu_334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_cast_i_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_cast_i_fu_292_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_cast_i_fu_284_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_i_fu_368_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_i_fu_382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_fu_386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_0_preg <= rows;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_1_preg <= cols;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((bound_y_max_ap_vld = ap_const_logic_0) or (bound_x_max_ap_vld = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bound_x_max_r_reg_447 <= bound_x_max_r_fu_340_p3;
                bound_x_min_r_reg_442 <= bound_x_min_r_fu_309_p3;
                bound_y_max_r_reg_457 <= bound_y_max_r_fu_392_p3;
                bound_y_min_r_reg_452 <= bound_y_min_r_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (bound_x_min_ap_vld = ap_const_logic_0) or (bound_y_min_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_10_i_reg_415 <= tmp_10_i_fu_258_p2;
                tmp_17_i_reg_420 <= tmp_17_i_fu_264_p2;
                tmp_20_i_reg_425 <= tmp_20_i_fu_274_p2;
                tmp_i_reg_410 <= tmp_i_fu_248_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, bound_x_max_ap_vld, bound_y_min_ap_vld, bound_y_max_ap_vld, bound_x_min_ap_vld, img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (bound_x_min_ap_vld = ap_const_logic_0) or (bound_y_min_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((bound_y_max_ap_vld = ap_const_logic_0) or (bound_x_max_ap_vld = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, bound_y_min_ap_vld, bound_x_min_ap_vld)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (bound_x_min_ap_vld = ap_const_logic_0) or (bound_y_min_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(bound_x_max_ap_vld, bound_y_max_ap_vld)
    begin
                ap_block_state2 <= ((bound_y_max_ap_vld = ap_const_logic_0) or (bound_x_max_ap_vld = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n)
    begin
                ap_block_state3 <= ((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_return_0_assign_proc : process(rows, img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3, ap_return_0_preg)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_0 <= rows;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(cols, img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3, ap_return_1_preg)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_1 <= cols;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    bound_x_max_blk_n_assign_proc : process(bound_x_max_ap_vld, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bound_x_max_blk_n <= bound_x_max_ap_vld;
        else 
            bound_x_max_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_x_max_r_fu_340_p3 <= 
        ap_const_lv16_0 when (tmp_2_fu_322_p3(0) = '1') else 
        tmp_16_i_fu_334_p2;

    bound_x_max_r_out_out_blk_n_assign_proc : process(bound_x_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bound_x_max_r_out_out_blk_n <= bound_x_max_r_out_out_full_n;
        else 
            bound_x_max_r_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_x_max_r_out_out_din <= bound_x_max_r_reg_447;

    bound_x_max_r_out_out_write_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bound_x_max_r_out_out_write <= ap_const_logic_1;
        else 
            bound_x_max_r_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    bound_x_min_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, bound_x_min_ap_vld)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bound_x_min_blk_n <= bound_x_min_ap_vld;
        else 
            bound_x_min_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_x_min_r_fu_309_p3 <= 
        tmp_fu_305_p1 when (tmp_8_i_fu_299_p2(0) = '1') else 
        tmp_10_i_reg_415;

    bound_x_min_r_out_out_blk_n_assign_proc : process(bound_x_min_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bound_x_min_r_out_out_blk_n <= bound_x_min_r_out_out_full_n;
        else 
            bound_x_min_r_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_x_min_r_out_out_din <= bound_x_min_r_reg_442;

    bound_x_min_r_out_out_write_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bound_x_min_r_out_out_write <= ap_const_logic_1;
        else 
            bound_x_min_r_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    bound_y_max_blk_n_assign_proc : process(bound_y_max_ap_vld, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bound_y_max_blk_n <= bound_y_max_ap_vld;
        else 
            bound_y_max_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_y_max_r_fu_392_p3 <= 
        ap_const_lv16_0 when (tmp_4_fu_374_p3(0) = '1') else 
        tmp_26_i_fu_386_p2;

    bound_y_max_r_out_out_blk_n_assign_proc : process(bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bound_y_max_r_out_out_blk_n <= bound_y_max_r_out_out_full_n;
        else 
            bound_y_max_r_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_y_max_r_out_out_din <= bound_y_max_r_reg_457;

    bound_y_max_r_out_out_write_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bound_y_max_r_out_out_write <= ap_const_logic_1;
        else 
            bound_y_max_r_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    bound_y_min_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, bound_y_min_ap_vld)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bound_y_min_blk_n <= bound_y_min_ap_vld;
        else 
            bound_y_min_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_y_min_r_fu_361_p3 <= 
        tmp_3_fu_357_p1 when (tmp_18_i_fu_351_p2(0) = '1') else 
        tmp_20_i_reg_425;

    bound_y_min_r_out_out_blk_n_assign_proc : process(bound_y_min_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bound_y_min_r_out_out_blk_n <= bound_y_min_r_out_out_full_n;
        else 
            bound_y_min_r_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bound_y_min_r_out_out_din <= bound_y_min_r_reg_452;

    bound_y_min_r_out_out_write_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bound_y_min_r_out_out_write <= ap_const_logic_1;
        else 
            bound_y_min_r_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_cols_V_out_blk_n_assign_proc : process(img_1_cols_V_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_1_cols_V_out_blk_n <= img_1_cols_V_out_full_n;
        else 
            img_1_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_1_cols_V_out_din <= cols;

    img_1_cols_V_out_write_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            img_1_cols_V_out_write <= ap_const_logic_1;
        else 
            img_1_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_rows_V_out_blk_n_assign_proc : process(img_1_rows_V_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_1_rows_V_out_blk_n <= img_1_rows_V_out_full_n;
        else 
            img_1_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_1_rows_V_out_din <= rows;

    img_1_rows_V_out_write_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            img_1_rows_V_out_write <= ap_const_logic_1;
        else 
            img_1_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(img_1_rows_V_out_full_n, img_1_cols_V_out_full_n, bound_x_min_r_out_out_full_n, bound_x_max_r_out_out_full_n, bound_y_min_r_out_out_full_n, bound_y_max_r_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((bound_y_max_r_out_out_full_n = ap_const_logic_0) or (bound_y_min_r_out_out_full_n = ap_const_logic_0) or (bound_x_max_r_out_out_full_n = ap_const_logic_0) or (bound_x_min_r_out_out_full_n = ap_const_logic_0) or (img_1_cols_V_out_full_n = ap_const_logic_0) or (img_1_rows_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_i_fu_258_p2 <= std_logic_vector(unsigned(bound_x_min) + unsigned(tmp_9_i_fu_254_p1));
    tmp_13_i_fu_316_p2 <= std_logic_vector(unsigned(tmp_5_cast_i_fu_288_p1) - unsigned(tmp_1_cast_i_fu_280_p1));
    tmp_15_i_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_max),16));
    tmp_16_i_fu_334_p2 <= std_logic_vector(unsigned(bound_x_max) - unsigned(tmp_15_i_fu_330_p1));
    tmp_17_cast_i_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_i_reg_420),32));
    tmp_17_i_fu_264_p2 <= std_logic_vector(unsigned(tmp_6_cast_i_fu_236_p1) + unsigned(tmp_2_cast_i_fu_232_p1));
    tmp_18_i_fu_351_p2 <= "1" when (signed(tmp_17_cast_i_fu_348_p1) > signed(rows)) else "0";
    tmp_19_i_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_y_min),16));
    tmp_1_cast_i_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_max),17));
    tmp_20_i_fu_274_p2 <= std_logic_vector(unsigned(bound_y_min) + unsigned(tmp_19_i_fu_270_p1));
    tmp_23_i_fu_368_p2 <= std_logic_vector(unsigned(tmp_7_cast_i_fu_292_p1) - unsigned(tmp_3_cast_i_fu_284_p1));
    tmp_25_i_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_y_max),16));
    tmp_26_i_fu_386_p2 <= std_logic_vector(unsigned(bound_y_max) - unsigned(tmp_25_i_fu_382_p1));
    tmp_2_cast_i_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_y_min),17));
    tmp_2_fu_322_p3 <= tmp_13_i_fu_316_p2(16 downto 16);
    tmp_3_cast_i_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_y_max),17));
    tmp_3_fu_357_p1 <= rows(16 - 1 downto 0);
    tmp_4_cast_i_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_x_min),17));
    tmp_4_fu_374_p3 <= tmp_23_i_fu_368_p2(16 downto 16);
    tmp_5_cast_i_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_x_max),17));
    tmp_6_cast_i_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_y_min),17));
    tmp_7_cast_i_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_y_max),17));
    tmp_8_i_fu_299_p2 <= "1" when (signed(tmp_cast_i_30_fu_296_p1) > signed(cols)) else "0";
    tmp_9_i_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_min),16));
    tmp_cast_i_30_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_reg_410),32));
    tmp_cast_i_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_min),17));
    tmp_fu_305_p1 <= cols(16 - 1 downto 0);
    tmp_i_fu_248_p2 <= std_logic_vector(unsigned(tmp_4_cast_i_fu_244_p1) + unsigned(tmp_cast_i_fu_240_p1));
end behav;
