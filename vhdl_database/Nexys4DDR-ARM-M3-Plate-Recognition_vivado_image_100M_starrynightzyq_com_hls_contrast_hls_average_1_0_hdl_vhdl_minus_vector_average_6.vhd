-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minus_vector_average_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    normal_dst_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    normal_dst_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of minus_vector_average_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mask_3_ce0 : STD_LOGIC;
    signal mask_3_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal t_V_1_reg_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_159_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_354 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_195_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_reg_364 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_207_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_s_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_378_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_389_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_3_load_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal t_V_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sum_cast_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_fu_86 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0289_2_fu_296_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_s_fu_90 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0255_2_fu_289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_331_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal normal_dst_V_preg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_shl_fu_171_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_183_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_179_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_191_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_213_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_225_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_fu_229_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_266_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_280_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal diff_sum_t_V_fu_272_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal template_sum_V_fu_283_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_315_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_315_p10 : STD_LOGIC_VECTOR (19 downto 0);

    component contrast_hls_avercud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component minus_vector_averfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mask_3_U : component minus_vector_averfYi
    generic map (
        DataWidth => 1,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_3_address0,
        ce0 => mask_3_ce0,
        q0 => mask_3_q0);

    contrast_hls_avercud_U42 : component contrast_hls_avercud
    generic map (
        ID => 1,
        NUM_STAGE => 24,
        din0_WIDTH => 20,
        din1_WIDTH => 10,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => grp_fu_315_p1,
        ce => grp_fu_315_ce,
        dout => grp_fu_315_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                elsif (((exitcond1_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    normal_dst_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                normal_dst_V_preg <= ap_const_lv12_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (or_cond_reg_389_pp0_iter24_reg = ap_const_lv1_1))) then 
                    normal_dst_V_preg <= tmp_23_fu_331_p1;
                end if; 
            end if;
        end if;
    end process;


    p_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_369_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_1_fu_86 <= p_0289_2_fu_296_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_1_fu_86 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_s_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_369_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_s_fu_90 <= p_0255_2_fu_289_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_s_fu_90 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_1_reg_132 <= j_V_fu_207_p2;
            elsif (((exitcond1_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_1_reg_132 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    t_V_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                t_V_reg_120 <= i_V_reg_354;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_369 <= exitcond_fu_201_p2;
                exitcond_reg_369_pp0_iter1_reg <= exitcond_reg_369;
                mask_3_load_reg_398 <= mask_3_q0;
                or_cond_reg_389_pp0_iter1_reg <= or_cond_reg_389;
                tmp_s_reg_378_pp0_iter1_reg <= tmp_s_reg_378;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_354 <= i_V_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond_reg_389 <= or_cond_fu_245_p2;
                tmp_s_reg_378 <= tmp_s_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_cond_reg_389_pp0_iter10_reg <= or_cond_reg_389_pp0_iter9_reg;
                or_cond_reg_389_pp0_iter11_reg <= or_cond_reg_389_pp0_iter10_reg;
                or_cond_reg_389_pp0_iter12_reg <= or_cond_reg_389_pp0_iter11_reg;
                or_cond_reg_389_pp0_iter13_reg <= or_cond_reg_389_pp0_iter12_reg;
                or_cond_reg_389_pp0_iter14_reg <= or_cond_reg_389_pp0_iter13_reg;
                or_cond_reg_389_pp0_iter15_reg <= or_cond_reg_389_pp0_iter14_reg;
                or_cond_reg_389_pp0_iter16_reg <= or_cond_reg_389_pp0_iter15_reg;
                or_cond_reg_389_pp0_iter17_reg <= or_cond_reg_389_pp0_iter16_reg;
                or_cond_reg_389_pp0_iter18_reg <= or_cond_reg_389_pp0_iter17_reg;
                or_cond_reg_389_pp0_iter19_reg <= or_cond_reg_389_pp0_iter18_reg;
                or_cond_reg_389_pp0_iter20_reg <= or_cond_reg_389_pp0_iter19_reg;
                or_cond_reg_389_pp0_iter21_reg <= or_cond_reg_389_pp0_iter20_reg;
                or_cond_reg_389_pp0_iter22_reg <= or_cond_reg_389_pp0_iter21_reg;
                or_cond_reg_389_pp0_iter23_reg <= or_cond_reg_389_pp0_iter22_reg;
                or_cond_reg_389_pp0_iter24_reg <= or_cond_reg_389_pp0_iter23_reg;
                or_cond_reg_389_pp0_iter2_reg <= or_cond_reg_389_pp0_iter1_reg;
                or_cond_reg_389_pp0_iter3_reg <= or_cond_reg_389_pp0_iter2_reg;
                or_cond_reg_389_pp0_iter4_reg <= or_cond_reg_389_pp0_iter3_reg;
                or_cond_reg_389_pp0_iter5_reg <= or_cond_reg_389_pp0_iter4_reg;
                or_cond_reg_389_pp0_iter6_reg <= or_cond_reg_389_pp0_iter5_reg;
                or_cond_reg_389_pp0_iter7_reg <= or_cond_reg_389_pp0_iter6_reg;
                or_cond_reg_389_pp0_iter8_reg <= or_cond_reg_389_pp0_iter7_reg;
                or_cond_reg_389_pp0_iter9_reg <= or_cond_reg_389_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    r_V_reg_364(10 downto 2) <= r_V_fu_195_p2(10 downto 2);
                tmp_6_reg_359 <= tmp_6_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_393 <= tmp_2_fu_250_p2;
            end if;
        end if;
    end process;
    r_V_reg_364(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, exitcond1_fu_153_p2, ap_CS_fsm_state2, exitcond_fu_201_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1)) or ((exitcond_fu_201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (src_data_stream_V_empty_n = ap_const_logic_0);
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_201_p2)
    begin
        if ((exitcond_fu_201_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_153_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond1_fu_153_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    diff_sum_t_V_fu_272_p3 <= 
        tmp_7_fu_266_p2 when (tmp_fu_262_p2(0) = '1') else 
        p_s_fu_90;
    exitcond1_fu_153_p2 <= "1" when (t_V_reg_120 = ap_const_lv5_1C) else "0";
    exitcond_fu_201_p2 <= "1" when (t_V_1_reg_132 = ap_const_lv5_1C) else "0";

    grp_fu_315_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_315_ce <= ap_const_logic_1;
        else 
            grp_fu_315_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_315_p0 <= (p_0255_2_fu_289_p3 & ap_const_lv10_0);
    grp_fu_315_p1 <= grp_fu_315_p10(10 - 1 downto 0);
    grp_fu_315_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0289_2_fu_296_p3),20));
    i_V_fu_159_p2 <= std_logic_vector(unsigned(t_V_reg_120) + unsigned(ap_const_lv5_1));
    j_V_fu_207_p2 <= std_logic_vector(unsigned(t_V_1_reg_132) + unsigned(ap_const_lv5_1));
    mask_3_address0 <= sum_cast_fu_234_p1(10 - 1 downto 0);

    mask_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mask_3_ce0 <= ap_const_logic_1;
        else 
            mask_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    normal_dst_V_assign_proc : process(or_cond_reg_389_pp0_iter24_reg, ap_enable_reg_pp0_iter25, tmp_23_fu_331_p1, normal_dst_V_preg, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (or_cond_reg_389_pp0_iter24_reg = ap_const_lv1_1))) then 
            normal_dst_V <= tmp_23_fu_331_p1;
        else 
            normal_dst_V <= normal_dst_V_preg;
        end if; 
    end process;


    normal_dst_V_ap_vld_assign_proc : process(or_cond_reg_389_pp0_iter24_reg, ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (or_cond_reg_389_pp0_iter24_reg = ap_const_lv1_1))) then 
            normal_dst_V_ap_vld <= ap_const_logic_1;
        else 
            normal_dst_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_245_p2 <= (tmp_6_reg_359 and tmp_11_fu_239_p2);
    p_0255_2_fu_289_p3 <= 
        ap_const_lv10_0 when (tmp_s_reg_378_pp0_iter1_reg(0) = '1') else 
        diff_sum_t_V_fu_272_p3;
    p_0289_2_fu_296_p3 <= 
        ap_const_lv10_0 when (tmp_s_reg_378_pp0_iter1_reg(0) = '1') else 
        template_sum_V_fu_283_p2;
    p_shl2_cast_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_183_p3),11));
    p_shl2_fu_183_p3 <= (t_V_reg_120 & ap_const_lv2_0);
    p_shl_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_171_p3),11));
    p_shl_fu_171_p3 <= (t_V_reg_120 & ap_const_lv5_0);
    r_V_fu_195_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_179_p1) - unsigned(p_shl2_cast_fu_191_p1));

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

        sum_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_229_p2),64));

    sum_fu_229_p2 <= std_logic_vector(unsigned(r_V_reg_364) + unsigned(tmp_3_cast_fu_225_p1));
    template_sum_V_fu_283_p2 <= std_logic_vector(unsigned(p_1_fu_86) + unsigned(tmp_8_fu_280_p1));
    tmp_11_fu_239_p2 <= "1" when (t_V_1_reg_132 = ap_const_lv5_1B) else "0";
    tmp_23_fu_331_p1 <= grp_fu_315_p2(12 - 1 downto 0);
    tmp_2_fu_250_p2 <= "0" when (src_data_stream_V_dout = ap_const_lv8_0) else "1";
    tmp_3_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_132),11));
    tmp_6_fu_165_p2 <= "1" when (t_V_reg_120 = ap_const_lv5_1B) else "0";
    tmp_7_fu_266_p2 <= std_logic_vector(unsigned(p_s_fu_90) + unsigned(ap_const_lv10_1));
    tmp_8_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_3_load_reg_398),10));
    tmp_9_fu_213_p2 <= (t_V_reg_120 or t_V_1_reg_132);
    tmp_fu_262_p2 <= (tmp_2_reg_393 xor mask_3_load_reg_398);
    tmp_s_fu_219_p2 <= "1" when (tmp_9_fu_213_p2 = ap_const_lv5_0) else "0";
end behav;
