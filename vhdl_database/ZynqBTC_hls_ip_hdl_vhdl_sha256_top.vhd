-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.1
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ctx_in_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_in_data_ce0 : OUT STD_LOGIC;
    ctx_in_data_we0 : OUT STD_LOGIC;
    ctx_in_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_in_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_in_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_in_data_ce1 : OUT STD_LOGIC;
    ctx_in_data_we1 : OUT STD_LOGIC;
    ctx_in_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_in_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_datalen : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_datalen_ap_vld : OUT STD_LOGIC;
    ctx_bitlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ctx_bitlen_ce0 : OUT STD_LOGIC;
    ctx_bitlen_we0 : OUT STD_LOGIC;
    ctx_bitlen_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_bitlen_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_bitlen_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ctx_bitlen_ce1 : OUT STD_LOGIC;
    ctx_bitlen_we1 : OUT STD_LOGIC;
    ctx_bitlen_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_bitlen_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ctx_state_ce0 : OUT STD_LOGIC;
    ctx_state_we0 : OUT STD_LOGIC;
    ctx_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ctx_state_ce1 : OUT STD_LOGIC;
    ctx_state_we1 : OUT STD_LOGIC;
    ctx_state_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    hash_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    hash_ce1 : OUT STD_LOGIC;
    hash_we1 : OUT STD_LOGIC;
    hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rst_array : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sha256_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256_top,hls_ip_2013_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.173500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3545,HLS_SYN_LUT=4420}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";

    signal grp_sha256_update_fu_210_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret_reg_228 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal grp_sha256_update_fu_210_ap_done : STD_LOGIC;
    signal grp_sha256_final_fu_195_ap_start : STD_LOGIC;
    signal grp_sha256_final_fu_195_ap_done : STD_LOGIC;
    signal grp_sha256_final_fu_195_ap_idle : STD_LOGIC;
    signal grp_sha256_final_fu_195_ap_ready : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_in_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_in_data_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_in_data_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_in_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_in_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_in_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_in_data_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_in_data_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_in_data_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_in_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_datalen_read : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_bitlen_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_bitlen_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_bitlen_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_bitlen_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_bitlen_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_bitlen_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_bitlen_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_bitlen_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_state_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_state_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_state_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_state_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_state_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_state_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_state_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_195_ctx_final_state_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_195_ctx_final_state_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_195_final_hash_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_195_final_hash_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_195_final_hash_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_195_final_hash_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_210_ap_start : STD_LOGIC;
    signal grp_sha256_update_fu_210_ap_idle : STD_LOGIC;
    signal grp_sha256_update_fu_210_ap_ready : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_in_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_210_ctx_in_data_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_in_data_we0 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_in_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_210_ctx_in_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_210_ctx_in_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_210_ctx_in_data_ce1 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_in_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_210_ctx_bitlen_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_210_ctx_bitlen_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_bitlen_we0 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_bitlen_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_210_ctx_bitlen_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_210_ctx_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_210_ctx_state_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_state_we0 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_state_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_210_ctx_state_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_210_ctx_state_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_210_ctx_state_ce1 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_state_we1 : STD_LOGIC;
    signal grp_sha256_update_fu_210_ctx_state_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_210_ctx_state_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_210_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_210_data_empty_n : STD_LOGIC;
    signal grp_sha256_update_fu_210_data_read : STD_LOGIC;
    signal grp_sha256_final_fu_195_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_sha256_update_fu_210_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal call_ret_ext_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component sha256_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_final_in_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_final_in_data_ce0 : OUT STD_LOGIC;
        ctx_final_in_data_we0 : OUT STD_LOGIC;
        ctx_final_in_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_final_in_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_final_in_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_final_in_data_ce1 : OUT STD_LOGIC;
        ctx_final_in_data_we1 : OUT STD_LOGIC;
        ctx_final_in_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_final_in_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_final_datalen_read : IN STD_LOGIC_VECTOR (6 downto 0);
        ctx_final_bitlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ctx_final_bitlen_ce0 : OUT STD_LOGIC;
        ctx_final_bitlen_we0 : OUT STD_LOGIC;
        ctx_final_bitlen_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_final_bitlen_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_final_bitlen_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ctx_final_bitlen_ce1 : OUT STD_LOGIC;
        ctx_final_bitlen_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_final_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_final_state_ce0 : OUT STD_LOGIC;
        ctx_final_state_we0 : OUT STD_LOGIC;
        ctx_final_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_final_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_final_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_final_state_ce1 : OUT STD_LOGIC;
        ctx_final_state_we1 : OUT STD_LOGIC;
        ctx_final_state_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_final_state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        final_hash_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        final_hash_ce1 : OUT STD_LOGIC;
        final_hash_we1 : OUT STD_LOGIC;
        final_hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_in_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_in_data_ce0 : OUT STD_LOGIC;
        ctx_in_data_we0 : OUT STD_LOGIC;
        ctx_in_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_in_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_in_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_in_data_ce1 : OUT STD_LOGIC;
        ctx_in_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_bitlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ctx_bitlen_ce0 : OUT STD_LOGIC;
        ctx_bitlen_we0 : OUT STD_LOGIC;
        ctx_bitlen_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_state_ce0 : OUT STD_LOGIC;
        ctx_state_we0 : OUT STD_LOGIC;
        ctx_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_state_ce1 : OUT STD_LOGIC;
        ctx_state_we1 : OUT STD_LOGIC;
        ctx_state_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        data_empty_n : IN STD_LOGIC;
        data_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    grp_sha256_final_fu_195 : component sha256_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_final_fu_195_ap_start,
        ap_done => grp_sha256_final_fu_195_ap_done,
        ap_idle => grp_sha256_final_fu_195_ap_idle,
        ap_ready => grp_sha256_final_fu_195_ap_ready,
        ctx_final_in_data_address0 => grp_sha256_final_fu_195_ctx_final_in_data_address0,
        ctx_final_in_data_ce0 => grp_sha256_final_fu_195_ctx_final_in_data_ce0,
        ctx_final_in_data_we0 => grp_sha256_final_fu_195_ctx_final_in_data_we0,
        ctx_final_in_data_d0 => grp_sha256_final_fu_195_ctx_final_in_data_d0,
        ctx_final_in_data_q0 => grp_sha256_final_fu_195_ctx_final_in_data_q0,
        ctx_final_in_data_address1 => grp_sha256_final_fu_195_ctx_final_in_data_address1,
        ctx_final_in_data_ce1 => grp_sha256_final_fu_195_ctx_final_in_data_ce1,
        ctx_final_in_data_we1 => grp_sha256_final_fu_195_ctx_final_in_data_we1,
        ctx_final_in_data_d1 => grp_sha256_final_fu_195_ctx_final_in_data_d1,
        ctx_final_in_data_q1 => grp_sha256_final_fu_195_ctx_final_in_data_q1,
        ctx_final_datalen_read => grp_sha256_final_fu_195_ctx_final_datalen_read,
        ctx_final_bitlen_address0 => grp_sha256_final_fu_195_ctx_final_bitlen_address0,
        ctx_final_bitlen_ce0 => grp_sha256_final_fu_195_ctx_final_bitlen_ce0,
        ctx_final_bitlen_we0 => grp_sha256_final_fu_195_ctx_final_bitlen_we0,
        ctx_final_bitlen_d0 => grp_sha256_final_fu_195_ctx_final_bitlen_d0,
        ctx_final_bitlen_q0 => grp_sha256_final_fu_195_ctx_final_bitlen_q0,
        ctx_final_bitlen_address1 => grp_sha256_final_fu_195_ctx_final_bitlen_address1,
        ctx_final_bitlen_ce1 => grp_sha256_final_fu_195_ctx_final_bitlen_ce1,
        ctx_final_bitlen_q1 => grp_sha256_final_fu_195_ctx_final_bitlen_q1,
        ctx_final_state_address0 => grp_sha256_final_fu_195_ctx_final_state_address0,
        ctx_final_state_ce0 => grp_sha256_final_fu_195_ctx_final_state_ce0,
        ctx_final_state_we0 => grp_sha256_final_fu_195_ctx_final_state_we0,
        ctx_final_state_d0 => grp_sha256_final_fu_195_ctx_final_state_d0,
        ctx_final_state_q0 => grp_sha256_final_fu_195_ctx_final_state_q0,
        ctx_final_state_address1 => grp_sha256_final_fu_195_ctx_final_state_address1,
        ctx_final_state_ce1 => grp_sha256_final_fu_195_ctx_final_state_ce1,
        ctx_final_state_we1 => grp_sha256_final_fu_195_ctx_final_state_we1,
        ctx_final_state_d1 => grp_sha256_final_fu_195_ctx_final_state_d1,
        ctx_final_state_q1 => grp_sha256_final_fu_195_ctx_final_state_q1,
        final_hash_address1 => grp_sha256_final_fu_195_final_hash_address1,
        final_hash_ce1 => grp_sha256_final_fu_195_final_hash_ce1,
        final_hash_we1 => grp_sha256_final_fu_195_final_hash_we1,
        final_hash_d1 => grp_sha256_final_fu_195_final_hash_d1);

    grp_sha256_update_fu_210 : component sha256_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_update_fu_210_ap_start,
        ap_done => grp_sha256_update_fu_210_ap_done,
        ap_idle => grp_sha256_update_fu_210_ap_idle,
        ap_ready => grp_sha256_update_fu_210_ap_ready,
        ctx_in_data_address0 => grp_sha256_update_fu_210_ctx_in_data_address0,
        ctx_in_data_ce0 => grp_sha256_update_fu_210_ctx_in_data_ce0,
        ctx_in_data_we0 => grp_sha256_update_fu_210_ctx_in_data_we0,
        ctx_in_data_d0 => grp_sha256_update_fu_210_ctx_in_data_d0,
        ctx_in_data_q0 => grp_sha256_update_fu_210_ctx_in_data_q0,
        ctx_in_data_address1 => grp_sha256_update_fu_210_ctx_in_data_address1,
        ctx_in_data_ce1 => grp_sha256_update_fu_210_ctx_in_data_ce1,
        ctx_in_data_q1 => grp_sha256_update_fu_210_ctx_in_data_q1,
        ctx_bitlen_address0 => grp_sha256_update_fu_210_ctx_bitlen_address0,
        ctx_bitlen_ce0 => grp_sha256_update_fu_210_ctx_bitlen_ce0,
        ctx_bitlen_we0 => grp_sha256_update_fu_210_ctx_bitlen_we0,
        ctx_bitlen_d0 => grp_sha256_update_fu_210_ctx_bitlen_d0,
        ctx_bitlen_q0 => grp_sha256_update_fu_210_ctx_bitlen_q0,
        ctx_state_address0 => grp_sha256_update_fu_210_ctx_state_address0,
        ctx_state_ce0 => grp_sha256_update_fu_210_ctx_state_ce0,
        ctx_state_we0 => grp_sha256_update_fu_210_ctx_state_we0,
        ctx_state_d0 => grp_sha256_update_fu_210_ctx_state_d0,
        ctx_state_q0 => grp_sha256_update_fu_210_ctx_state_q0,
        ctx_state_address1 => grp_sha256_update_fu_210_ctx_state_address1,
        ctx_state_ce1 => grp_sha256_update_fu_210_ctx_state_ce1,
        ctx_state_we1 => grp_sha256_update_fu_210_ctx_state_we1,
        ctx_state_d1 => grp_sha256_update_fu_210_ctx_state_d1,
        ctx_state_q1 => grp_sha256_update_fu_210_ctx_state_q1,
        data_dout => grp_sha256_update_fu_210_data_dout,
        data_empty_n => grp_sha256_update_fu_210_data_empty_n,
        data_read => grp_sha256_update_fu_210_data_read,
        ap_return => grp_sha256_update_fu_210_ap_return);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_sha256_final_fu_195_ap_start_ap_start_reg assign process. --
    grp_sha256_final_fu_195_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_final_fu_195_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                    grp_sha256_final_fu_195_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_final_fu_195_ap_ready)) then 
                    grp_sha256_final_fu_195_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sha256_update_fu_210_ap_start_ap_start_reg assign process. --
    grp_sha256_update_fu_210_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_update_fu_210_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                    grp_sha256_update_fu_210_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_update_fu_210_ap_ready)) then 
                    grp_sha256_update_fu_210_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg assign process. --
    ap_reg_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sha256_update_fu_210_ap_done)))) then 
                call_ret_reg_228 <= grp_sha256_update_fu_210_ap_return;
            end if; 
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , grp_sha256_update_fu_210_ap_done , grp_sha256_final_fu_195_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_sha256_update_fu_210_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_sha256_final_fu_195_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    call_ret_ext_fu_224_p1 <= std_logic_vector(resize(unsigned(call_ret_reg_228),32));

    -- ctx_bitlen_address0 assign process. --
    ctx_bitlen_address0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_bitlen_address0, grp_sha256_update_fu_210_ctx_bitlen_address0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_bitlen_address0 <= ap_const_lv32_0(1 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_bitlen_address0 <= grp_sha256_update_fu_210_ctx_bitlen_address0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_bitlen_address0 <= grp_sha256_final_fu_195_ctx_final_bitlen_address0;
        else 
            ctx_bitlen_address0 <= ap_const_lv32_0(1 - 1 downto 0);
        end if; 
    end process;


    -- ctx_bitlen_address1 assign process. --
    ctx_bitlen_address1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_bitlen_address1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_bitlen_address1 <= ap_const_lv32_1(1 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_bitlen_address1 <= grp_sha256_final_fu_195_ctx_final_bitlen_address1;
        else 
            ctx_bitlen_address1 <= ap_const_lv32_1(1 - 1 downto 0);
        end if; 
    end process;


    -- ctx_bitlen_ce0 assign process. --
    ctx_bitlen_ce0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_bitlen_ce0, grp_sha256_update_fu_210_ctx_bitlen_ce0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_bitlen_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_bitlen_ce0 <= grp_sha256_update_fu_210_ctx_bitlen_ce0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_bitlen_ce0 <= grp_sha256_final_fu_195_ctx_final_bitlen_ce0;
        else 
            ctx_bitlen_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_bitlen_ce1 assign process. --
    ctx_bitlen_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_bitlen_ce1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_bitlen_ce1 <= ap_const_logic_1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_bitlen_ce1 <= grp_sha256_final_fu_195_ctx_final_bitlen_ce1;
        else 
            ctx_bitlen_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_bitlen_d0 assign process. --
    ctx_bitlen_d0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_bitlen_d0, grp_sha256_update_fu_210_ctx_bitlen_d0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_bitlen_d0 <= ap_const_lv32_0;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_bitlen_d0 <= grp_sha256_update_fu_210_ctx_bitlen_d0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_bitlen_d0 <= grp_sha256_final_fu_195_ctx_final_bitlen_d0;
        else 
            ctx_bitlen_d0 <= ap_const_lv32_0;
        end if; 
    end process;

    ctx_bitlen_d1 <= ap_const_lv32_0;

    -- ctx_bitlen_we0 assign process. --
    ctx_bitlen_we0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_bitlen_we0, grp_sha256_update_fu_210_ctx_bitlen_we0)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ctx_bitlen_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_bitlen_we0 <= grp_sha256_update_fu_210_ctx_bitlen_we0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_bitlen_we0 <= grp_sha256_final_fu_195_ctx_final_bitlen_we0;
        else 
            ctx_bitlen_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_bitlen_we1 assign process. --
    ctx_bitlen_we1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ctx_bitlen_we1 <= ap_const_logic_1;
        else 
            ctx_bitlen_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_datalen assign process. --
    ctx_datalen_assign_proc : process(ap_CS_fsm, grp_sha256_update_fu_210_ap_done, call_ret_ext_fu_224_p1)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            ctx_datalen <= call_ret_ext_fu_224_p1;
        elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sha256_update_fu_210_ap_done)))) then 
            ctx_datalen <= ap_const_lv32_0;
        else 
            ctx_datalen <= call_ret_ext_fu_224_p1;
        end if; 
    end process;


    -- ctx_datalen_ap_vld assign process. --
    ctx_datalen_ap_vld_assign_proc : process(ap_CS_fsm, grp_sha256_update_fu_210_ap_done)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sha256_update_fu_210_ap_done))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            ctx_datalen_ap_vld <= ap_const_logic_1;
        else 
            ctx_datalen_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_in_data_address0 assign process. --
    ctx_in_data_address0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_in_data_address0, grp_sha256_update_fu_210_ctx_in_data_address0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_in_data_address0 <= grp_sha256_update_fu_210_ctx_in_data_address0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_in_data_address0 <= grp_sha256_final_fu_195_ctx_final_in_data_address0;
        else 
            ctx_in_data_address0 <= grp_sha256_update_fu_210_ctx_in_data_address0;
        end if; 
    end process;


    -- ctx_in_data_address1 assign process. --
    ctx_in_data_address1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_in_data_address1, grp_sha256_update_fu_210_ctx_in_data_address1)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_in_data_address1 <= grp_sha256_update_fu_210_ctx_in_data_address1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_in_data_address1 <= grp_sha256_final_fu_195_ctx_final_in_data_address1;
        else 
            ctx_in_data_address1 <= grp_sha256_update_fu_210_ctx_in_data_address1;
        end if; 
    end process;


    -- ctx_in_data_ce0 assign process. --
    ctx_in_data_ce0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_in_data_ce0, grp_sha256_update_fu_210_ctx_in_data_ce0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_in_data_ce0 <= grp_sha256_update_fu_210_ctx_in_data_ce0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_in_data_ce0 <= grp_sha256_final_fu_195_ctx_final_in_data_ce0;
        else 
            ctx_in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_in_data_ce1 assign process. --
    ctx_in_data_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_in_data_ce1, grp_sha256_update_fu_210_ctx_in_data_ce1)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_in_data_ce1 <= grp_sha256_update_fu_210_ctx_in_data_ce1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_in_data_ce1 <= grp_sha256_final_fu_195_ctx_final_in_data_ce1;
        else 
            ctx_in_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_in_data_d0 assign process. --
    ctx_in_data_d0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_in_data_d0, grp_sha256_update_fu_210_ctx_in_data_d0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_in_data_d0 <= grp_sha256_update_fu_210_ctx_in_data_d0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_in_data_d0 <= grp_sha256_final_fu_195_ctx_final_in_data_d0;
        else 
            ctx_in_data_d0 <= grp_sha256_update_fu_210_ctx_in_data_d0;
        end if; 
    end process;

    ctx_in_data_d1 <= grp_sha256_final_fu_195_ctx_final_in_data_d1;

    -- ctx_in_data_we0 assign process. --
    ctx_in_data_we0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_in_data_we0, grp_sha256_update_fu_210_ctx_in_data_we0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_in_data_we0 <= grp_sha256_update_fu_210_ctx_in_data_we0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_in_data_we0 <= grp_sha256_final_fu_195_ctx_final_in_data_we0;
        else 
            ctx_in_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_in_data_we1 assign process. --
    ctx_in_data_we1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_in_data_we1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_in_data_we1 <= grp_sha256_final_fu_195_ctx_final_in_data_we1;
        else 
            ctx_in_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_state_address0 assign process. --
    ctx_state_address0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_address0, grp_sha256_update_fu_210_ctx_state_address0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_address0 <= ap_const_lv32_6(3 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            ctx_state_address0 <= ap_const_lv32_4(3 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ctx_state_address0 <= ap_const_lv32_2(3 - 1 downto 0);
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            ctx_state_address0 <= ap_const_lv32_0(3 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_address0 <= grp_sha256_update_fu_210_ctx_state_address0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_address0 <= grp_sha256_final_fu_195_ctx_final_state_address0;
        else 
            ctx_state_address0 <= ap_const_lv32_6(3 - 1 downto 0);
        end if; 
    end process;


    -- ctx_state_address1 assign process. --
    ctx_state_address1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_address1, grp_sha256_update_fu_210_ctx_state_address1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_address1 <= ap_const_lv32_7(3 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            ctx_state_address1 <= ap_const_lv32_5(3 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ctx_state_address1 <= ap_const_lv32_3(3 - 1 downto 0);
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            ctx_state_address1 <= ap_const_lv32_1(3 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_address1 <= grp_sha256_update_fu_210_ctx_state_address1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_address1 <= grp_sha256_final_fu_195_ctx_final_state_address1;
        else 
            ctx_state_address1 <= ap_const_lv32_7(3 - 1 downto 0);
        end if; 
    end process;


    -- ctx_state_ce0 assign process. --
    ctx_state_ce0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_ce0, grp_sha256_update_fu_210_ctx_state_ce0)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ctx_state_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_ce0 <= grp_sha256_update_fu_210_ctx_state_ce0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_ce0 <= grp_sha256_final_fu_195_ctx_final_state_ce0;
        else 
            ctx_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_state_ce1 assign process. --
    ctx_state_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_ce1, grp_sha256_update_fu_210_ctx_state_ce1)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ctx_state_ce1 <= ap_const_logic_1;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_ce1 <= grp_sha256_update_fu_210_ctx_state_ce1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_ce1 <= grp_sha256_final_fu_195_ctx_final_state_ce1;
        else 
            ctx_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_state_d0 assign process. --
    ctx_state_d0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_d0, grp_sha256_update_fu_210_ctx_state_d0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_d0 <= ap_const_lv32_1F83D9AB;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            ctx_state_d0 <= ap_const_lv32_510E527F;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ctx_state_d0 <= ap_const_lv32_3C6EF372;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            ctx_state_d0 <= ap_const_lv32_6A09E667;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_d0 <= grp_sha256_update_fu_210_ctx_state_d0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_d0 <= grp_sha256_final_fu_195_ctx_final_state_d0;
        else 
            ctx_state_d0 <= ap_const_lv32_1F83D9AB;
        end if; 
    end process;


    -- ctx_state_d1 assign process. --
    ctx_state_d1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_d1, grp_sha256_update_fu_210_ctx_state_d1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_d1 <= ap_const_lv32_5BE0CD19;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            ctx_state_d1 <= ap_const_lv32_9B05688C;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ctx_state_d1 <= ap_const_lv32_A54FF53A;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            ctx_state_d1 <= ap_const_lv32_BB67AE85;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_d1 <= grp_sha256_update_fu_210_ctx_state_d1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_d1 <= grp_sha256_final_fu_195_ctx_final_state_d1;
        else 
            ctx_state_d1 <= ap_const_lv32_5BE0CD19;
        end if; 
    end process;


    -- ctx_state_we0 assign process. --
    ctx_state_we0_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_we0, grp_sha256_update_fu_210_ctx_state_we0)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ctx_state_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_we0 <= grp_sha256_update_fu_210_ctx_state_we0;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_we0 <= grp_sha256_final_fu_195_ctx_final_state_we0;
        else 
            ctx_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_state_we1 assign process. --
    ctx_state_we1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_ctx_final_state_we1, grp_sha256_update_fu_210_ctx_state_we1)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ctx_state_we1 <= ap_const_logic_1;
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_state_we1 <= grp_sha256_update_fu_210_ctx_state_we1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_state_we1 <= grp_sha256_final_fu_195_ctx_final_state_we1;
        else 
            ctx_state_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- data_read assign process. --
    data_read_assign_proc : process(ap_CS_fsm, grp_sha256_update_fu_210_data_read)
    begin
        if (((ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm))) then 
            data_read <= grp_sha256_update_fu_210_data_read;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha256_final_fu_195_ap_start <= grp_sha256_final_fu_195_ap_start_ap_start_reg;
    grp_sha256_final_fu_195_ctx_final_bitlen_q0 <= ctx_bitlen_q0;
    grp_sha256_final_fu_195_ctx_final_bitlen_q1 <= ctx_bitlen_q1;
    grp_sha256_final_fu_195_ctx_final_datalen_read <= call_ret_reg_228;
    grp_sha256_final_fu_195_ctx_final_in_data_q0 <= ctx_in_data_q0;
    grp_sha256_final_fu_195_ctx_final_in_data_q1 <= ctx_in_data_q1;
    grp_sha256_final_fu_195_ctx_final_state_q0 <= ctx_state_q0;
    grp_sha256_final_fu_195_ctx_final_state_q1 <= ctx_state_q1;
    grp_sha256_update_fu_210_ap_start <= grp_sha256_update_fu_210_ap_start_ap_start_reg;
    grp_sha256_update_fu_210_ctx_bitlen_q0 <= ctx_bitlen_q0;
    grp_sha256_update_fu_210_ctx_in_data_q0 <= ctx_in_data_q0;
    grp_sha256_update_fu_210_ctx_in_data_q1 <= ctx_in_data_q1;
    grp_sha256_update_fu_210_ctx_state_q0 <= ctx_state_q0;
    grp_sha256_update_fu_210_ctx_state_q1 <= ctx_state_q1;
    grp_sha256_update_fu_210_data_dout <= data_dout;
    grp_sha256_update_fu_210_data_empty_n <= data_empty_n;
    hash_address1 <= grp_sha256_final_fu_195_final_hash_address1;

    -- hash_ce1 assign process. --
    hash_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_final_hash_ce1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            hash_ce1 <= grp_sha256_final_fu_195_final_hash_ce1;
        else 
            hash_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hash_d1 <= grp_sha256_final_fu_195_final_hash_d1;

    -- hash_we1 assign process. --
    hash_we1_assign_proc : process(ap_CS_fsm, grp_sha256_final_fu_195_final_hash_we1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            hash_we1 <= grp_sha256_final_fu_195_final_hash_we1;
        else 
            hash_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
