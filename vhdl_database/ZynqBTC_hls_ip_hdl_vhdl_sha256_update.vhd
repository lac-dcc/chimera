-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.1
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_in_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_in_data_ce0 : OUT STD_LOGIC;
    ctx_in_data_we0 : OUT STD_LOGIC;
    ctx_in_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_in_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_in_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_in_data_ce1 : OUT STD_LOGIC;
    ctx_in_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_bitlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ctx_bitlen_ce0 : OUT STD_LOGIC;
    ctx_bitlen_we0 : OUT STD_LOGIC;
    ctx_bitlen_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_bitlen_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ctx_state_ce0 : OUT STD_LOGIC;
    ctx_state_we0 : OUT STD_LOGIC;
    ctx_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ctx_state_ce1 : OUT STD_LOGIC;
    ctx_state_we1 : OUT STD_LOGIC;
    ctx_state_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of sha256_update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_FFFFFDFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ctx_bitlen_addr_gep_fu_52_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_bitlen_addr_reg_173 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_bitlen_addr_2_gep_fu_60_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_bitlen_addr_2_reg_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_123_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_186 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_76 : BOOLEAN;
    signal ctx_bitlen_load_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_201 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_transform_fu_99_ap_done : STD_LOGIC;
    signal ctx_bitlen_load_1_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_99_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_99_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_99_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_99_ctx_transform_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_99_ctx_transform_state_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_99_ctx_transform_state_we0 : STD_LOGIC;
    signal grp_sha256_transform_fu_99_ctx_transform_state_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_99_ctx_transform_state_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_99_ctx_transform_state_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_99_ctx_transform_state_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_99_ctx_transform_state_we1 : STD_LOGIC;
    signal grp_sha256_transform_fu_99_ctx_transform_state_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_99_ctx_transform_state_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_99_data_transform_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_99_data_transform_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_99_data_transform_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_transform_fu_99_data_transform_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_99_data_transform_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_99_data_transform_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_85 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_transform_fu_99_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ctx_datalen_1_cast_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_datalen_1_fu_42 : STD_LOGIC_VECTOR (6 downto 0);
    signal ctx_datalen_assign_fu_134_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_transform_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_transform_state_ce0 : OUT STD_LOGIC;
        ctx_transform_state_we0 : OUT STD_LOGIC;
        ctx_transform_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_transform_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_transform_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_transform_state_ce1 : OUT STD_LOGIC;
        ctx_transform_state_we1 : OUT STD_LOGIC;
        ctx_transform_state_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_transform_state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_transform_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_transform_ce0 : OUT STD_LOGIC;
        data_transform_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_transform_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_transform_ce1 : OUT STD_LOGIC;
        data_transform_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_sha256_transform_fu_99 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_99_ap_start,
        ap_done => grp_sha256_transform_fu_99_ap_done,
        ap_idle => grp_sha256_transform_fu_99_ap_idle,
        ap_ready => grp_sha256_transform_fu_99_ap_ready,
        ctx_transform_state_address0 => grp_sha256_transform_fu_99_ctx_transform_state_address0,
        ctx_transform_state_ce0 => grp_sha256_transform_fu_99_ctx_transform_state_ce0,
        ctx_transform_state_we0 => grp_sha256_transform_fu_99_ctx_transform_state_we0,
        ctx_transform_state_d0 => grp_sha256_transform_fu_99_ctx_transform_state_d0,
        ctx_transform_state_q0 => grp_sha256_transform_fu_99_ctx_transform_state_q0,
        ctx_transform_state_address1 => grp_sha256_transform_fu_99_ctx_transform_state_address1,
        ctx_transform_state_ce1 => grp_sha256_transform_fu_99_ctx_transform_state_ce1,
        ctx_transform_state_we1 => grp_sha256_transform_fu_99_ctx_transform_state_we1,
        ctx_transform_state_d1 => grp_sha256_transform_fu_99_ctx_transform_state_d1,
        ctx_transform_state_q1 => grp_sha256_transform_fu_99_ctx_transform_state_q1,
        data_transform_address0 => grp_sha256_transform_fu_99_data_transform_address0,
        data_transform_ce0 => grp_sha256_transform_fu_99_data_transform_ce0,
        data_transform_q0 => grp_sha256_transform_fu_99_data_transform_q0,
        data_transform_address1 => grp_sha256_transform_fu_99_data_transform_address1,
        data_transform_ce1 => grp_sha256_transform_fu_99_data_transform_ce1,
        data_transform_q1 => grp_sha256_transform_fu_99_data_transform_q1);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_sha256_transform_fu_99_ap_start_ap_start_reg assign process. --
    grp_sha256_transform_fu_99_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_transform_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                    grp_sha256_transform_fu_99_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_transform_fu_99_ap_ready)) then 
                    grp_sha256_transform_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg assign process. --
    ap_reg_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                ctx_bitlen_load_1_reg_205 <= ctx_bitlen_q0;
            end if; 
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                ctx_bitlen_load_reg_195 <= ctx_bitlen_q0;
            end if; 
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76) and (ap_const_lv1_0 = tmp_s_fu_140_p2))) then 
                ctx_datalen_1_fu_42 <= ctx_datalen_assign_fu_134_p2;
            elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
                ctx_datalen_1_fu_42 <= ap_const_lv7_0;
            end if; 
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(ap_sig_bdd_76))) then 
                i_4_reg_186 <= i_4_fu_123_p2;
            end if; 
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                i_reg_85 <= i_4_reg_186;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76) and (ap_const_lv1_0 = tmp_s_fu_140_p2))) then 
                i_reg_85 <= i_4_fu_123_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_85 <= ap_const_lv7_0;
            end if; 
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sha256_transform_fu_99_ap_done)))) then 
                tmp_57_reg_201 <= tmp_57_fu_151_p2;
            end if; 
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                tmp_58_reg_210 <= tmp_58_fu_156_p2;
            end if; 
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                tmp_59_reg_215 <= tmp_59_fu_161_p2;
            end if; 
        end if;
    end process;
    ctx_bitlen_addr_reg_173(0) <= '0';
    ctx_bitlen_addr_2_reg_178(0) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond1_fu_117_p2 , ap_sig_bdd_76 , tmp_57_fu_151_p2 , grp_sha256_transform_fu_99_ap_done , tmp_s_fu_140_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(ap_sig_bdd_76) and not((exitcond1_fu_117_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76) and (ap_const_lv1_0 = tmp_s_fu_140_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76) and not((ap_const_lv1_0 = tmp_s_fu_140_p2)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if ((not((ap_const_logic_0 = grp_sha256_transform_fu_99_ap_done)) and (ap_const_lv1_0 = tmp_57_fu_151_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                elsif ((not((ap_const_logic_0 = grp_sha256_transform_fu_99_ap_done)) and not((ap_const_lv1_0 = tmp_57_fu_151_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond1_fu_117_p2, ap_sig_bdd_76)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(ap_sig_bdd_76) and not((exitcond1_fu_117_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond1_fu_117_p2, ap_sig_bdd_76)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(ap_sig_bdd_76) and not((exitcond1_fu_117_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ctx_datalen_1_fu_42;

    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(data_empty_n, exitcond1_fu_117_p2)
    begin
                ap_sig_bdd_76 <= ((data_empty_n = ap_const_logic_0) and (exitcond1_fu_117_p2 = ap_const_lv1_0));
    end process;

    ctx_bitlen_addr_2_gep_fu_60_p3 <= ap_const_lv32_1(1 - 1 downto 0);
    ctx_bitlen_addr_gep_fu_52_p3 <= ap_const_lv32_0(1 - 1 downto 0);

    -- ctx_bitlen_address0 assign process. --
    ctx_bitlen_address0_assign_proc : process(ap_CS_fsm, ctx_bitlen_addr_reg_173, ctx_bitlen_addr_2_reg_178)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            ctx_bitlen_address0 <= ctx_bitlen_addr_2_reg_178;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            ctx_bitlen_address0 <= ctx_bitlen_addr_reg_173;
        else 
            ctx_bitlen_address0 <= ctx_bitlen_addr_2_reg_178;
        end if; 
    end process;


    -- ctx_bitlen_ce0 assign process. --
    ctx_bitlen_ce0_assign_proc : process(ap_CS_fsm, exitcond1_fu_117_p2, ap_sig_bdd_76, tmp_57_fu_151_p2, tmp_57_reg_201, grp_sha256_transform_fu_99_ap_done, tmp_s_fu_140_p2)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76) and not((ap_const_lv1_0 = tmp_s_fu_140_p2))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sha256_transform_fu_99_ap_done)) and not((ap_const_lv1_0 = tmp_57_fu_151_p2))) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_57_reg_201))))) then 
            ctx_bitlen_ce0 <= ap_const_logic_1;
        else 
            ctx_bitlen_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_bitlen_d0 assign process. --
    ctx_bitlen_d0_assign_proc : process(ap_CS_fsm, tmp_58_reg_210, tmp_59_reg_215)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_bitlen_d0 <= tmp_59_reg_215;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            ctx_bitlen_d0 <= tmp_58_reg_210;
        else 
            ctx_bitlen_d0 <= tmp_59_reg_215;
        end if; 
    end process;


    -- ctx_bitlen_we0 assign process. --
    ctx_bitlen_we0_assign_proc : process(ap_CS_fsm, tmp_57_reg_201)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_57_reg_201))))) then 
            ctx_bitlen_we0 <= ap_const_logic_1;
        else 
            ctx_bitlen_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_datalen_1_cast_fu_129_p1 <= std_logic_vector(resize(unsigned(ctx_datalen_1_fu_42),32));
    ctx_datalen_assign_fu_134_p2 <= std_logic_vector(unsigned(ctx_datalen_1_fu_42) + unsigned(ap_const_lv7_1));

    -- ctx_in_data_address0 assign process. --
    ctx_in_data_address0_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_99_data_transform_address0, ctx_datalen_1_cast_fu_129_p1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ctx_in_data_address0 <= ctx_datalen_1_cast_fu_129_p1(6 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_in_data_address0 <= grp_sha256_transform_fu_99_data_transform_address0;
        else 
            ctx_in_data_address0 <= ctx_datalen_1_cast_fu_129_p1(6 - 1 downto 0);
        end if; 
    end process;

    ctx_in_data_address1 <= grp_sha256_transform_fu_99_data_transform_address1;

    -- ctx_in_data_ce0 assign process. --
    ctx_in_data_ce0_assign_proc : process(ap_CS_fsm, exitcond1_fu_117_p2, ap_sig_bdd_76, grp_sha256_transform_fu_99_data_transform_ce0)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76))) then 
            ctx_in_data_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_in_data_ce0 <= grp_sha256_transform_fu_99_data_transform_ce0;
        else 
            ctx_in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_in_data_ce1 assign process. --
    ctx_in_data_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_99_data_transform_ce1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_in_data_ce1 <= grp_sha256_transform_fu_99_data_transform_ce1;
        else 
            ctx_in_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_in_data_d0 <= data_dout;

    -- ctx_in_data_we0 assign process. --
    ctx_in_data_we0_assign_proc : process(ap_CS_fsm, exitcond1_fu_117_p2, ap_sig_bdd_76)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76)))) then 
            ctx_in_data_we0 <= ap_const_logic_1;
        else 
            ctx_in_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_state_address0 <= grp_sha256_transform_fu_99_ctx_transform_state_address0;
    ctx_state_address1 <= grp_sha256_transform_fu_99_ctx_transform_state_address1;

    -- ctx_state_ce0 assign process. --
    ctx_state_ce0_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_99_ctx_transform_state_ce0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_ce0 <= grp_sha256_transform_fu_99_ctx_transform_state_ce0;
        else 
            ctx_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_state_ce1 assign process. --
    ctx_state_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_99_ctx_transform_state_ce1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_ce1 <= grp_sha256_transform_fu_99_ctx_transform_state_ce1;
        else 
            ctx_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_state_d0 <= grp_sha256_transform_fu_99_ctx_transform_state_d0;
    ctx_state_d1 <= grp_sha256_transform_fu_99_ctx_transform_state_d1;

    -- ctx_state_we0 assign process. --
    ctx_state_we0_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_99_ctx_transform_state_we0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_we0 <= grp_sha256_transform_fu_99_ctx_transform_state_we0;
        else 
            ctx_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_state_we1 assign process. --
    ctx_state_we1_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_99_ctx_transform_state_we1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_state_we1 <= grp_sha256_transform_fu_99_ctx_transform_state_we1;
        else 
            ctx_state_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- data_read assign process. --
    data_read_assign_proc : process(ap_CS_fsm, exitcond1_fu_117_p2, ap_sig_bdd_76)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_117_p2 = ap_const_lv1_0) and not(ap_sig_bdd_76))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_117_p2 <= "1" when (i_reg_85 = ap_const_lv7_40) else "0";
    grp_sha256_transform_fu_99_ap_start <= grp_sha256_transform_fu_99_ap_start_ap_start_reg;
    grp_sha256_transform_fu_99_ctx_transform_state_q0 <= ctx_state_q0;
    grp_sha256_transform_fu_99_ctx_transform_state_q1 <= ctx_state_q1;
    grp_sha256_transform_fu_99_data_transform_q0 <= ctx_in_data_q0;
    grp_sha256_transform_fu_99_data_transform_q1 <= ctx_in_data_q1;
    i_4_fu_123_p2 <= std_logic_vector(unsigned(i_reg_85) + unsigned(ap_const_lv7_1));
    tmp_57_fu_151_p2 <= "1" when (unsigned(ctx_bitlen_load_reg_195) > unsigned(ap_const_lv32_FFFFFDFF)) else "0";
    tmp_58_fu_156_p2 <= std_logic_vector(unsigned(ctx_bitlen_load_1_reg_205) + unsigned(ap_const_lv32_1));
    tmp_59_fu_161_p2 <= std_logic_vector(unsigned(ctx_bitlen_load_reg_195) + unsigned(ap_const_lv32_200));
    tmp_s_fu_140_p2 <= "1" when (ctx_datalen_assign_fu_134_p2 = ap_const_lv7_40) else "0";
end behav;
