-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Add_Char4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_3_V_empty_n : IN STD_LOGIC;
    src_data_stream_3_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_3_V_full_n : IN STD_LOGIC;
    dst_data_stream_3_V_write : OUT STD_LOGIC;
    ch4x_loc_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    ch4x_loc_empty_n : IN STD_LOGIC;
    ch4x_loc_read : OUT STD_LOGIC;
    ytop_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    ytop_s_empty_n : IN STD_LOGIC;
    ytop_s_read : OUT STD_LOGIC;
    char4_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    char4_empty_n : IN STD_LOGIC;
    char4_read : OUT STD_LOGIC;
    color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color1_empty_n : IN STD_LOGIC;
    color1_read : OUT STD_LOGIC;
    color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color2_empty_n : IN STD_LOGIC;
    color2_read : OUT STD_LOGIC;
    color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color3_empty_n : IN STD_LOGIC;
    color3_read : OUT STD_LOGIC;
    ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ytop_out_full_n : IN STD_LOGIC;
    ytop_out_write : OUT STD_LOGIC;
    color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color1_out_full_n : IN STD_LOGIC;
    color1_out_write : OUT STD_LOGIC;
    color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color2_out_full_n : IN STD_LOGIC;
    color2_out_write : OUT STD_LOGIC;
    color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color3_out_full_n : IN STD_LOGIC;
    color3_out_write : OUT STD_LOGIC );
end;


architecture behav of Add_Char4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv17_40 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_20 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal letter296_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal letter296_ce0 : STD_LOGIC;
    signal letter296_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln185_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal src_data_stream_3_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln185_reg_802_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_3_V_blk_n : STD_LOGIC;
    signal ch4x_loc_blk_n : STD_LOGIC;
    signal ytop_s_blk_n : STD_LOGIC;
    signal char4_blk_n : STD_LOGIC;
    signal color1_blk_n : STD_LOGIC;
    signal color2_blk_n : STD_LOGIC;
    signal color3_blk_n : STD_LOGIC;
    signal ytop_out_blk_n : STD_LOGIC;
    signal color1_out_blk_n : STD_LOGIC;
    signal color2_out_blk_n : STD_LOGIC;
    signal color3_out_blk_n : STD_LOGIC;
    signal j_0_i_i_reg_472 : STD_LOGIC_VECTOR (10 downto 0);
    signal ytop_read_reg_728 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal markpix_val_0_reg_733 : STD_LOGIC_VECTOR (7 downto 0);
    signal markpix_val_1_reg_738 : STD_LOGIC_VECTOR (7 downto 0);
    signal markpix_val_2_reg_743 : STD_LOGIC_VECTOR (7 downto 0);
    signal ch4x_loc_read_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln189_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln190_fu_489_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln190_reg_759 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln190_fu_493_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln190_reg_764 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln192_cast_fu_503_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln192_cast_reg_769 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln193_fu_515_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln193_reg_774 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_531_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_782 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln183_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln190_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln190_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_797 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln185_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_609_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Result_s_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_1_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_1_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_826 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_707_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_831 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_714_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_836 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_721_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_841 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal i_0_i_i_reg_461 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln192_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln193_fu_499_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln193_fu_511_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln183_fu_521_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln191_fu_542_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln191_fu_546_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln192_1_cast_fu_551_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln192_fu_561_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln190_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln190_1_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln190_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln190_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln190_1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln185_fu_599_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln193_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln193_1_fu_626_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln194_fu_635_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_640_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal xos_fu_650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln791_fu_654_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln791_fu_660_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln193_1_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln193_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_fu_682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln195_1_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln195_2_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Add_Char1_letter IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    letter296_U : component Add_Char1_letter
    generic map (
        DataWidth => 16,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => letter296_address0,
        ce0 => letter296_ce0,
        q0 => letter296_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln183_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_i_reg_461 <= i_reg_782;
            elsif ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_461 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_i_i_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_fu_603_p2 = ap_const_lv1_0))) then 
                j_0_i_i_reg_472 <= j_fu_609_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_i_i_reg_472 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln190_reg_764 <= add_ln190_fu_493_p2;
                add_ln193_reg_774 <= add_ln193_fu_515_p2;
                ch4x_loc_read_reg_748 <= ch4x_loc_dout;
                icmp_ln189_reg_754 <= icmp_ln189_fu_483_p2;
                markpix_val_0_reg_733 <= color1_dout;
                markpix_val_1_reg_738 <= color2_dout;
                markpix_val_2_reg_743 <= color3_dout;
                ytop_read_reg_728 <= ytop_s_dout;
                    zext_ln190_reg_759(15 downto 0) <= zext_ln190_fu_489_p1(15 downto 0);
                    zext_ln192_cast_reg_769(10 downto 5) <= zext_ln192_cast_fu_503_p3(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_fu_603_p2 = ap_const_lv1_0))) then
                and_ln193_1_reg_818 <= and_ln193_1_fu_676_p2;
                p_Result_s_reg_811 <= p_Result_s_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_782 <= i_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln185_reg_802 <= icmp_ln185_fu_603_p2;
                icmp_ln185_reg_802_pp0_iter1_reg <= icmp_ln185_reg_802;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_s_reg_797 <= letter296_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0))) then
                tmp_27_reg_831 <= tmp_27_fu_707_p3;
                tmp_28_reg_836 <= tmp_28_fu_714_p3;
                tmp_29_reg_841 <= tmp_29_fu_721_p3;
                tmp_reg_826 <= tmp_fu_700_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln183_fu_525_p2 = ap_const_lv1_0))) then
                xor_ln190_reg_792 <= xor_ln190_fu_593_p2;
            end if;
        end if;
    end process;
    zext_ln190_reg_759(16) <= '0';
    zext_ln192_cast_reg_769(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, icmp_ln183_fu_525_p2, icmp_ln185_fu_603_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln183_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln185_fu_603_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln185_fu_603_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln190_fu_493_p2 <= std_logic_vector(unsigned(ap_const_lv17_40) + unsigned(zext_ln190_fu_489_p1));
    add_ln192_fu_561_p2 <= std_logic_vector(unsigned(zext_ln192_cast_reg_769) + unsigned(zext_ln192_1_cast_fu_551_p4));
    add_ln193_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv17_20) + unsigned(zext_ln193_fu_511_p1));
    and_ln193_1_fu_676_p2 <= (xor_ln193_fu_620_p2 and and_ln193_fu_671_p2);
    and_ln193_fu_671_p2 <= (xor_ln190_reg_792 and icmp_ln193_1_fu_630_p2);
    and_ln791_fu_660_p2 <= (shl_ln791_fu_654_p2 and p_Val2_s_reg_797);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln185_reg_802, ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln185_reg_802, ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln185_reg_802, ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
                ap_block_state1 <= ((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, icmp_ln185_reg_802)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln185_reg_802 = ap_const_lv1_0)));
    end process;


    ap_block_state6_pp0_stage0_iter2_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
                ap_block_state6_pp0_stage0_iter2 <= (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln185_fu_603_p2)
    begin
        if ((icmp_ln185_fu_603_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln183_fu_525_p2)
    begin
        if (((icmp_ln183_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln183_fu_525_p2)
    begin
        if (((icmp_ln183_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ch4x_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ch4x_loc_blk_n <= ch4x_loc_empty_n;
        else 
            ch4x_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ch4x_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ch4x_loc_read <= ap_const_logic_1;
        else 
            ch4x_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    char4_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, char4_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            char4_blk_n <= char4_empty_n;
        else 
            char4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    char4_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            char4_read <= ap_const_logic_1;
        else 
            char4_read <= ap_const_logic_0;
        end if; 
    end process;


    color1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_blk_n <= color1_empty_n;
        else 
            color1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_blk_n <= color1_out_full_n;
        else 
            color1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color1_out_din <= color1_dout;

    color1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_write <= ap_const_logic_1;
        else 
            color1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_read <= ap_const_logic_1;
        else 
            color1_read <= ap_const_logic_0;
        end if; 
    end process;


    color2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_blk_n <= color2_empty_n;
        else 
            color2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color2_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_blk_n <= color2_out_full_n;
        else 
            color2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color2_out_din <= color2_dout;

    color2_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_write <= ap_const_logic_1;
        else 
            color2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_read <= ap_const_logic_1;
        else 
            color2_read <= ap_const_logic_0;
        end if; 
    end process;


    color3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_blk_n <= color3_empty_n;
        else 
            color3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color3_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_blk_n <= color3_out_full_n;
        else 
            color3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color3_out_din <= color3_dout;

    color3_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_write <= ap_const_logic_1;
        else 
            color3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_read <= ap_const_logic_1;
        else 
            color3_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= tmp_reg_826;

    dst_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= tmp_27_reg_831;

    dst_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= tmp_28_reg_836;

    dst_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_3_V_blk_n_assign_proc : process(dst_data_stream_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_3_V_blk_n <= dst_data_stream_3_V_full_n;
        else 
            dst_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_3_V_din <= tmp_29_reg_841;

    dst_data_stream_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln185_reg_802_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_802_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_3_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_531_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_461) + unsigned(ap_const_lv10_1));
    icmp_ln183_fu_525_p2 <= "1" when (i_0_i_i_reg_461 = ap_const_lv10_2D0) else "0";
    icmp_ln185_fu_603_p2 <= "1" when (j_0_i_i_reg_472 = ap_const_lv11_500) else "0";
    icmp_ln189_fu_483_p2 <= "1" when (char4_dout = ap_const_lv8_1A) else "0";
    icmp_ln190_1_fu_571_p2 <= "1" when (unsigned(zext_ln191_fu_542_p1) < unsigned(add_ln190_reg_764)) else "0";
    icmp_ln190_fu_537_p2 <= "1" when (unsigned(zext_ln183_fu_521_p1) < unsigned(ytop_read_reg_728)) else "0";
    icmp_ln193_1_fu_630_p2 <= "1" when (unsigned(zext_ln193_1_fu_626_p1) < unsigned(add_ln193_reg_774)) else "0";
    icmp_ln193_fu_615_p2 <= "1" when (unsigned(zext_ln185_fu_599_p1) < unsigned(ch4x_loc_read_reg_748)) else "0";
    j_fu_609_p2 <= std_logic_vector(unsigned(j_0_i_i_reg_472) + unsigned(ap_const_lv11_1));
    letter296_address0 <= zext_ln192_fu_566_p1(10 - 1 downto 0);

    letter296_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            letter296_ce0 <= ap_const_logic_1;
        else 
            letter296_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln190_1_fu_587_p2 <= (or_ln190_fu_582_p2 or icmp_ln190_fu_537_p2);
    or_ln190_fu_582_p2 <= (xor_ln190_1_fu_576_p2 or icmp_ln189_reg_754);
    p_Result_s_fu_665_p2 <= "1" when (and_ln791_fu_660_p2 = ap_const_lv16_0) else "0";
    select_ln195_1_fu_688_p3 <= 
        ap_const_lv8_FF when (p_Result_s_reg_811(0) = '1') else 
        markpix_val_1_reg_738;
    select_ln195_2_fu_694_p3 <= 
        ap_const_lv8_FF when (p_Result_s_reg_811(0) = '1') else 
        markpix_val_2_reg_743;
    select_ln195_fu_682_p3 <= 
        ap_const_lv8_FF when (p_Result_s_reg_811(0) = '1') else 
        markpix_val_0_reg_733;
    shl_ln791_fu_654_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_1),to_integer(unsigned('0' & xos_fu_650_p1(16-1 downto 0)))));

    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln185_reg_802)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln185_reg_802, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln185_reg_802)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln185_reg_802, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln185_reg_802)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln185_reg_802, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_3_V_blk_n_assign_proc : process(src_data_stream_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln185_reg_802)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_3_V_blk_n <= src_data_stream_3_V_empty_n;
        else 
            src_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln185_reg_802, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_802 = ap_const_lv1_0))) then 
            src_data_stream_3_V_read <= ap_const_logic_1;
        else 
            src_data_stream_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln191_fu_546_p2 <= std_logic_vector(unsigned(zext_ln191_fu_542_p1) - unsigned(zext_ln190_reg_759));
    sub_ln194_fu_635_p2 <= std_logic_vector(unsigned(zext_ln185_fu_599_p1) - unsigned(ch4x_loc_read_reg_748));
    tmp_27_fu_707_p3 <= 
        select_ln195_1_fu_688_p3 when (and_ln193_1_reg_818(0) = '1') else 
        src_data_stream_1_V_dout;
    tmp_28_fu_714_p3 <= 
        select_ln195_2_fu_694_p3 when (and_ln193_1_reg_818(0) = '1') else 
        src_data_stream_2_V_dout;
    tmp_29_fu_721_p3 <= 
        ap_const_lv8_0 when (and_ln193_1_reg_818(0) = '1') else 
        src_data_stream_3_V_dout;
    tmp_fu_700_p3 <= 
        select_ln195_fu_682_p3 when (and_ln193_1_reg_818(0) = '1') else 
        src_data_stream_0_V_dout;
    trunc_ln193_fu_499_p1 <= char4_dout(6 - 1 downto 0);
    trunc_ln_fu_640_p4 <= sub_ln194_fu_635_p2(15 downto 1);
    xor_ln190_1_fu_576_p2 <= (icmp_ln190_1_fu_571_p2 xor ap_const_lv1_1);
    xor_ln190_fu_593_p2 <= (or_ln190_1_fu_587_p2 xor ap_const_lv1_1);
    xor_ln193_fu_620_p2 <= (icmp_ln193_fu_615_p2 xor ap_const_lv1_1);
        xos_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_640_p4),16));


    ytop_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ytop_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_out_blk_n <= ytop_out_full_n;
        else 
            ytop_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ytop_out_din <= ytop_s_dout;

    ytop_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_out_write <= ap_const_logic_1;
        else 
            ytop_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ytop_s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ytop_s_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_s_blk_n <= ytop_s_empty_n;
        else 
            ytop_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ytop_s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ch4x_loc_empty_n, ytop_s_empty_n, char4_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (char4_empty_n = ap_const_logic_0) or (ytop_s_empty_n = ap_const_logic_0) or (ch4x_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_s_read <= ap_const_logic_1;
        else 
            ytop_s_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln183_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_461),16));
    zext_ln185_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_reg_472),16));
    zext_ln190_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ytop_s_dout),17));
    zext_ln191_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_461),17));
    zext_ln192_1_cast_fu_551_p4 <= sub_ln191_fu_546_p2(11 downto 1);
    zext_ln192_cast_fu_503_p3 <= (trunc_ln193_fu_499_p1 & ap_const_lv5_0);
    zext_ln192_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln192_fu_561_p2),64));
    zext_ln193_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_reg_472),17));
    zext_ln193_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch4x_loc_dout),17));
end behav;
