-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity find_boundary is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V_empty_n : IN STD_LOGIC;
    src_cols_V_read : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    threshold_v_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_v_empty_n : IN STD_LOGIC;
    threshold_v_read : OUT STD_LOGIC;
    bound_min_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bound_min_ce0 : OUT STD_LOGIC;
    bound_min_we0 : OUT STD_LOGIC;
    bound_min_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_max_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bound_max_ce0 : OUT STD_LOGIC;
    bound_max_we0 : OUT STD_LOGIC;
    bound_max_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of find_boundary is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_cols_V_blk_n : STD_LOGIC;
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal threshold_v_blk_n : STD_LOGIC;
    signal i_i_i_reg_166 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_i_i_reg_166_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_threshold_fu_187_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_threshold_reg_372 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_191_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_reg_383 : STD_LOGIC_VECTOR (30 downto 0);
    signal length_fu_205_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal length_reg_388 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_217_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_397 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_reg_402 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_i_i_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_i_i_phi_fu_170_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_i_i_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond_i_i_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_i_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal brmerge_i_i_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal character_num_1_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_character_num_i_i_fu_246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal character_num_fu_338_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal inBlock_i_i_fu_118 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_inBlock_i_i_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_i_i_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_27_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_0_not_i_i_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_316_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_i_i_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    character_num_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (brmerge_i_i_fu_301_p2 = ap_const_lv1_0) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_1))) then 
                character_num_1_fu_114 <= character_num_fu_338_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (brmerge_i_i_fu_301_p2 = ap_const_lv1_1) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_0)))) then 
                character_num_1_fu_114 <= p_character_num_i_i_fu_246_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                character_num_1_fu_114 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_393 = ap_const_lv1_0))) then 
                i_i_i_reg_166 <= i_reg_397;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_i_i_reg_166 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    inBlock_i_i_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (brmerge_i_i_fu_301_p2 = ap_const_lv1_1) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_1))) then 
                inBlock_i_i_fu_118 <= p_inBlock_i_i_fu_240_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_0))) then 
                inBlock_i_i_fu_118 <= ap_const_lv1_1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (brmerge_i_i_fu_301_p2 = ap_const_lv1_0) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                inBlock_i_i_fu_118 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_reg_378 <= src_cols_V_dout;
                p_threshold_reg_372 <= p_threshold_fu_187_p1;
                tmp_1_reg_383 <= tmp_1_fu_191_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_393 <= exitcond_fu_212_p2;
                i_i_i_reg_166_pp0_iter1_reg <= i_i_i_reg_166;
                tmp_9_i_i_reg_408 <= tmp_9_i_i_fu_223_p2;
                tmp_reg_402 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_397 <= i_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                length_reg_388 <= length_fu_205_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n, ap_enable_reg_pp0_iter1, exitcond_fu_212_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_212_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_212_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_cols_V_empty_n, threshold_v_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (src_data_stream_V_empty_n = ap_const_logic_0);
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_212_p2)
    begin
        if ((exitcond_fu_212_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_i_phi_fu_170_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_i_i_reg_166, exitcond_reg_393, i_reg_397)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_393 = ap_const_lv1_0))) then 
            ap_phi_mux_i_i_i_phi_fu_170_p4 <= i_reg_397;
        else 
            ap_phi_mux_i_i_i_phi_fu_170_p4 <= i_i_i_reg_166;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_max_address0 <= tmp_8_i_i_fu_311_p1(3 - 1 downto 0);

    bound_max_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bound_max_ce0 <= ap_const_logic_1;
        else 
            bound_max_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_max_d0 <= i_i_i_reg_166_pp0_iter1_reg(16 - 1 downto 0);

    bound_max_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, or_cond_i_i_fu_258_p2, brmerge_i_i_fu_301_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (brmerge_i_i_fu_301_p2 = ap_const_lv1_0) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_1))) then 
            bound_max_we0 <= ap_const_logic_1;
        else 
            bound_max_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_min_address0 <= tmp_3_i_i_fu_269_p1(3 - 1 downto 0);

    bound_min_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bound_min_ce0 <= ap_const_logic_1;
        else 
            bound_min_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_min_d0 <= i_i_i_reg_166_pp0_iter1_reg(16 - 1 downto 0);

    bound_min_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, or_cond_i_i_fu_258_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond_i_i_fu_258_p2 = ap_const_lv1_0))) then 
            bound_min_we0 <= ap_const_logic_1;
        else 
            bound_min_we0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_i_i_fu_301_p2 <= (tmp_9_i_i_reg_408 or tmp1_fu_295_p2);
    character_num_fu_338_p3 <= 
        tmp_11_i_i_fu_332_p2 when (icmp_fu_326_p2(0) = '1') else 
        p_character_num_i_i_fu_246_p3;
    exitcond_fu_212_p2 <= "1" when (ap_phi_mux_i_i_i_phi_fu_170_p4 = length_reg_388) else "0";
    i_fu_217_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_i_phi_fu_170_p4) + unsigned(ap_const_lv31_1));
    icmp_fu_326_p2 <= "1" when (tmp_4_fu_316_p4 = ap_const_lv5_0) else "0";
    inBlock_0_not_i_i_fu_289_p2 <= (inBlock_i_i_fu_118 xor ap_const_lv1_1);
    length_fu_205_p3 <= 
        ap_const_lv31_1 when (tmp_i_i_fu_200_p2(0) = '1') else 
        tmp_1_reg_383;
    not_i_i_fu_235_p2 <= (tmp_9_i_i_reg_408 xor ap_const_lv1_1);
    or_cond_i_i_fu_258_p2 <= (tmp_i_i_27_fu_254_p2 or p_inBlock_i_i_fu_240_p2);
    p_character_num_i_i_fu_246_p3 <= 
        ap_const_lv8_0 when (tmp_9_i_i_reg_408(0) = '1') else 
        character_num_1_fu_114;
    p_inBlock_i_i_fu_240_p2 <= (not_i_i_fu_235_p2 and inBlock_i_i_fu_118);
    p_threshold_fu_187_p1 <= threshold_v_dout(16 - 1 downto 0);
    rev_fu_283_p2 <= (ult_fu_279_p2 xor ap_const_lv1_1);

    src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_blk_n <= src_cols_V_empty_n;
        else 
            src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_read <= ap_const_logic_1;
        else 
            src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    threshold_v_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, threshold_v_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_v_blk_n <= threshold_v_empty_n;
        else 
            threshold_v_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_v_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_v_read <= ap_const_logic_1;
        else 
            threshold_v_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_295_p2 <= (rev_fu_283_p2 or inBlock_0_not_i_i_fu_289_p2);
    tmp_11_i_i_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(p_character_num_i_i_fu_246_p3));
    tmp_1_fu_191_p1 <= src_cols_V_dout(31 - 1 downto 0);
    tmp_3_i_i_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_character_num_i_i_fu_246_p3),64));
    tmp_4_fu_316_p4 <= p_character_num_i_i_fu_246_p3(7 downto 3);
    tmp_8_i_i_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_character_num_i_i_fu_246_p3),64));
    tmp_9_i_i_fu_223_p2 <= "1" when (i_i_i_reg_166 = ap_const_lv31_0) else "0";
    tmp_i_i_27_fu_254_p2 <= "1" when (unsigned(tmp_reg_402) < unsigned(p_threshold_reg_372)) else "0";
    tmp_i_i_fu_200_p2 <= "1" when (signed(cols_reg_378) < signed(ap_const_lv32_1)) else "0";
    ult_fu_279_p2 <= "1" when (unsigned(tmp_reg_402) < unsigned(p_threshold_reg_372)) else "0";
end behav;
