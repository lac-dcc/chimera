-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity find_boundary_shrink_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V_empty_n : IN STD_LOGIC;
    src_cols_V_read : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    threshold_width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_width_empty_n : IN STD_LOGIC;
    threshold_width_read : OUT STD_LOGIC;
    shrink_x_min_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    shrink_x_min_empty_n : IN STD_LOGIC;
    shrink_x_min_read : OUT STD_LOGIC;
    shrink_x_max_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    shrink_x_max_empty_n : IN STD_LOGIC;
    shrink_x_max_read : OUT STD_LOGIC;
    bound_min : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_min_ap_vld : OUT STD_LOGIC;
    bound_max : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_max_ap_vld : OUT STD_LOGIC );
end;


architecture behav of find_boundary_shrink_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_cols_V_blk_n : STD_LOGIC;
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_width_blk_n : STD_LOGIC;
    signal shrink_x_min_blk_n : STD_LOGIC;
    signal shrink_x_max_blk_n : STD_LOGIC;
    signal inBlock_i_i_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_min_r_1_i_i_reg_194 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_max_r_1_i_i_reg_206 : STD_LOGIC_VECTOR (15 downto 0);
    signal character_num_i_i_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_i_reg_230 : STD_LOGIC_VECTOR (30 downto 0);
    signal shrink_x_min_read_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal shrink_x_max_read_reg_526 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_threshold_fu_241_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_threshold_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal cols_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_245_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_reg_543 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_i_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal length_fu_254_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal length_reg_553 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_13_i_i_fu_260_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_i_i_reg_559 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_cast_i_i_fu_266_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_cast_i_i_reg_564 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_cast_i_i_fu_269_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_cast_i_i_reg_569 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_i_i_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_i_i_reg_574 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_i_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_i_reg_579 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_278_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_584 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_589_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_589_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_589_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_589_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_287_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_19_i_i_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_reg_598_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_reg_598_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_reg_598_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_min_r_1_fu_299_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_r_1_reg_607 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_r_1_reg_607_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_r_1_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_r_1_reg_607_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_i_i_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i_reg_613_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i_reg_613_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i_reg_613_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i_reg_613_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i_reg_613_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_617 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_i_i_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_i_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_i_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_i_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_3_i_i_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_3_i_i_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal bound_max_r_1_3_i_i_fu_413_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_max_r_1_3_i_i_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal character_num_3_i_i_fu_429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal character_num_3_i_i_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_min_r_1_3_i_i_fu_457_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_r_1_3_i_i_reg_665 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_25_i_i_fu_496_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_i_i_reg_672 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_27_i_i_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_i_i_reg_677 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_inBlock_i_i_phi_fu_186_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_bound_min_r_1_i_i_phi_fu_198_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_bound_max_r_1_i_i_phi_fu_210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_character_num_i_i_phi_fu_222_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal not_i_i_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_inBlock_i_i_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_0_not_i_i_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_character_num_i_i_fu_334_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal brmerge_i_i_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_max_r_fu_374_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_bound_max_r_1_i_i_fu_327_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp9_fu_405_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal character_num_fu_379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp3_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_bound_min_r_1_i_i_fu_437_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_bound_min_r_1_i_i_38_fu_444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp5_fu_450_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_cast_i_i_fu_464_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_31_i_i_fu_467_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_i_fu_480_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_cast_i_i_fu_493_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_cast_i_i_cast_fu_505_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_26_i_i_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bound_max_r_1_i_i_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bound_max_r_1_i_i_reg_206 <= bound_max_r_1_3_i_i_reg_653;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                bound_max_r_1_i_i_reg_206 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    bound_min_r_1_i_i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bound_min_r_1_i_i_reg_194 <= bound_min_r_1_3_i_i_reg_665;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                bound_min_r_1_i_i_reg_194 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    character_num_i_i_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                character_num_i_i_reg_218 <= character_num_3_i_i_reg_660;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                character_num_i_i_reg_218 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_i_i_reg_230 <= i_fu_287_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_i_reg_230 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    inBlock_i_i_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                inBlock_i_i_reg_182 <= inBlock_3_i_i_reg_648;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                inBlock_i_i_reg_182 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bound_max_r_1_3_i_i_reg_653 <= bound_max_r_1_3_i_i_fu_413_p3;
                character_num_3_i_i_reg_660 <= character_num_3_i_i_fu_429_p3;
                inBlock_3_i_i_reg_648 <= inBlock_3_i_i_fu_397_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bound_min_r_1_3_i_i_reg_665 <= bound_min_r_1_3_i_i_fu_457_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bound_min_r_1_reg_607 <= bound_min_r_1_fu_299_p1;
                tmp_19_i_i_reg_598 <= tmp_19_i_i_fu_293_p2;
                tmp_23_i_i_reg_613 <= tmp_23_i_i_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bound_min_r_1_reg_607_pp0_iter1_reg <= bound_min_r_1_reg_607;
                exitcond_reg_589 <= exitcond_fu_282_p2;
                exitcond_reg_589_pp0_iter1_reg <= exitcond_reg_589;
                tmp_19_i_i_reg_598_pp0_iter1_reg <= tmp_19_i_i_reg_598;
                tmp_23_i_i_reg_613_pp0_iter1_reg <= tmp_23_i_i_reg_613;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bound_min_r_1_reg_607_pp0_iter2_reg <= bound_min_r_1_reg_607_pp0_iter1_reg;
                bound_min_r_1_reg_607_pp0_iter3_reg <= bound_min_r_1_reg_607_pp0_iter2_reg;
                exitcond_reg_589_pp0_iter2_reg <= exitcond_reg_589_pp0_iter1_reg;
                exitcond_reg_589_pp0_iter3_reg <= exitcond_reg_589_pp0_iter2_reg;
                exitcond_reg_589_pp0_iter4_reg <= exitcond_reg_589_pp0_iter3_reg;
                tmp_19_i_i_reg_598_pp0_iter2_reg <= tmp_19_i_i_reg_598_pp0_iter1_reg;
                tmp_19_i_i_reg_598_pp0_iter3_reg <= tmp_19_i_i_reg_598_pp0_iter2_reg;
                tmp_23_i_i_reg_613_pp0_iter2_reg <= tmp_23_i_i_reg_613_pp0_iter1_reg;
                tmp_23_i_i_reg_613_pp0_iter3_reg <= tmp_23_i_i_reg_613_pp0_iter2_reg;
                tmp_23_i_i_reg_613_pp0_iter4_reg <= tmp_23_i_i_reg_613_pp0_iter3_reg;
                tmp_23_i_i_reg_613_pp0_iter5_reg <= tmp_23_i_i_reg_613_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_reg_538 <= src_cols_V_dout;
                p_threshold_reg_532 <= p_threshold_fu_241_p1;
                shrink_x_max_read_reg_526 <= shrink_x_max_dout;
                shrink_x_min_read_reg_520 <= shrink_x_min_dout;
                tmp_7_reg_543 <= tmp_7_fu_245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                length_reg_553 <= length_fu_254_p3;
                tmp_13_i_i_reg_559 <= tmp_13_i_i_fu_260_p2;
                    tmp_14_cast_i_i_reg_564(7 downto 0) <= tmp_14_cast_i_i_fu_266_p1(7 downto 0);
                    tmp_15_cast_i_i_reg_569(7 downto 0) <= tmp_15_cast_i_i_fu_269_p1(7 downto 0);
                    tmp_16_i_i_reg_574(7 downto 0) <= tmp_16_i_i_fu_272_p1(7 downto 0);
                    tmp_17_i_i_reg_579(7 downto 0) <= tmp_17_i_i_fu_275_p1(7 downto 0);
                tmp_reg_584 <= tmp_fu_278_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond_i_i_reg_633 <= or_cond_i_i_fu_341_p2;
                sel_tmp2_reg_643 <= sel_tmp2_fu_391_p2;
                tmp_21_i_i_reg_638 <= tmp_21_i_i_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_20_i_i_reg_623 <= tmp_20_i_i_fu_308_p2;
                ult_reg_628 <= ult_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_i_i_reg_613_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_25_i_i_reg_672 <= tmp_25_i_i_fu_496_p2;
                tmp_27_i_i_reg_677 <= tmp_27_i_i_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_8_reg_617 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_i_i_reg_548 <= tmp_i_i_fu_249_p2;
            end if;
        end if;
    end process;
    tmp_14_cast_i_i_reg_564(16 downto 8) <= "000000000";
    tmp_15_cast_i_i_reg_569(16 downto 8) <= "000000000";
    tmp_16_i_i_reg_574(15 downto 8) <= "00000000";
    tmp_17_i_i_reg_579(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, ap_enable_reg_pp0_iter1, exitcond_fu_282_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_282_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_282_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_589)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_reg_589 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_589)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_589 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_589)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_589 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n)
    begin
                ap_block_state1 <= ((shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n, exitcond_reg_589)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((exitcond_reg_589 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_fu_282_p2)
    begin
        if ((exitcond_fu_282_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_bound_max_r_1_i_i_phi_fu_210_p4_assign_proc : process(ap_block_pp0_stage0, bound_max_r_1_i_i_reg_206, exitcond_reg_589_pp0_iter3_reg, bound_max_r_1_3_i_i_reg_653, ap_enable_reg_pp0_iter4)
    begin
        if (((exitcond_reg_589_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_bound_max_r_1_i_i_phi_fu_210_p4 <= bound_max_r_1_3_i_i_reg_653;
        else 
            ap_phi_mux_bound_max_r_1_i_i_phi_fu_210_p4 <= bound_max_r_1_i_i_reg_206;
        end if; 
    end process;


    ap_phi_mux_bound_min_r_1_i_i_phi_fu_198_p4_assign_proc : process(ap_block_pp0_stage0, bound_min_r_1_i_i_reg_194, exitcond_reg_589_pp0_iter4_reg, bound_min_r_1_3_i_i_reg_665, ap_enable_reg_pp0_iter5)
    begin
        if (((exitcond_reg_589_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_bound_min_r_1_i_i_phi_fu_198_p4 <= bound_min_r_1_3_i_i_reg_665;
        else 
            ap_phi_mux_bound_min_r_1_i_i_phi_fu_198_p4 <= bound_min_r_1_i_i_reg_194;
        end if; 
    end process;


    ap_phi_mux_character_num_i_i_phi_fu_222_p4_assign_proc : process(ap_block_pp0_stage0, character_num_i_i_reg_218, exitcond_reg_589_pp0_iter3_reg, character_num_3_i_i_reg_660, ap_enable_reg_pp0_iter4)
    begin
        if (((exitcond_reg_589_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_character_num_i_i_phi_fu_222_p4 <= character_num_3_i_i_reg_660;
        else 
            ap_phi_mux_character_num_i_i_phi_fu_222_p4 <= character_num_i_i_reg_218;
        end if; 
    end process;


    ap_phi_mux_inBlock_i_i_phi_fu_186_p4_assign_proc : process(ap_block_pp0_stage0, inBlock_i_i_reg_182, exitcond_reg_589_pp0_iter3_reg, inBlock_3_i_i_reg_648, ap_enable_reg_pp0_iter4)
    begin
        if (((exitcond_reg_589_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_inBlock_i_i_phi_fu_186_p4 <= inBlock_3_i_i_reg_648;
        else 
            ap_phi_mux_inBlock_i_i_phi_fu_186_p4 <= inBlock_i_i_reg_182;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_max <= 
        ap_const_lv16_0 when (tmp_10_fu_472_p3(0) = '1') else 
        tmp_33_i_i_fu_480_p2;

    bound_max_ap_vld_assign_proc : process(tmp_23_i_i_reg_613_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_23_i_i_reg_613_pp0_iter3_reg = ap_const_lv1_1))) then 
            bound_max_ap_vld <= ap_const_logic_1;
        else 
            bound_max_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bound_max_r_1_3_i_i_fu_413_p3 <= 
        p_bound_max_r_1_i_i_fu_327_p3 when (sel_tmp2_fu_391_p2(0) = '1') else 
        sel_tmp9_fu_405_p3;
    bound_max_r_fu_374_p2 <= std_logic_vector(signed(ap_const_lv16_FFFF) + signed(bound_min_r_1_reg_607_pp0_iter2_reg));
    bound_min <= 
        tmp_reg_584 when (tmp_26_i_i_fu_508_p2(0) = '1') else 
        tmp_27_i_i_reg_677;

    bound_min_ap_vld_assign_proc : process(tmp_23_i_i_reg_613_pp0_iter5_reg, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (tmp_23_i_i_reg_613_pp0_iter5_reg = ap_const_lv1_1))) then 
            bound_min_ap_vld <= ap_const_logic_1;
        else 
            bound_min_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bound_min_r_1_3_i_i_fu_457_p3 <= 
        p_bound_min_r_1_i_i_fu_437_p3 when (sel_tmp2_reg_643(0) = '1') else 
        sel_tmp5_fu_450_p3;
    bound_min_r_1_fu_299_p1 <= i_i_i_reg_230(16 - 1 downto 0);
    brmerge_i_i_fu_363_p2 <= (tmp_19_i_i_reg_598_pp0_iter2_reg or tmp9_fu_357_p2);
    character_num_3_i_i_fu_429_p3 <= 
        p_character_num_i_i_fu_334_p3 when (sel_tmp2_fu_391_p2(0) = '1') else 
        sel_tmp3_fu_421_p3;
    character_num_fu_379_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(p_character_num_i_i_fu_334_p3));
    exitcond_fu_282_p2 <= "1" when (i_i_i_reg_230 = length_reg_553) else "0";
    i_fu_287_p2 <= std_logic_vector(unsigned(i_i_i_reg_230) + unsigned(ap_const_lv31_1));
    inBlock_0_not_i_i_fu_351_p2 <= (ap_phi_mux_inBlock_i_i_phi_fu_186_p4 xor ap_const_lv1_1);
    inBlock_3_i_i_fu_397_p3 <= 
        p_inBlock_i_i_fu_321_p2 when (sel_tmp2_fu_391_p2(0) = '1') else 
        sel_tmp_fu_385_p2;
    length_fu_254_p3 <= 
        ap_const_lv31_1 when (tmp_i_i_reg_548(0) = '1') else 
        tmp_7_reg_543;
    not_i_i_fu_316_p2 <= (tmp_19_i_i_reg_598_pp0_iter2_reg xor ap_const_lv1_1);
    or_cond_i_i_fu_341_p2 <= (tmp_20_i_i_reg_623 or p_inBlock_i_i_fu_321_p2);
    p_bound_max_r_1_i_i_fu_327_p3 <= 
        ap_const_lv16_0 when (tmp_19_i_i_reg_598_pp0_iter2_reg(0) = '1') else 
        ap_phi_mux_bound_max_r_1_i_i_phi_fu_210_p4;
    p_bound_min_r_1_i_i_38_fu_444_p3 <= 
        bound_min_r_1_reg_607_pp0_iter3_reg when (tmp_21_i_i_reg_638(0) = '1') else 
        p_bound_min_r_1_i_i_fu_437_p3;
    p_bound_min_r_1_i_i_fu_437_p3 <= 
        ap_const_lv16_0 when (tmp_19_i_i_reg_598_pp0_iter3_reg(0) = '1') else 
        ap_phi_mux_bound_min_r_1_i_i_phi_fu_198_p4;
    p_character_num_i_i_fu_334_p3 <= 
        ap_const_lv8_0 when (tmp_19_i_i_reg_598_pp0_iter2_reg(0) = '1') else 
        ap_phi_mux_character_num_i_i_phi_fu_222_p4;
    p_inBlock_i_i_fu_321_p2 <= (not_i_i_fu_316_p2 and ap_phi_mux_inBlock_i_i_phi_fu_186_p4);
    p_threshold_fu_241_p1 <= threshold_width_dout(16 - 1 downto 0);
    rev2_fu_346_p2 <= (ult_reg_628 xor ap_const_lv1_1);
    sel_tmp2_fu_391_p2 <= (or_cond_i_i_fu_341_p2 and brmerge_i_i_fu_363_p2);
    sel_tmp3_fu_421_p3 <= 
        character_num_fu_379_p2 when (or_cond_i_i_fu_341_p2(0) = '1') else 
        p_character_num_i_i_fu_334_p3;
    sel_tmp5_fu_450_p3 <= 
        p_bound_min_r_1_i_i_fu_437_p3 when (or_cond_i_i_reg_633(0) = '1') else 
        p_bound_min_r_1_i_i_38_fu_444_p3;
    sel_tmp9_fu_405_p3 <= 
        bound_max_r_fu_374_p2 when (or_cond_i_i_fu_341_p2(0) = '1') else 
        p_bound_max_r_1_i_i_fu_327_p3;
    sel_tmp_fu_385_p2 <= (or_cond_i_i_fu_341_p2 xor ap_const_lv1_1);

    shrink_x_max_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shrink_x_max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_max_blk_n <= shrink_x_max_empty_n;
        else 
            shrink_x_max_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    shrink_x_max_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n)
    begin
        if ((not(((shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_max_read <= ap_const_logic_1;
        else 
            shrink_x_max_read <= ap_const_logic_0;
        end if; 
    end process;


    shrink_x_min_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shrink_x_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_min_blk_n <= shrink_x_min_empty_n;
        else 
            shrink_x_min_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    shrink_x_min_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n)
    begin
        if ((not(((shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_min_read <= ap_const_logic_1;
        else 
            shrink_x_min_read <= ap_const_logic_0;
        end if; 
    end process;


    src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_blk_n <= src_cols_V_empty_n;
        else 
            src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n)
    begin
        if ((not(((shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_read <= ap_const_logic_1;
        else 
            src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_589)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_589, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    threshold_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, threshold_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_width_blk_n <= threshold_width_empty_n;
        else 
            threshold_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n)
    begin
        if ((not(((shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_width_read <= ap_const_logic_1;
        else 
            threshold_width_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp9_fu_357_p2 <= (rev2_fu_346_p2 or inBlock_0_not_i_i_fu_351_p2);
    tmp_10_fu_472_p3 <= tmp_31_i_i_fu_467_p2(16 downto 16);
    tmp_13_i_i_fu_260_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(length_fu_254_p3));
    tmp_14_cast_i_i_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_min_read_reg_520),17));
    tmp_15_cast_i_i_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_max_read_reg_526),17));
    tmp_16_i_i_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_max_read_reg_526),16));
    tmp_17_i_i_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_min_read_reg_520),16));
    tmp_19_i_i_fu_293_p2 <= "1" when (i_i_i_reg_230 = ap_const_lv31_0) else "0";
    tmp_20_i_i_fu_308_p2 <= "1" when (unsigned(tmp_8_reg_617) < unsigned(p_threshold_reg_532)) else "0";
    tmp_21_i_i_fu_368_p2 <= "1" when (p_character_num_i_i_fu_334_p3 = ap_const_lv8_0) else "0";
    tmp_23_i_i_fu_303_p2 <= "1" when (i_i_i_reg_230 = tmp_13_i_i_reg_559) else "0";
    tmp_24_cast_i_i_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_min_r_1_3_i_i_reg_665),17));
    tmp_25_cast_i_i_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_i_i_reg_672),31));
    tmp_25_i_i_fu_496_p2 <= std_logic_vector(unsigned(tmp_24_cast_i_i_fu_493_p1) + unsigned(tmp_14_cast_i_i_reg_564));
    tmp_26_i_i_fu_508_p2 <= "1" when (unsigned(tmp_25_cast_i_i_cast_fu_505_p1) > unsigned(length_reg_553)) else "0";
    tmp_27_i_i_fu_501_p2 <= std_logic_vector(unsigned(bound_min_r_1_3_i_i_reg_665) + unsigned(tmp_17_i_i_reg_579));
    tmp_30_cast_i_i_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_max_r_1_3_i_i_reg_653),17));
    tmp_31_i_i_fu_467_p2 <= std_logic_vector(unsigned(tmp_30_cast_i_i_fu_464_p1) - unsigned(tmp_15_cast_i_i_reg_569));
    tmp_33_i_i_fu_480_p2 <= std_logic_vector(unsigned(bound_max_r_1_3_i_i_reg_653) - unsigned(tmp_16_i_i_reg_574));
    tmp_7_fu_245_p1 <= src_cols_V_dout(31 - 1 downto 0);
    tmp_fu_278_p1 <= length_fu_254_p3(16 - 1 downto 0);
    tmp_i_i_fu_249_p2 <= "1" when (signed(cols_reg_538) < signed(ap_const_lv32_1)) else "0";
    ult_fu_312_p2 <= "1" when (unsigned(tmp_8_reg_617) < unsigned(p_threshold_reg_532)) else "0";
end behav;
