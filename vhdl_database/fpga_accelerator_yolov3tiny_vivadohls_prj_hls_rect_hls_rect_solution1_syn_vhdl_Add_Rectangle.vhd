-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Add_Rectangle is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_3_V_empty_n : IN STD_LOGIC;
    src_data_stream_3_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_3_V_full_n : IN STD_LOGIC;
    dst_data_stream_3_V_write : OUT STD_LOGIC;
    xleft_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    xleft_empty_n : IN STD_LOGIC;
    xleft_read : OUT STD_LOGIC;
    xright_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    xright_empty_n : IN STD_LOGIC;
    xright_read : OUT STD_LOGIC;
    ytop_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    ytop_empty_n : IN STD_LOGIC;
    ytop_read : OUT STD_LOGIC;
    ydown_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    ydown_empty_n : IN STD_LOGIC;
    ydown_read : OUT STD_LOGIC;
    color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color1_empty_n : IN STD_LOGIC;
    color1_read : OUT STD_LOGIC;
    color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color2_empty_n : IN STD_LOGIC;
    color2_read : OUT STD_LOGIC;
    color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color3_empty_n : IN STD_LOGIC;
    color3_read : OUT STD_LOGIC;
    xleft_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    xleft_out_full_n : IN STD_LOGIC;
    xleft_out_write : OUT STD_LOGIC;
    ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ytop_out_full_n : IN STD_LOGIC;
    ytop_out_write : OUT STD_LOGIC;
    color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color1_out_full_n : IN STD_LOGIC;
    color1_out_write : OUT STD_LOGIC;
    color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color2_out_full_n : IN STD_LOGIC;
    color2_out_write : OUT STD_LOGIC;
    color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color3_out_full_n : IN STD_LOGIC;
    color3_out_write : OUT STD_LOGIC );
end;


architecture behav of Add_Rectangle is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv17_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln70_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal src_data_stream_3_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln70_reg_799_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_3_V_blk_n : STD_LOGIC;
    signal xleft_blk_n : STD_LOGIC;
    signal xright_blk_n : STD_LOGIC;
    signal ytop_blk_n : STD_LOGIC;
    signal ydown_blk_n : STD_LOGIC;
    signal color1_blk_n : STD_LOGIC;
    signal color2_blk_n : STD_LOGIC;
    signal color3_blk_n : STD_LOGIC;
    signal xleft_out_blk_n : STD_LOGIC;
    signal ytop_out_blk_n : STD_LOGIC;
    signal color1_out_blk_n : STD_LOGIC;
    signal color2_out_blk_n : STD_LOGIC;
    signal color3_out_blk_n : STD_LOGIC;
    signal j_0_i_reg_469 : STD_LOGIC_VECTOR (10 downto 0);
    signal xleft_read_reg_719 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal xright_read_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_read_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal ydown_read_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal pix1_val_0_2_reg_740 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_1_2_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_2_2_reg_750 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln74_fu_484_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln74_reg_755 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln74_1_fu_494_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln74_1_reg_760 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln74_2_fu_504_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln74_2_reg_765 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln74_3_fu_514_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln74_3_reg_770 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln68_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_530_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_779 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln74_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_reg_784 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln74_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln74_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_600_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln74_1_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_1_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_4_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_4_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_822 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_0_fu_686_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_0_reg_827 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_1_fu_699_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_1_reg_832 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_2_fu_712_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_2_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_0_i_reg_458 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln74_fu_480_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln74_1_fu_490_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln74_2_fu_500_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln74_3_fu_510_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln68_fu_520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln74_4_fu_541_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln74_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_1_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_2_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln70_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln74_5_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_3_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_4_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln74_5_fu_627_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln74_6_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_7_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_8_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_4_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_5_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_6_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_3_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_2_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix1_val_0_3_fu_680_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_1_3_fu_693_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_2_3_fu_706_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln68_fu_524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln68_fu_524_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln68_fu_524_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_458 <= i_reg_779;
            elsif ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_458 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_fu_594_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_469 <= j_fu_600_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln68_fu_524_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_469 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln74_1_reg_760 <= add_ln74_1_fu_494_p2;
                add_ln74_2_reg_765 <= add_ln74_2_fu_504_p2;
                add_ln74_3_reg_770 <= add_ln74_3_fu_514_p2;
                add_ln74_reg_755 <= add_ln74_fu_484_p2;
                pix1_val_0_2_reg_740 <= color1_dout;
                pix1_val_1_2_reg_745 <= color2_dout;
                pix1_val_2_2_reg_750 <= color3_dout;
                xleft_read_reg_719 <= xleft_dout;
                xright_read_reg_724 <= xright_dout;
                ydown_read_reg_735 <= ydown_dout;
                ytop_read_reg_730 <= ytop_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_fu_594_p2 = ap_const_lv1_0))) then
                and_ln74_1_reg_808 <= and_ln74_1_fu_658_p2;
                and_ln74_4_reg_815 <= and_ln74_4_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln68_fu_524_p2 = ap_const_lv1_0))) then
                and_ln74_reg_789 <= and_ln74_fu_578_p2;
                or_ln74_reg_784 <= or_ln74_fu_560_p2;
                xor_ln74_reg_794 <= xor_ln74_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_779 <= i_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln70_reg_799 <= icmp_ln70_fu_594_p2;
                icmp_ln70_reg_799_pp0_iter1_reg <= icmp_ln70_reg_799;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0))) then
                pix1_val_0_reg_827 <= pix1_val_0_fu_686_p3;
                pix1_val_1_reg_832 <= pix1_val_1_fu_699_p3;
                pix1_val_2_reg_837 <= pix1_val_2_fu_712_p3;
                tmp_9_reg_822 <= src_data_stream_3_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln68_fu_524_p2, ap_CS_fsm_state2, icmp_ln70_fu_594_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln68_fu_524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln70_fu_594_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln70_fu_594_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln74_1_fu_494_p2 <= std_logic_vector(unsigned(zext_ln74_1_fu_490_p1) + unsigned(ap_const_lv17_4));
    add_ln74_2_fu_504_p2 <= std_logic_vector(unsigned(zext_ln74_2_fu_500_p1) + unsigned(ap_const_lv17_4));
    add_ln74_3_fu_514_p2 <= std_logic_vector(unsigned(zext_ln74_3_fu_510_p1) + unsigned(ap_const_lv17_4));
    add_ln74_fu_484_p2 <= std_logic_vector(unsigned(zext_ln74_fu_480_p1) + unsigned(ap_const_lv17_4));
    and_ln74_1_fu_658_p2 <= (or_ln74_reg_784 and or_ln74_4_fu_621_p2);
    and_ln74_2_fu_663_p2 <= (xor_ln74_reg_794 and or_ln74_5_fu_636_p2);
    and_ln74_3_fu_668_p2 <= (or_ln74_6_fu_652_p2 and or_ln74_4_fu_621_p2);
    and_ln74_4_fu_674_p2 <= (and_ln74_3_fu_668_p2 and and_ln74_2_fu_663_p2);
    and_ln74_fu_578_p2 <= (or_ln74_2_fu_572_p2 and or_ln74_1_fu_566_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln70_reg_799, ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln70_reg_799, ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln70_reg_799, ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
                ap_block_state1 <= ((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, icmp_ln70_reg_799)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((src_data_stream_3_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (icmp_ln70_reg_799 = ap_const_lv1_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln70_fu_594_p2)
    begin
        if ((icmp_ln70_fu_594_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln68_fu_524_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln68_fu_524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln68_fu_524_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln68_fu_524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    color1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_blk_n <= color1_empty_n;
        else 
            color1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_blk_n <= color1_out_full_n;
        else 
            color1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color1_out_din <= color1_dout;

    color1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_write <= ap_const_logic_1;
        else 
            color1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_read <= ap_const_logic_1;
        else 
            color1_read <= ap_const_logic_0;
        end if; 
    end process;


    color2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_blk_n <= color2_empty_n;
        else 
            color2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color2_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_blk_n <= color2_out_full_n;
        else 
            color2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color2_out_din <= color2_dout;

    color2_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_write <= ap_const_logic_1;
        else 
            color2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_read <= ap_const_logic_1;
        else 
            color2_read <= ap_const_logic_0;
        end if; 
    end process;


    color3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_blk_n <= color3_empty_n;
        else 
            color3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color3_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_blk_n <= color3_out_full_n;
        else 
            color3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color3_out_din <= color3_dout;

    color3_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_write <= ap_const_logic_1;
        else 
            color3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_read <= ap_const_logic_1;
        else 
            color3_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= pix1_val_0_reg_827;

    dst_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= pix1_val_1_reg_832;

    dst_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= pix1_val_2_reg_837;

    dst_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_3_V_blk_n_assign_proc : process(dst_data_stream_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_3_V_blk_n <= dst_data_stream_3_V_full_n;
        else 
            dst_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_3_V_din <= tmp_9_reg_822;

    dst_data_stream_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln70_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln70_reg_799_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_data_stream_3_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_530_p2 <= std_logic_vector(unsigned(i_0_i_reg_458) + unsigned(ap_const_lv10_1));
    icmp_ln68_fu_524_p2 <= "1" when (i_0_i_reg_458 = ap_const_lv10_2D0) else "0";
    icmp_ln70_fu_594_p2 <= "1" when (j_0_i_reg_469 = ap_const_lv11_500) else "0";
    icmp_ln74_1_fu_545_p2 <= "1" when (unsigned(zext_ln74_4_fu_541_p1) > unsigned(add_ln74_reg_755)) else "0";
    icmp_ln74_2_fu_550_p2 <= "1" when (unsigned(zext_ln68_fu_520_p1) < unsigned(ydown_read_reg_735)) else "0";
    icmp_ln74_3_fu_555_p2 <= "1" when (unsigned(zext_ln74_4_fu_541_p1) > unsigned(add_ln74_3_reg_770)) else "0";
    icmp_ln74_4_fu_606_p2 <= "1" when (unsigned(zext_ln70_fu_590_p1) < unsigned(xleft_read_reg_719)) else "0";
    icmp_ln74_5_fu_611_p2 <= "1" when (unsigned(zext_ln70_fu_590_p1) > unsigned(xright_read_reg_724)) else "0";
    icmp_ln74_6_fu_631_p2 <= "1" when (unsigned(zext_ln74_5_fu_627_p1) > unsigned(add_ln74_2_reg_765)) else "0";
    icmp_ln74_7_fu_642_p2 <= "1" when (unsigned(zext_ln70_fu_590_p1) < unsigned(xright_read_reg_724)) else "0";
    icmp_ln74_8_fu_647_p2 <= "1" when (unsigned(zext_ln74_5_fu_627_p1) > unsigned(add_ln74_1_reg_760)) else "0";
    icmp_ln74_fu_536_p2 <= "1" when (unsigned(zext_ln68_fu_520_p1) < unsigned(ytop_read_reg_730)) else "0";
    j_fu_600_p2 <= std_logic_vector(unsigned(j_0_i_reg_469) + unsigned(ap_const_lv11_1));
    or_ln74_1_fu_566_p2 <= (icmp_ln74_fu_536_p2 or icmp_ln74_3_fu_555_p2);
    or_ln74_2_fu_572_p2 <= (icmp_ln74_2_fu_550_p2 or icmp_ln74_1_fu_545_p2);
    or_ln74_3_fu_616_p2 <= (icmp_ln74_5_fu_611_p2 or and_ln74_reg_789);
    or_ln74_4_fu_621_p2 <= (or_ln74_3_fu_616_p2 or icmp_ln74_4_fu_606_p2);
    or_ln74_5_fu_636_p2 <= (icmp_ln74_6_fu_631_p2 or icmp_ln74_4_fu_606_p2);
    or_ln74_6_fu_652_p2 <= (icmp_ln74_8_fu_647_p2 or icmp_ln74_7_fu_642_p2);
    or_ln74_fu_560_p2 <= (icmp_ln74_fu_536_p2 or icmp_ln74_1_fu_545_p2);
    pix1_val_0_3_fu_680_p3 <= 
        src_data_stream_0_V_dout when (and_ln74_1_reg_808(0) = '1') else 
        pix1_val_0_2_reg_740;
    pix1_val_0_fu_686_p3 <= 
        src_data_stream_0_V_dout when (and_ln74_4_reg_815(0) = '1') else 
        pix1_val_0_3_fu_680_p3;
    pix1_val_1_3_fu_693_p3 <= 
        src_data_stream_1_V_dout when (and_ln74_1_reg_808(0) = '1') else 
        pix1_val_1_2_reg_745;
    pix1_val_1_fu_699_p3 <= 
        src_data_stream_1_V_dout when (and_ln74_4_reg_815(0) = '1') else 
        pix1_val_1_3_fu_693_p3;
    pix1_val_2_3_fu_706_p3 <= 
        src_data_stream_2_V_dout when (and_ln74_1_reg_808(0) = '1') else 
        pix1_val_2_2_reg_750;
    pix1_val_2_fu_712_p3 <= 
        src_data_stream_2_V_dout when (and_ln74_4_reg_815(0) = '1') else 
        pix1_val_2_3_fu_706_p3;

    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln70_reg_799)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln70_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln70_reg_799)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln70_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln70_reg_799)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln70_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_3_V_blk_n_assign_proc : process(src_data_stream_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln70_reg_799)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_3_V_blk_n <= src_data_stream_3_V_empty_n;
        else 
            src_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln70_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_reg_799 = ap_const_lv1_0))) then 
            src_data_stream_3_V_read <= ap_const_logic_1;
        else 
            src_data_stream_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    xleft_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_blk_n <= xleft_empty_n;
        else 
            xleft_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xleft_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_out_blk_n <= xleft_out_full_n;
        else 
            xleft_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xleft_out_din <= xleft_dout;

    xleft_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_out_write <= ap_const_logic_1;
        else 
            xleft_out_write <= ap_const_logic_0;
        end if; 
    end process;


    xleft_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_read <= ap_const_logic_1;
        else 
            xleft_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln74_fu_584_p2 <= (or_ln74_fu_560_p2 xor ap_const_lv1_1);

    xright_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xright_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xright_blk_n <= xright_empty_n;
        else 
            xright_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xright_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xright_read <= ap_const_logic_1;
        else 
            xright_read <= ap_const_logic_0;
        end if; 
    end process;


    ydown_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ydown_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ydown_blk_n <= ydown_empty_n;
        else 
            ydown_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ydown_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ydown_read <= ap_const_logic_1;
        else 
            ydown_read <= ap_const_logic_0;
        end if; 
    end process;


    ytop_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ytop_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_blk_n <= ytop_empty_n;
        else 
            ytop_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ytop_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ytop_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_out_blk_n <= ytop_out_full_n;
        else 
            ytop_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ytop_out_din <= ytop_dout;

    ytop_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_out_write <= ap_const_logic_1;
        else 
            ytop_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ytop_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_read <= ap_const_logic_1;
        else 
            ytop_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln68_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_458),16));
    zext_ln70_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_469),16));
    zext_ln74_1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xright_dout),17));
    zext_ln74_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xleft_dout),17));
    zext_ln74_3_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ytop_dout),17));
    zext_ln74_4_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_458),17));
    zext_ln74_5_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_469),17));
    zext_ln74_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ydown_dout),17));
end behav;
