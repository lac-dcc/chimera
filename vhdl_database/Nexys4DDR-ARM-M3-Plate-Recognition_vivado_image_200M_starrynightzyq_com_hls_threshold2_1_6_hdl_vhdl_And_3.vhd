-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity And_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_1_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_1_data_stream_V_empty_n : IN STD_LOGIC;
    src_1_data_stream_V_read : OUT STD_LOGIC;
    src_2_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_2_data_stream_V_empty_n : IN STD_LOGIC;
    src_2_data_stream_V_read : OUT STD_LOGIC;
    src_3_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_3_data_stream_V_empty_n : IN STD_LOGIC;
    src_3_data_stream_V_read : OUT STD_LOGIC;
    dst_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    dst_rows_V_empty_n : IN STD_LOGIC;
    dst_rows_V_read : OUT STD_LOGIC;
    dst_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    dst_cols_V_empty_n : IN STD_LOGIC;
    dst_cols_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_rows_V_out_full_n : IN STD_LOGIC;
    dst_rows_V_out_write : OUT STD_LOGIC;
    dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_cols_V_out_full_n : IN STD_LOGIC;
    dst_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of And_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_1_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_2_data_stream_V_blk_n : STD_LOGIC;
    signal src_3_data_stream_V_blk_n : STD_LOGIC;
    signal dst_rows_V_blk_n : STD_LOGIC;
    signal dst_cols_V_blk_n : STD_LOGIC;
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_i_reg_284_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_rows_V_out_blk_n : STD_LOGIC;
    signal dst_cols_V_out_blk_n : STD_LOGIC;
    signal t_V_10_reg_220 : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_rows_V_read_reg_265 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal dst_cols_V_read_reg_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond8_i_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_reg_279 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_i_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_fu_247_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_106_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_106_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal t_V_reg_209 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp1_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_231_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond8_i_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((exitcond8_i_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_10_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_10_reg_220 <= j_V_fu_247_p2;
            elsif (((exitcond8_i_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_10_reg_220 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    t_V_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_209 <= i_V_reg_279;
            elsif ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_209 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                dst_cols_V_read_reg_270 <= dst_cols_V_dout;
                dst_rows_V_read_reg_265 <= dst_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_i_reg_284 <= exitcond_i_fu_242_p2;
                exitcond_i_reg_284_pp0_iter1_reg <= exitcond_i_reg_284;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_279 <= i_V_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_106_reg_293 <= tmp_106_fu_259_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond8_i_fu_231_p2, ap_CS_fsm_state2, exitcond_i_fu_242_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_231_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_fu_242_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_fu_242_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_1_data_stream_V_empty_n, src_2_data_stream_V_empty_n, src_3_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_284, ap_enable_reg_pp0_iter2, exitcond_i_reg_284_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_284 = ap_const_lv1_0) and (src_3_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_2_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_1_data_stream_V_empty_n = ap_const_logic_0)))) or ((exitcond_i_reg_284_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_1_data_stream_V_empty_n, src_2_data_stream_V_empty_n, src_3_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_284, ap_enable_reg_pp0_iter2, exitcond_i_reg_284_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_284 = ap_const_lv1_0) and (src_3_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_2_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_1_data_stream_V_empty_n = ap_const_logic_0)))) or ((exitcond_i_reg_284_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_1_data_stream_V_empty_n, src_2_data_stream_V_empty_n, src_3_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_284, ap_enable_reg_pp0_iter2, exitcond_i_reg_284_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_284 = ap_const_lv1_0) and (src_3_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_2_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_1_data_stream_V_empty_n = ap_const_logic_0)))) or ((exitcond_i_reg_284_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
                ap_block_state1 <= ((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_1_data_stream_V_empty_n, src_2_data_stream_V_empty_n, src_3_data_stream_V_empty_n, exitcond_i_reg_284)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_i_reg_284 = ap_const_lv1_0) and (src_3_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_2_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_284 = ap_const_lv1_0) and (src_1_data_stream_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(dst_data_stream_V_full_n, exitcond_i_reg_284_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((exitcond_i_reg_284_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_fu_242_p2)
    begin
        if ((exitcond_i_fu_242_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond8_i_fu_231_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_231_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    dst_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_blk_n <= dst_cols_V_empty_n;
        else 
            dst_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_cols_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_cols_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_out_blk_n <= dst_cols_V_out_full_n;
        else 
            dst_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_cols_V_out_din <= dst_cols_V_dout;

    dst_cols_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_out_write <= ap_const_logic_1;
        else 
            dst_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_read <= ap_const_logic_1;
        else 
            dst_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_i_reg_284_pp0_iter1_reg)
    begin
        if (((exitcond_i_reg_284_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= tmp_106_reg_293;

    dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_i_reg_284_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_284_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_blk_n <= dst_rows_V_empty_n;
        else 
            dst_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_rows_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_out_blk_n <= dst_rows_V_out_full_n;
        else 
            dst_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_rows_V_out_din <= dst_rows_V_dout;

    dst_rows_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_out_write <= ap_const_logic_1;
        else 
            dst_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_read <= ap_const_logic_1;
        else 
            dst_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond8_i_fu_231_p2 <= "1" when (t_V_reg_209 = dst_rows_V_read_reg_265) else "0";
    exitcond_i_fu_242_p2 <= "1" when (t_V_10_reg_220 = dst_cols_V_read_reg_270) else "0";
    i_V_fu_236_p2 <= std_logic_vector(unsigned(t_V_reg_209) + unsigned(ap_const_lv16_1));

    internal_ap_ready_assign_proc : process(exitcond8_i_fu_231_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_231_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_247_p2 <= std_logic_vector(unsigned(t_V_10_reg_220) + unsigned(ap_const_lv16_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    src_1_data_stream_V_blk_n_assign_proc : process(src_1_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_284)
    begin
        if (((exitcond_i_reg_284 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_1_data_stream_V_blk_n <= src_1_data_stream_V_empty_n;
        else 
            src_1_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_1_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_284, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_284 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_1_data_stream_V_read <= ap_const_logic_1;
        else 
            src_1_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_2_data_stream_V_blk_n_assign_proc : process(src_2_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_284)
    begin
        if (((exitcond_i_reg_284 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_2_data_stream_V_blk_n <= src_2_data_stream_V_empty_n;
        else 
            src_2_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_2_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_284, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_284 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_2_data_stream_V_read <= ap_const_logic_1;
        else 
            src_2_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_3_data_stream_V_blk_n_assign_proc : process(src_3_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_284)
    begin
        if (((exitcond_i_reg_284 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_3_data_stream_V_blk_n <= src_3_data_stream_V_empty_n;
        else 
            src_3_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_3_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_284, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_284 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_3_data_stream_V_read <= ap_const_logic_1;
        else 
            src_3_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_253_p2 <= (src_3_data_stream_V_dout and src_2_data_stream_V_dout);
    tmp_106_fu_259_p2 <= (tmp1_fu_253_p2 and src_1_data_stream_V_dout);
end behav;
