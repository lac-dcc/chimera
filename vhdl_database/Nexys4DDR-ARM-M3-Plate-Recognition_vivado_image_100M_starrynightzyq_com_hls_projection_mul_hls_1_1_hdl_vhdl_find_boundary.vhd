-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity find_boundary is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V_empty_n : IN STD_LOGIC;
    src_cols_V_read : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    threshold_v_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_v_empty_n : IN STD_LOGIC;
    threshold_v_read : OUT STD_LOGIC;
    bound_min_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bound_min_ce0 : OUT STD_LOGIC;
    bound_min_we0 : OUT STD_LOGIC;
    bound_min_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_max_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bound_max_ce0 : OUT STD_LOGIC;
    bound_max_we0 : OUT STD_LOGIC;
    bound_max_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    range_min_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    range_min_empty_n : IN STD_LOGIC;
    range_min_read : OUT STD_LOGIC;
    range_max_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    range_max_empty_n : IN STD_LOGIC;
    range_max_read : OUT STD_LOGIC );
end;


architecture behav of find_boundary is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_cols_V_blk_n : STD_LOGIC;
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal threshold_v_blk_n : STD_LOGIC;
    signal range_min_blk_n : STD_LOGIC;
    signal range_max_blk_n : STD_LOGIC;
    signal i_i_i_reg_214 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_threshold_fu_239_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_threshold_reg_485 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal length_fu_253_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal length_reg_491 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_cast_i_i_fu_261_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_cast_i_i_reg_496 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_i_i_fu_265_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_i_i_reg_501 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_506 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_279_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_510 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_3_i_i_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_i_i_i_phi_fu_218_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_i_i_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond5_i_i_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal character_num_1_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_character_num_i_i_fu_320_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal character_num_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_min_temp_fu_150 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_temp_1_fu_339_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_bound_min_temp_i_i_fu_311_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal inBlock_i_i_fu_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_inBlock_i_i_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_max_temp_fu_381_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_i_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_243_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal not_i_i_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_0_not_i_i_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_i_i_fu_386_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_cast_i_i_fu_390_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_i_i_fu_394_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_i_i_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_i_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_422_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_i_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bound_min_temp_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_1) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond_i_i_fu_410_p2 = ap_const_lv1_1) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (or_cond_i_i_fu_410_p2 = ap_const_lv1_0) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                bound_min_temp_fu_150 <= p_bound_min_temp_i_i_fu_311_p3;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bound_min_temp_fu_150 <= bound_min_temp_1_fu_339_p1;
            end if; 
        end if;
    end process;

    character_num_1_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (or_cond_i_i_fu_410_p2 = ap_const_lv1_0) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                character_num_1_fu_146 <= character_num_fu_444_p3;
            elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_1) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond_i_i_fu_410_p2 = ap_const_lv1_1) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                character_num_1_fu_146 <= p_character_num_i_i_fu_320_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                character_num_1_fu_146 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_506 = ap_const_lv1_0))) then 
                i_i_i_reg_214 <= i_reg_510;
            elsif ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_i_reg_214 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    inBlock_i_i_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_1) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                inBlock_i_i_fu_154 <= p_inBlock_i_i_fu_305_p2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                inBlock_i_i_fu_154 <= ap_const_lv1_1;
            elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                inBlock_i_i_fu_154 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_506 <= exitcond_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_510 <= i_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                length_reg_491 <= length_fu_253_p3;
                p_threshold_reg_485 <= p_threshold_fu_239_p1;
                    tmp_9_cast_i_i_reg_496(15 downto 0) <= tmp_9_cast_i_i_fu_261_p1(15 downto 0);
                    tmp_cast_i_i_reg_501(15 downto 0) <= tmp_cast_i_i_fu_265_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_274_p2 = ap_const_lv1_0))) then
                tmp_3_i_i_reg_515 <= tmp_3_i_i_fu_285_p2;
            end if;
        end if;
    end process;
    tmp_9_cast_i_i_reg_496(16) <= '0';
    tmp_cast_i_i_reg_501(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n, range_min_empty_n, range_max_empty_n, exitcond_fu_274_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_274_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_cols_V_empty_n, threshold_v_empty_n, range_min_empty_n, range_max_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (src_data_stream_V_empty_n = ap_const_logic_0);
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_fu_274_p2)
    begin
        if ((exitcond_fu_274_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_i_phi_fu_218_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_i_i_reg_214, exitcond_reg_506, i_reg_510)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_506 = ap_const_lv1_0))) then 
            ap_phi_mux_i_i_i_phi_fu_218_p4 <= i_reg_510;
        else 
            ap_phi_mux_i_i_i_phi_fu_218_p4 <= i_i_i_reg_214;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_max_address0 <= tmp_13_i_i_fu_416_p1(3 - 1 downto 0);

    bound_max_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bound_max_ce0 <= ap_const_logic_1;
        else 
            bound_max_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_max_d0 <= bound_max_temp_fu_381_p1;
    bound_max_temp_fu_381_p1 <= i_i_i_reg_214(16 - 1 downto 0);

    bound_max_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_cond5_i_i_fu_333_p2, brmerge_i_i_fu_376_p2, or_cond_i_i_fu_410_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (or_cond_i_i_fu_410_p2 = ap_const_lv1_0) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bound_max_we0 <= ap_const_logic_1;
        else 
            bound_max_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_min_address0 <= tmp_13_i_i_fu_416_p1(3 - 1 downto 0);

    bound_min_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bound_min_ce0 <= ap_const_logic_1;
        else 
            bound_min_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_min_d0 <= p_bound_min_temp_i_i_fu_311_p3;
    bound_min_temp_1_fu_339_p1 <= i_i_i_reg_214(16 - 1 downto 0);

    bound_min_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_cond5_i_i_fu_333_p2, brmerge_i_i_fu_376_p2, or_cond_i_i_fu_410_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond5_i_i_fu_333_p2 = ap_const_lv1_1) and (or_cond_i_i_fu_410_p2 = ap_const_lv1_0) and (brmerge_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bound_min_we0 <= ap_const_logic_1;
        else 
            bound_min_we0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_i_i_fu_376_p2 <= (tmp_3_i_i_reg_515 or tmp1_fu_370_p2);
    character_num_fu_444_p3 <= 
        tmp_15_i_i_fu_438_p2 when (icmp_fu_432_p2(0) = '1') else 
        p_character_num_i_i_fu_320_p3;
    exitcond_fu_274_p2 <= "1" when (ap_phi_mux_i_i_i_phi_fu_218_p4 = length_reg_491) else "0";
    i_fu_279_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_i_phi_fu_218_p4) + unsigned(ap_const_lv31_1));
    icmp_fu_432_p2 <= "1" when (tmp_4_fu_422_p4 = ap_const_lv5_0) else "0";
    inBlock_0_not_i_i_fu_364_p2 <= (inBlock_i_i_fu_154 xor ap_const_lv1_1);
    length_fu_253_p3 <= 
        ap_const_lv31_1 when (tmp_i_i_fu_247_p2(0) = '1') else 
        tmp_1_fu_243_p1;
    not_i_i_fu_300_p2 <= (tmp_3_i_i_reg_515 xor ap_const_lv1_1);
    or_cond5_i_i_fu_333_p2 <= (tmp_4_i_i_fu_328_p2 or p_inBlock_i_i_fu_305_p2);
    or_cond_i_i_fu_410_p2 <= (tmp_12_i_i_fu_405_p2 or tmp_11_i_i_fu_400_p2);
    p_bound_min_temp_i_i_fu_311_p3 <= 
        ap_const_lv16_0 when (tmp_3_i_i_reg_515(0) = '1') else 
        bound_min_temp_fu_150;
    p_character_num_i_i_fu_320_p3 <= 
        ap_const_lv8_0 when (tmp_3_i_i_reg_515(0) = '1') else 
        character_num_1_fu_146;
    p_inBlock_i_i_fu_305_p2 <= (not_i_i_fu_300_p2 and inBlock_i_i_fu_154);
    p_threshold_fu_239_p1 <= threshold_v_dout(16 - 1 downto 0);

    range_max_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, range_max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            range_max_blk_n <= range_max_empty_n;
        else 
            range_max_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    range_max_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n, range_min_empty_n, range_max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            range_max_read <= ap_const_logic_1;
        else 
            range_max_read <= ap_const_logic_0;
        end if; 
    end process;


    range_min_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, range_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            range_min_blk_n <= range_min_empty_n;
        else 
            range_min_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    range_min_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n, range_min_empty_n, range_max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            range_min_read <= ap_const_logic_1;
        else 
            range_min_read <= ap_const_logic_0;
        end if; 
    end process;

    rev_fu_358_p2 <= (ult_fu_353_p2 xor ap_const_lv1_1);

    src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_blk_n <= src_cols_V_empty_n;
        else 
            src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n, range_min_empty_n, range_max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_read <= ap_const_logic_1;
        else 
            src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    threshold_v_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, threshold_v_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_v_blk_n <= threshold_v_empty_n;
        else 
            threshold_v_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_v_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_v_empty_n, range_min_empty_n, range_max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_max_empty_n = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (threshold_v_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_v_read <= ap_const_logic_1;
        else 
            threshold_v_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_370_p2 <= (rev_fu_358_p2 or inBlock_0_not_i_i_fu_364_p2);
    tmp_10_i_i_fu_394_p2 <= std_logic_vector(unsigned(tmp_5_cast_i_i_fu_386_p1) - unsigned(tmp_6_cast_i_i_fu_390_p1));
    tmp_11_i_i_fu_400_p2 <= "1" when (signed(tmp_10_i_i_fu_394_p2) < signed(tmp_9_cast_i_i_reg_496)) else "0";
    tmp_12_i_i_fu_405_p2 <= "1" when (signed(tmp_10_i_i_fu_394_p2) > signed(tmp_cast_i_i_reg_501)) else "0";
    tmp_13_i_i_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_character_num_i_i_fu_320_p3),64));
    tmp_15_i_i_fu_438_p2 <= std_logic_vector(unsigned(p_character_num_i_i_fu_320_p3) + unsigned(ap_const_lv8_1));
    tmp_1_fu_243_p1 <= src_cols_V_dout(31 - 1 downto 0);
    tmp_3_i_i_fu_285_p2 <= "1" when (ap_phi_mux_i_i_i_phi_fu_218_p4 = ap_const_lv31_0) else "0";
    tmp_4_fu_422_p4 <= p_character_num_i_i_fu_320_p3(7 downto 3);
    tmp_4_i_i_fu_328_p2 <= "1" when (unsigned(src_data_stream_V_dout) < unsigned(p_threshold_reg_485)) else "0";
    tmp_5_cast_i_i_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_max_temp_fu_381_p1),17));
    tmp_6_cast_i_i_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_bound_min_temp_i_i_fu_311_p3),17));
    tmp_9_cast_i_i_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(range_min_dout),17));
    tmp_cast_i_i_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(range_max_dout),17));
    tmp_i_i_fu_247_p2 <= "1" when (signed(src_cols_V_dout) < signed(ap_const_lv32_1)) else "0";
    ult_fu_353_p2 <= "1" when (unsigned(src_data_stream_V_dout) < unsigned(p_threshold_reg_485)) else "0";
end behav;
