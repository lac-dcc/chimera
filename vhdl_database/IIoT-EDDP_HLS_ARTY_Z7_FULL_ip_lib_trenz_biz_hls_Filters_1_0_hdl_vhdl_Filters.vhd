-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filters is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_V_TVALID : IN STD_LOGIC;
    s_axis_V_TREADY : OUT STD_LOGIC;
    m_axis_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_V_TVALID : OUT STD_LOGIC;
    m_axis_V_TREADY : IN STD_LOGIC;
    RPM_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    RPM_out_ap_vld : OUT STD_LOGIC;
    control : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Filters is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Filters,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.816500,HLS_SYN_LAT=69,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=1047,HLS_SYN_LUT=528}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_7FFE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111111111111110";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_46C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100011011001000";
    constant ap_const_lv32_3937 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011100100110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_axis_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal s_axis_V_0_vld_in : STD_LOGIC;
    signal s_axis_V_0_vld_out : STD_LOGIC;
    signal s_axis_V_0_ack_in : STD_LOGIC;
    signal s_axis_V_0_ack_out : STD_LOGIC;
    signal s_axis_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal s_axis_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal s_axis_V_0_sel_rd : STD_LOGIC := '0';
    signal s_axis_V_0_sel_wr : STD_LOGIC := '0';
    signal s_axis_V_0_sel : STD_LOGIC;
    signal s_axis_V_0_load_A : STD_LOGIC;
    signal s_axis_V_0_load_B : STD_LOGIC;
    signal s_axis_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_V_0_state_cmp_full : STD_LOGIC;
    signal m_axis_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal m_axis_V_1_vld_in : STD_LOGIC;
    signal m_axis_V_1_vld_out : STD_LOGIC;
    signal m_axis_V_1_ack_in : STD_LOGIC;
    signal m_axis_V_1_ack_out : STD_LOGIC;
    signal m_axis_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal m_axis_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal m_axis_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_V_1_sel : STD_LOGIC;
    signal m_axis_V_1_load_A : STD_LOGIC;
    signal m_axis_V_1_load_B : STD_LOGIC;
    signal m_axis_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_V_1_state_cmp_full : STD_LOGIC;
    signal filt_acc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_mem_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal filt_mem_ce0 : STD_LOGIC;
    signal filt_mem_we0 : STD_LOGIC;
    signal filt_mem_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal filt_mem_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Y1a_prev : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal Y1b_prev : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal Y2a_prev : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal Y2b_prev : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal dc_cnt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ia_DC_acc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ib_DC_acc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ia_DC_val : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal Ib_DC_val : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal Ia_corr : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal Ib_corr : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal s_axis_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal m_axis_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Ia_fu_181_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ia_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ib_reg_658 : STD_LOGIC_VECTOR (15 downto 0);
    signal RPM_fu_195_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal RPM_reg_663 : STD_LOGIC_VECTOR (15 downto 0);
    signal Theta_reg_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast3_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast3_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_687 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_707 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_11_reg_712 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal RPM_f_cast_fu_347_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal RPM_f_cast_reg_727 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Ia2_filtered_cast_reg_732 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ib2_filtered_cast_reg_737 : STD_LOGIC_VECTOR (15 downto 0);
    signal dc_cnt_load_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_764 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal res_fu_579_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_22_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_phi_fu_174_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_357_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_fu_379_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal Ia2_filtered_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ib2_filtered_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_223_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal extLd9_cast_fu_215_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_227_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_cast_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_338_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_639_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_534_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_557_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ib_f_fu_574_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ia_f_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_602_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_610_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_618_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_624_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_630_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_639_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component Filters_mul_mul_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filters_mac_muladcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filters_mul_mul_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filters_mac_muladeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filters_filt_mem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    filt_mem_U : component Filters_filt_mem
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => filt_mem_address0,
        ce0 => filt_mem_ce0,
        we0 => filt_mem_we0,
        d0 => filt_mem_d0,
        q0 => filt_mem_q0);

    Filters_mul_mul_1bkb_U0 : component Filters_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => Ia_reg_653,
        din1 => tmp_s_fu_590_p1,
        dout => tmp_s_fu_590_p2);

    Filters_mul_mul_1bkb_U1 : component Filters_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => Ib_reg_658,
        din1 => tmp_3_fu_596_p1,
        dout => tmp_3_fu_596_p2);

    Filters_mac_muladcud_U2 : component Filters_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => Y1a_prev,
        din1 => grp_fu_602_p1,
        din2 => tmp_s_reg_697,
        dout => grp_fu_602_p3);

    Filters_mac_muladcud_U3 : component Filters_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => Y1b_prev,
        din1 => grp_fu_610_p1,
        din2 => tmp_3_reg_702,
        dout => grp_fu_610_p3);

    Filters_mul_mul_1dEe_U4 : component Filters_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => Y2a_prev,
        din1 => tmp_13_fu_618_p1,
        dout => tmp_13_fu_618_p2);

    Filters_mul_mul_1dEe_U5 : component Filters_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => Y2b_prev,
        din1 => tmp_15_fu_624_p1,
        dout => tmp_15_fu_624_p2);

    Filters_mac_muladeOg_U6 : component Filters_mac_muladeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_10_reg_707,
        din1 => grp_fu_630_p1,
        din2 => tmp_13_reg_717,
        dout => grp_fu_630_p3);

    Filters_mac_muladeOg_U7 : component Filters_mac_muladeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_11_reg_712,
        din1 => grp_fu_639_p1,
        din2 => tmp_15_reg_722,
        dout => grp_fu_639_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_axis_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_V_1_ack_out) and (ap_const_logic_1 = m_axis_V_1_vld_out))) then 
                                        m_axis_V_1_sel_rd <= not(m_axis_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_V_1_vld_in) and (ap_const_logic_1 = m_axis_V_1_ack_in))) then 
                                        m_axis_V_1_sel_wr <= not(m_axis_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = m_axis_V_1_vld_in) and (ap_const_logic_1 = m_axis_V_1_ack_out) and (ap_const_lv2_3 = m_axis_V_1_state)) or ((ap_const_logic_0 = m_axis_V_1_vld_in) and (ap_const_lv2_2 = m_axis_V_1_state)))) then 
                    m_axis_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = m_axis_V_1_vld_in) and (ap_const_logic_0 = m_axis_V_1_ack_out) and (ap_const_lv2_3 = m_axis_V_1_state)) or ((ap_const_logic_0 = m_axis_V_1_ack_out) and (ap_const_lv2_1 = m_axis_V_1_state)))) then 
                    m_axis_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = m_axis_V_1_vld_in) and (ap_const_lv2_2 = m_axis_V_1_state)) or ((ap_const_logic_1 = m_axis_V_1_ack_out) and (ap_const_lv2_1 = m_axis_V_1_state)) or ((ap_const_lv2_3 = m_axis_V_1_state) and not(((ap_const_logic_1 = m_axis_V_1_vld_in) and (ap_const_logic_0 = m_axis_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_V_1_vld_in) and (ap_const_logic_1 = m_axis_V_1_ack_out)))))) then 
                    m_axis_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_V_0_ack_out) and (ap_const_logic_1 = s_axis_V_0_vld_out))) then 
                                        s_axis_V_0_sel_rd <= not(s_axis_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    s_axis_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_V_0_vld_in) and (ap_const_logic_1 = s_axis_V_0_ack_in))) then 
                                        s_axis_V_0_sel_wr <= not(s_axis_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    s_axis_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = s_axis_V_0_vld_in) and (ap_const_logic_1 = s_axis_V_0_ack_out) and (s_axis_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = s_axis_V_0_vld_in) and (s_axis_V_0_state = ap_const_lv2_2)))) then 
                    s_axis_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = s_axis_V_0_vld_in) and (ap_const_logic_0 = s_axis_V_0_ack_out) and (s_axis_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = s_axis_V_0_ack_out) and (s_axis_V_0_state = ap_const_lv2_1)))) then 
                    s_axis_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = s_axis_V_0_vld_in) and (s_axis_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = s_axis_V_0_ack_out) and (s_axis_V_0_state = ap_const_lv2_1)) or ((s_axis_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = s_axis_V_0_vld_in) and (ap_const_logic_0 = s_axis_V_0_ack_out))) and not(((ap_const_logic_0 = s_axis_V_0_vld_in) and (ap_const_logic_1 = s_axis_V_0_ack_out)))))) then 
                    s_axis_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    Ia_DC_acc_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_17_reg_747))) then 
                Ia_DC_acc <= tmp_20_reg_751;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_17_fu_417_p2))) then 
                Ia_DC_acc <= Ia2_filtered_fu_366_p1;
            end if; 
        end if;
    end process;

    Ib_DC_acc_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_17_reg_747))) then 
                Ib_DC_acc <= tmp_21_reg_756;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_17_fu_417_p2))) then 
                Ib_DC_acc <= Ib2_filtered_fu_388_p1;
            end if; 
        end if;
    end process;

    i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_159 <= i_1_reg_687;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (s_axis_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_159 <= ap_const_lv5_1F;
            end if; 
        end if;
    end process;

    storemerge_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_17_fu_417_p2))) then 
                storemerge_reg_170 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_17_reg_747))) then 
                storemerge_reg_170 <= tmp_22_fu_497_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                Ia2_filtered_cast_reg_732 <= grp_fu_630_p3(30 downto 15);
                Ib2_filtered_cast_reg_737 <= grp_fu_639_p3(30 downto 15);
                RPM_f_cast_reg_727 <= RPM_f_cast_fu_347_p1;
                Y2a_prev <= grp_fu_630_p3(31 downto 15);
                Y2b_prev <= grp_fu_639_p3(31 downto 15);
                dc_cnt_load_reg_742 <= dc_cnt;
                tmp_17_reg_747 <= tmp_17_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_17_fu_417_p2))) then
                Ia_DC_val <= Ia_DC_acc(31 downto 15);
                Ib_DC_val <= Ib_DC_acc(31 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_23_fu_509_p2))) then
                Ia_corr <= Ia_DC_val;
                Ib_corr <= Ib_DC_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (s_axis_V_0_vld_out = ap_const_logic_1))) then
                Ia_reg_653 <= Ia_fu_181_p1;
                Ib_reg_658 <= s_axis_V_0_data_out(31 downto 16);
                RPM_reg_663 <= s_axis_V_0_data_out(47 downto 32);
                Theta_reg_668 <= s_axis_V_0_data_out(63 downto 48);
                filt_acc <= tmp_6_fu_237_p2;
                tmp_6_reg_673 <= tmp_6_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Y1a_prev <= grp_fu_602_p3(31 downto 15);
                Y1b_prev <= grp_fu_610_p3(31 downto 15);
                tmp_10_reg_707 <= grp_fu_602_p3(31 downto 15);
                tmp_11_reg_712 <= grp_fu_610_p3(31 downto 15);
                tmp_13_reg_717 <= tmp_13_fu_618_p2;
                tmp_15_reg_722 <= tmp_15_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                dc_cnt <= storemerge_phi_fu_174_p4;
                tmp_26_reg_764 <= tmp_6_reg_673(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_253_p2))) then
                i_1_reg_687 <= i_1_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    i_cast3_reg_679(4 downto 0) <= i_cast3_fu_249_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_V_1_load_A)) then
                m_axis_V_1_payload_A <= res_fu_579_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_V_1_load_B)) then
                m_axis_V_1_payload_B <= res_fu_579_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_V_0_load_A)) then
                s_axis_V_0_payload_A <= s_axis_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_V_0_load_B)) then
                s_axis_V_0_payload_B <= s_axis_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_17_fu_417_p2))) then
                tmp_20_reg_751 <= tmp_20_fu_431_p2;
                tmp_21_reg_756 <= tmp_21_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_253_p2))) then
                tmp_3_reg_702 <= tmp_3_fu_596_p2;
                tmp_s_reg_697 <= tmp_s_fu_590_p2;
            end if;
        end if;
    end process;
    i_cast3_reg_679(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, s_axis_V_0_vld_out, m_axis_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3, tmp_7_fu_253_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (s_axis_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_253_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axis_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axis_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
        Ia2_filtered_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_357_p4),32));

    Ia_f_fu_561_p2 <= std_logic_vector(unsigned(Ia2_filtered_cast_reg_732) - unsigned(tmp_fu_557_p1));
    Ia_fu_181_p1 <= s_axis_V_0_data_out(16 - 1 downto 0);
        Ib2_filtered_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_379_p4),32));

    Ib_f_fu_574_p2 <= std_logic_vector(unsigned(Ib2_filtered_cast_reg_737) - unsigned(tmp_27_fu_570_p1));
        RPM_f_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_338_p4),28));

    RPM_fu_195_p4 <= s_axis_V_0_data_out(47 downto 32);
        RPM_out <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_534_p2),32));


    RPM_out_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            RPM_out_ap_vld <= ap_const_logic_1;
        else 
            RPM_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(m_axis_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axis_V_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axis_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axis_V_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

        extLd9_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(filt_mem_q0),17));


    filt_mem_address0_assign_proc : process(ap_CS_fsm_state1, i_cast3_reg_679, ap_CS_fsm_state3, tmp_7_fu_253_p2, ap_CS_fsm_state4, i_1_cast_fu_265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_mem_address0 <= i_cast3_reg_679(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_253_p2))) then 
            filt_mem_address0 <= ap_const_lv5_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_253_p2))) then 
            filt_mem_address0 <= i_1_cast_fu_265_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            filt_mem_address0 <= ap_const_lv5_1F;
        else 
            filt_mem_address0 <= "XXXXX";
        end if; 
    end process;


    filt_mem_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_7_fu_253_p2, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_253_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_253_p2)) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            filt_mem_ce0 <= ap_const_logic_1;
        else 
            filt_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_mem_d0_assign_proc : process(filt_mem_q0, RPM_reg_663, ap_CS_fsm_state3, tmp_7_fu_253_p2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_mem_d0 <= filt_mem_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_253_p2))) then 
            filt_mem_d0 <= RPM_reg_663;
        else 
            filt_mem_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_mem_we0_assign_proc : process(ap_CS_fsm_state3, tmp_7_fu_253_p2, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_253_p2)) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filt_mem_we0 <= ap_const_logic_1;
        else 
            filt_mem_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_602_p1 <= ap_const_lv32_3937(15 - 1 downto 0);
    grp_fu_610_p1 <= ap_const_lv32_3937(15 - 1 downto 0);
    grp_fu_630_p1 <= ap_const_lv32_46C8(16 - 1 downto 0);
    grp_fu_639_p1 <= ap_const_lv32_46C8(16 - 1 downto 0);
    i_1_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_259_p2),32));
    i_1_fu_259_p2 <= std_logic_vector(unsigned(i_reg_159) + unsigned(ap_const_lv5_1F));
    i_cast3_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_159),32));
    m_axis_V_1_ack_in <= m_axis_V_1_state(1);
    m_axis_V_1_ack_out <= m_axis_V_TREADY;

    m_axis_V_1_data_out_assign_proc : process(m_axis_V_1_payload_A, m_axis_V_1_payload_B, m_axis_V_1_sel)
    begin
        if ((ap_const_logic_1 = m_axis_V_1_sel)) then 
            m_axis_V_1_data_out <= m_axis_V_1_payload_B;
        else 
            m_axis_V_1_data_out <= m_axis_V_1_payload_A;
        end if; 
    end process;

    m_axis_V_1_load_A <= (m_axis_V_1_state_cmp_full and not(m_axis_V_1_sel_wr));
    m_axis_V_1_load_B <= (m_axis_V_1_sel_wr and m_axis_V_1_state_cmp_full);
    m_axis_V_1_sel <= m_axis_V_1_sel_rd;
    m_axis_V_1_state_cmp_full <= '0' when (m_axis_V_1_state = ap_const_lv2_1) else '1';

    m_axis_V_1_vld_in_assign_proc : process(m_axis_V_1_ack_in, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axis_V_1_ack_in = ap_const_logic_1))) then 
            m_axis_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_V_1_vld_out <= m_axis_V_1_state(0);
    m_axis_V_TDATA <= m_axis_V_1_data_out;

    m_axis_V_TDATA_blk_n_assign_proc : process(m_axis_V_1_state, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axis_V_TDATA_blk_n <= m_axis_V_1_state(1);
        else 
            m_axis_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_V_TVALID <= m_axis_V_1_state(0);
    res_fu_579_p5 <= (((Theta_reg_668 & tmp_26_reg_764) & Ib_f_fu_574_p2) & Ia_f_fu_561_p2);
    s_axis_V_0_ack_in <= s_axis_V_0_state(1);

    s_axis_V_0_ack_out_assign_proc : process(s_axis_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (s_axis_V_0_vld_out = ap_const_logic_1))) then 
            s_axis_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_V_0_data_out_assign_proc : process(s_axis_V_0_payload_A, s_axis_V_0_payload_B, s_axis_V_0_sel)
    begin
        if ((ap_const_logic_1 = s_axis_V_0_sel)) then 
            s_axis_V_0_data_out <= s_axis_V_0_payload_B;
        else 
            s_axis_V_0_data_out <= s_axis_V_0_payload_A;
        end if; 
    end process;

    s_axis_V_0_load_A <= (s_axis_V_0_state_cmp_full and not(s_axis_V_0_sel_wr));
    s_axis_V_0_load_B <= (s_axis_V_0_sel_wr and s_axis_V_0_state_cmp_full);
    s_axis_V_0_sel <= s_axis_V_0_sel_rd;
    s_axis_V_0_state_cmp_full <= '0' when (s_axis_V_0_state = ap_const_lv2_1) else '1';
    s_axis_V_0_vld_in <= s_axis_V_TVALID;
    s_axis_V_0_vld_out <= s_axis_V_0_state(0);

    s_axis_V_TDATA_blk_n_assign_proc : process(s_axis_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_axis_V_TDATA_blk_n <= s_axis_V_0_state(0);
        else 
            s_axis_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_V_TREADY <= s_axis_V_0_state(1);

    storemerge_phi_fu_174_p4_assign_proc : process(tmp_17_reg_747, ap_CS_fsm_state7, tmp_22_fu_497_p2, storemerge_reg_170)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_17_reg_747))) then 
            storemerge_phi_fu_174_p4 <= tmp_22_fu_497_p2;
        else 
            storemerge_phi_fu_174_p4 <= storemerge_reg_170;
        end if; 
    end process;

    tmp_13_fu_618_p1 <= ap_const_lv32_3937(15 - 1 downto 0);
    tmp_15_fu_624_p1 <= ap_const_lv32_3937(15 - 1 downto 0);
    tmp_16_fu_357_p4 <= grp_fu_630_p3(31 downto 15);
    tmp_17_fu_417_p2 <= "1" when (signed(dc_cnt) > signed(ap_const_lv32_7FFE)) else "0";
    tmp_18_fu_379_p4 <= grp_fu_639_p3(31 downto 15);
    tmp_1_fu_338_p4 <= tmp_6_reg_673(31 downto 5);
    tmp_20_fu_431_p2 <= std_logic_vector(unsigned(Ia_DC_acc) + unsigned(Ia2_filtered_fu_366_p1));
    tmp_21_fu_437_p2 <= std_logic_vector(unsigned(Ib_DC_acc) + unsigned(Ib2_filtered_fu_388_p1));
    tmp_22_fu_497_p2 <= std_logic_vector(unsigned(dc_cnt_load_reg_742) + unsigned(ap_const_lv32_1));
    tmp_23_fu_509_p2 <= "1" when (control = ap_const_lv32_0) else "0";
    tmp_24_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(RPM_f_cast_reg_727));
    tmp_27_fu_570_p1 <= Ib_corr(16 - 1 downto 0);
    tmp_3_fu_596_p1 <= ap_const_lv32_46C8(16 - 1 downto 0);
        tmp_4_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(RPM_fu_195_p4),17));

        tmp_5_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_227_p2),32));

    tmp_5_fu_227_p2 <= std_logic_vector(signed(tmp_4_cast_fu_223_p1) - signed(extLd9_cast_fu_215_p1));
    tmp_6_fu_237_p2 <= std_logic_vector(unsigned(filt_acc) + unsigned(tmp_5_cast_fu_233_p1));
    tmp_7_fu_253_p2 <= "1" when (i_reg_159 = ap_const_lv5_0) else "0";
    tmp_fu_557_p1 <= Ia_corr(16 - 1 downto 0);
    tmp_s_fu_590_p1 <= ap_const_lv32_46C8(16 - 1 downto 0);
end behav;
