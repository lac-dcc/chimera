-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity find_boundary_shrink_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V_empty_n : IN STD_LOGIC;
    src_cols_V_read : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    threshold_width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_width_empty_n : IN STD_LOGIC;
    threshold_width_read : OUT STD_LOGIC;
    shrink_x_min_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    shrink_x_min_empty_n : IN STD_LOGIC;
    shrink_x_min_read : OUT STD_LOGIC;
    shrink_x_max_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    shrink_x_max_empty_n : IN STD_LOGIC;
    shrink_x_max_read : OUT STD_LOGIC;
    range_min_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    range_min_empty_n : IN STD_LOGIC;
    range_min_read : OUT STD_LOGIC;
    bound_min : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_min_ap_vld : OUT STD_LOGIC;
    bound_max : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_max_ap_vld : OUT STD_LOGIC );
end;


architecture behav of find_boundary_shrink_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_cols_V_blk_n : STD_LOGIC;
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_width_blk_n : STD_LOGIC;
    signal shrink_x_min_blk_n : STD_LOGIC;
    signal shrink_x_max_blk_n : STD_LOGIC;
    signal range_min_blk_n : STD_LOGIC;
    signal inBlock_i_i_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_min_r_1_i_i_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_max_r_1_i_i_reg_228 : STD_LOGIC_VECTOR (15 downto 0);
    signal character_num_i_i_reg_240 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_i_reg_252 : STD_LOGIC_VECTOR (30 downto 0);
    signal shrink_x_min_read_reg_685 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal shrink_x_max_read_reg_691 : STD_LOGIC_VECTOR (7 downto 0);
    signal range_min_read_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_threshold_fu_263_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_threshold_reg_702 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_267_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_reg_707 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_i_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_fu_277_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal length_reg_717 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_14_cast_i_i_fu_283_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_cast_i_i_reg_723 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_i_i_fu_286_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_i_i_reg_728 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_cast_i_i_fu_292_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_cast_i_i_reg_733 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_cast_i_i_fu_295_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_cast_i_i_reg_738 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_i_i_fu_298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_i_i_reg_743 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_i_i_fu_301_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_i_i_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_753 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_758_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_758_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_313_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_21_i_i_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_i_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_i_reg_767_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_min_temp_fu_325_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_temp_reg_777 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_temp_reg_777_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_i_i_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_i_reg_784 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_i_reg_784_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_i_reg_784_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_i_i_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_i_i_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_3_i_i_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_3_i_i_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal bound_min_r_1_5_i_i_fu_514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_r_1_5_i_i_reg_801 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_max_r_1_4_i_i_fu_545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_max_r_1_4_i_i_reg_808 : STD_LOGIC_VECTOR (15 downto 0);
    signal character_num_4_i_i_fu_608_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal character_num_4_i_i_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_inBlock_i_i_phi_fu_208_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_character_num_i_i_phi_fu_244_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_temp_i_i_fu_150 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_min_temp_2_i_i_fu_576_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal not_i_i_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_inBlock_i_i_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_min_r_1_fu_367_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_cast_i_i_fu_386_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_cast_i_i_fu_389_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_i_i_fu_393_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_character_num_i_i_fu_374_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_i_i_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_bound_min_r_1_i_i_fu_353_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond_i_i_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBlock_i_i_not_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_i_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_bound_min_temp_0_b_fu_410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_490_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp5_fu_498_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp9_fu_506_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_bound_max_r_1_i_i_fu_360_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp10_fu_522_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp11_fu_529_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp12_fu_537_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp13_fu_553_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp14_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp15_fu_568_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal character_num_fu_418_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp16_fu_584_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp17_fu_592_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp18_fu_600_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_cast_i_i_fu_621_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_31_i_i_fu_624_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_31_cast_i_i_cast_fu_629_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_i_40_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_i_fu_638_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_cast_i_i_fu_650_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_37_i_i_fu_653_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_i_i_fu_666_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bound_max_r_1_i_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bound_max_r_1_i_i_reg_228 <= bound_max_r_1_4_i_i_reg_808;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                bound_max_r_1_i_i_reg_228 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    bound_min_r_1_i_i_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bound_min_r_1_i_i_reg_216 <= bound_min_r_1_5_i_i_reg_801;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                bound_min_r_1_i_i_reg_216 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    character_num_i_i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                character_num_i_i_reg_240 <= character_num_4_i_i_reg_815;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                character_num_i_i_reg_240 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_i_i_reg_252 <= i_fu_313_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_i_i_reg_252 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    inBlock_i_i_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                inBlock_i_i_reg_204 <= inBlock_3_i_i_reg_796;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                inBlock_i_i_reg_204 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_758_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bound_max_r_1_4_i_i_reg_808 <= bound_max_r_1_4_i_i_fu_545_p3;
                bound_min_r_1_5_i_i_reg_801 <= bound_min_r_1_5_i_i_fu_514_p3;
                bound_min_temp_i_i_fu_150 <= bound_min_temp_2_i_i_fu_576_p3;
                character_num_4_i_i_reg_815 <= character_num_4_i_i_fu_608_p3;
                inBlock_3_i_i_reg_796 <= inBlock_3_i_i_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bound_min_temp_reg_777 <= bound_min_temp_fu_325_p1;
                tmp_21_i_i_reg_767 <= tmp_21_i_i_fu_319_p2;
                tmp_29_i_i_reg_784 <= tmp_29_i_i_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bound_min_temp_reg_777_pp0_iter1_reg <= bound_min_temp_reg_777;
                exitcond_reg_758 <= exitcond_fu_308_p2;
                exitcond_reg_758_pp0_iter1_reg <= exitcond_reg_758;
                tmp_21_i_i_reg_767_pp0_iter1_reg <= tmp_21_i_i_reg_767;
                tmp_29_i_i_reg_784_pp0_iter1_reg <= tmp_29_i_i_reg_784;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_reg_758_pp0_iter2_reg <= exitcond_reg_758_pp0_iter1_reg;
                tmp_29_i_i_reg_784_pp0_iter2_reg <= tmp_29_i_i_reg_784_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                length_reg_717 <= length_fu_277_p3;
                    tmp_14_cast_i_i_reg_723(15 downto 0) <= tmp_14_cast_i_i_fu_283_p1(15 downto 0);
                tmp_15_i_i_reg_728 <= tmp_15_i_i_fu_286_p2;
                    tmp_16_cast_i_i_reg_733(7 downto 0) <= tmp_16_cast_i_i_fu_292_p1(7 downto 0);
                    tmp_17_cast_i_i_reg_738(7 downto 0) <= tmp_17_cast_i_i_fu_295_p1(7 downto 0);
                    tmp_18_i_i_reg_743(7 downto 0) <= tmp_18_i_i_fu_298_p1(7 downto 0);
                    tmp_19_i_i_reg_748(7 downto 0) <= tmp_19_i_i_fu_301_p1(7 downto 0);
                tmp_reg_753 <= tmp_fu_304_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_threshold_reg_702 <= p_threshold_fu_263_p1;
                range_min_read_reg_697 <= range_min_dout;
                shrink_x_max_read_reg_691 <= shrink_x_max_dout;
                shrink_x_min_read_reg_685 <= shrink_x_min_dout;
                tmp_7_reg_707 <= tmp_7_fu_267_p1;
                tmp_i_i_reg_712 <= tmp_i_i_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_758 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_22_i_i_reg_788 <= tmp_22_i_i_fu_334_p2;
            end if;
        end if;
    end process;
    tmp_14_cast_i_i_reg_723(16) <= '0';
    tmp_16_cast_i_i_reg_733(16 downto 8) <= "000000000";
    tmp_17_cast_i_i_reg_738(16 downto 8) <= "000000000";
    tmp_18_i_i_reg_743(15 downto 8) <= "00000000";
    tmp_19_i_i_reg_748(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, range_min_empty_n, ap_enable_reg_pp0_iter1, exitcond_fu_308_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_308_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_308_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_758)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_reg_758 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_758)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_758 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_758)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_758 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, range_min_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n, exitcond_reg_758)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((exitcond_reg_758 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_308_p2)
    begin
        if ((exitcond_fu_308_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4_assign_proc : process(ap_block_pp0_stage0, bound_max_r_1_i_i_reg_228, exitcond_reg_758_pp0_iter2_reg, bound_max_r_1_4_i_i_reg_808, ap_enable_reg_pp0_iter3)
    begin
        if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4 <= bound_max_r_1_4_i_i_reg_808;
        else 
            ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4 <= bound_max_r_1_i_i_reg_228;
        end if; 
    end process;


    ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4_assign_proc : process(ap_block_pp0_stage0, bound_min_r_1_i_i_reg_216, exitcond_reg_758_pp0_iter2_reg, bound_min_r_1_5_i_i_reg_801, ap_enable_reg_pp0_iter3)
    begin
        if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4 <= bound_min_r_1_5_i_i_reg_801;
        else 
            ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4 <= bound_min_r_1_i_i_reg_216;
        end if; 
    end process;


    ap_phi_mux_character_num_i_i_phi_fu_244_p4_assign_proc : process(ap_block_pp0_stage0, character_num_i_i_reg_240, exitcond_reg_758_pp0_iter2_reg, character_num_4_i_i_reg_815, ap_enable_reg_pp0_iter3)
    begin
        if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_character_num_i_i_phi_fu_244_p4 <= character_num_4_i_i_reg_815;
        else 
            ap_phi_mux_character_num_i_i_phi_fu_244_p4 <= character_num_i_i_reg_240;
        end if; 
    end process;


    ap_phi_mux_inBlock_i_i_phi_fu_208_p4_assign_proc : process(ap_block_pp0_stage0, inBlock_i_i_reg_204, exitcond_reg_758_pp0_iter2_reg, inBlock_3_i_i_reg_796, ap_enable_reg_pp0_iter3)
    begin
        if (((exitcond_reg_758_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_inBlock_i_i_phi_fu_208_p4 <= inBlock_3_i_i_reg_796;
        else 
            ap_phi_mux_inBlock_i_i_phi_fu_208_p4 <= inBlock_i_i_reg_204;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_max <= 
        ap_const_lv16_0 when (tmp_10_fu_658_p3(0) = '1') else 
        tmp_39_i_i_fu_666_p2;

    bound_max_ap_vld_assign_proc : process(tmp_29_i_i_reg_784_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_29_i_i_reg_784_pp0_iter2_reg = ap_const_lv1_1))) then 
            bound_max_ap_vld <= ap_const_logic_1;
        else 
            bound_max_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bound_max_r_1_4_i_i_fu_545_p3 <= 
        p_bound_max_r_1_i_i_fu_360_p3 when (sel_tmp1_fu_473_p2(0) = '1') else 
        sel_tmp12_fu_537_p3;
    bound_min <= 
        tmp_reg_753 when (tmp_i_i_40_fu_633_p2(0) = '1') else 
        tmp_32_i_i_fu_638_p2;

    bound_min_ap_vld_assign_proc : process(tmp_29_i_i_reg_784_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_29_i_i_reg_784_pp0_iter2_reg = ap_const_lv1_1))) then 
            bound_min_ap_vld <= ap_const_logic_1;
        else 
            bound_min_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bound_min_r_1_5_i_i_fu_514_p3 <= 
        p_bound_min_r_1_i_i_fu_353_p3 when (sel_tmp1_fu_473_p2(0) = '1') else 
        sel_tmp9_fu_506_p3;
    bound_min_r_1_fu_367_p3 <= 
        ap_const_lv16_0 when (tmp_21_i_i_reg_767_pp0_iter1_reg(0) = '1') else 
        bound_min_temp_i_i_fu_150;
    bound_min_temp_2_i_i_fu_576_p3 <= 
        bound_min_r_1_fu_367_p3 when (sel_tmp1_fu_473_p2(0) = '1') else 
        sel_tmp15_fu_568_p3;
    bound_min_temp_fu_325_p1 <= i_i_i_reg_252(16 - 1 downto 0);
    character_num_4_i_i_fu_608_p3 <= 
        p_character_num_i_i_fu_374_p3 when (sel_tmp1_fu_473_p2(0) = '1') else 
        sel_tmp18_fu_600_p3;
    character_num_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(p_character_num_i_i_fu_374_p3));
    exitcond_fu_308_p2 <= "1" when (i_i_i_reg_252 = length_reg_717) else "0";
    i_fu_313_p2 <= std_logic_vector(unsigned(i_i_i_reg_252) + unsigned(ap_const_lv31_1));
    inBlock_3_i_i_fu_484_p2 <= (sel_tmp8_fu_459_p3 and not_sel_tmp_fu_478_p2);
    inBlock_i_i_not_fu_443_p2 <= (ap_phi_mux_inBlock_i_i_phi_fu_208_p4 xor ap_const_lv1_1);
    length_fu_277_p3 <= 
        ap_const_lv31_1 when (tmp_i_i_reg_712(0) = '1') else 
        tmp_7_reg_707;
    not_i_i_fu_342_p2 <= (tmp_21_i_i_reg_767_pp0_iter1_reg xor ap_const_lv1_1);
    not_sel_tmp_fu_478_p2 <= (sel_tmp1_fu_473_p2 xor ap_const_lv1_1);
    or_cond_i_i_fu_381_p2 <= (tmp_22_i_i_reg_788 or p_inBlock_i_i_fu_347_p2);
    p_bound_max_r_1_i_i_fu_360_p3 <= 
        ap_const_lv16_0 when (tmp_21_i_i_reg_767_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4;
    p_bound_min_r_1_i_i_fu_353_p3 <= 
        ap_const_lv16_0 when (tmp_21_i_i_reg_767_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4;
    p_bound_min_temp_0_b_fu_410_p3 <= 
        bound_min_r_1_fu_367_p3 when (tmp_28_i_i_fu_404_p2(0) = '1') else 
        p_bound_min_r_1_i_i_fu_353_p3;
    p_character_num_i_i_fu_374_p3 <= 
        ap_const_lv16_0 when (tmp_21_i_i_reg_767_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_character_num_i_i_phi_fu_244_p4;
    p_inBlock_i_i_fu_347_p2 <= (not_i_i_fu_342_p2 and ap_phi_mux_inBlock_i_i_phi_fu_208_p4);
    p_threshold_fu_263_p1 <= threshold_width_dout(16 - 1 downto 0);

    range_min_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, range_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            range_min_blk_n <= range_min_empty_n;
        else 
            range_min_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    range_min_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, range_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            range_min_read <= ap_const_logic_1;
        else 
            range_min_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp10_fu_522_p3 <= 
        bound_min_temp_reg_777_pp0_iter1_reg when (or_cond_i_i_fu_381_p2(0) = '1') else 
        p_bound_max_r_1_i_i_fu_360_p3;
    sel_tmp11_fu_529_p3 <= 
        p_bound_max_r_1_i_i_fu_360_p3 when (sel_tmp3_fu_430_p2(0) = '1') else 
        sel_tmp10_fu_522_p3;
    sel_tmp12_fu_537_p3 <= 
        p_bound_max_r_1_i_i_fu_360_p3 when (sel_tmp7_fu_454_p2(0) = '1') else 
        sel_tmp11_fu_529_p3;
    sel_tmp13_fu_553_p3 <= 
        bound_min_r_1_fu_367_p3 when (or_cond_i_i_fu_381_p2(0) = '1') else 
        bound_min_temp_reg_777_pp0_iter1_reg;
    sel_tmp14_fu_560_p3 <= 
        bound_min_r_1_fu_367_p3 when (sel_tmp3_fu_430_p2(0) = '1') else 
        sel_tmp13_fu_553_p3;
    sel_tmp15_fu_568_p3 <= 
        bound_min_r_1_fu_367_p3 when (sel_tmp7_fu_454_p2(0) = '1') else 
        sel_tmp14_fu_560_p3;
    sel_tmp16_fu_584_p3 <= 
        character_num_fu_418_p2 when (or_cond_i_i_fu_381_p2(0) = '1') else 
        p_character_num_i_i_fu_374_p3;
    sel_tmp17_fu_592_p3 <= 
        p_character_num_i_i_fu_374_p3 when (sel_tmp3_fu_430_p2(0) = '1') else 
        sel_tmp16_fu_584_p3;
    sel_tmp18_fu_600_p3 <= 
        p_character_num_i_i_fu_374_p3 when (sel_tmp7_fu_454_p2(0) = '1') else 
        sel_tmp17_fu_592_p3;
    sel_tmp1_fu_473_p2 <= (tmp_22_i_i_reg_788 and tmp9_fu_467_p2);
    sel_tmp2_fu_490_p3 <= 
        p_bound_min_temp_0_b_fu_410_p3 when (or_cond_i_i_fu_381_p2(0) = '1') else 
        p_bound_min_r_1_i_i_fu_353_p3;
    sel_tmp3_fu_430_p2 <= (tmp_22_i_i_reg_788 xor or_cond_i_i_fu_381_p2);
    sel_tmp4_fu_435_p3 <= 
        p_inBlock_i_i_fu_347_p2 when (sel_tmp3_fu_430_p2(0) = '1') else 
        sel_tmp_fu_424_p2;
    sel_tmp5_fu_498_p3 <= 
        p_bound_min_r_1_i_i_fu_353_p3 when (sel_tmp3_fu_430_p2(0) = '1') else 
        sel_tmp2_fu_490_p3;
    sel_tmp6_fu_449_p2 <= (tmp_21_i_i_reg_767_pp0_iter1_reg or inBlock_i_i_not_fu_443_p2);
    sel_tmp7_fu_454_p2 <= (tmp_22_i_i_reg_788 and sel_tmp6_fu_449_p2);
    sel_tmp8_fu_459_p3 <= 
        p_inBlock_i_i_fu_347_p2 when (sel_tmp7_fu_454_p2(0) = '1') else 
        sel_tmp4_fu_435_p3;
    sel_tmp9_fu_506_p3 <= 
        p_bound_min_r_1_i_i_fu_353_p3 when (sel_tmp7_fu_454_p2(0) = '1') else 
        sel_tmp5_fu_498_p3;
    sel_tmp_fu_424_p2 <= (or_cond_i_i_fu_381_p2 xor ap_const_lv1_1);

    shrink_x_max_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shrink_x_max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_max_blk_n <= shrink_x_max_empty_n;
        else 
            shrink_x_max_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    shrink_x_max_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, range_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_max_read <= ap_const_logic_1;
        else 
            shrink_x_max_read <= ap_const_logic_0;
        end if; 
    end process;


    shrink_x_min_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shrink_x_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_min_blk_n <= shrink_x_min_empty_n;
        else 
            shrink_x_min_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    shrink_x_min_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, range_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shrink_x_min_read <= ap_const_logic_1;
        else 
            shrink_x_min_read <= ap_const_logic_0;
        end if; 
    end process;


    src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_blk_n <= src_cols_V_empty_n;
        else 
            src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, range_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_read <= ap_const_logic_1;
        else 
            src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_758)
    begin
        if (((exitcond_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_758, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_758 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    threshold_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, threshold_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_width_blk_n <= threshold_width_empty_n;
        else 
            threshold_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n, threshold_width_empty_n, shrink_x_min_empty_n, shrink_x_max_empty_n, range_min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (range_min_empty_n = ap_const_logic_0) or (shrink_x_max_empty_n = ap_const_logic_0) or (shrink_x_min_empty_n = ap_const_logic_0) or (threshold_width_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_width_read <= ap_const_logic_1;
        else 
            threshold_width_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp9_fu_467_p2 <= (tmp_27_i_i_fu_399_p2 and p_inBlock_i_i_fu_347_p2);
    tmp_10_fu_658_p3 <= tmp_37_i_i_fu_653_p2(16 downto 16);
    tmp_14_cast_i_i_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(range_min_read_reg_697),17));
    tmp_15_i_i_fu_286_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(length_fu_277_p3));
    tmp_16_cast_i_i_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_min_read_reg_685),17));
    tmp_17_cast_i_i_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_max_read_reg_691),17));
    tmp_18_i_i_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_max_read_reg_691),16));
    tmp_19_i_i_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shrink_x_min_read_reg_685),16));
    tmp_21_i_i_fu_319_p2 <= "1" when (i_i_i_reg_252 = ap_const_lv31_0) else "0";
    tmp_22_i_i_fu_334_p2 <= "1" when (unsigned(src_data_stream_V_dout) < unsigned(p_threshold_reg_702)) else "0";
    tmp_24_cast_i_i_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_min_temp_reg_777_pp0_iter1_reg),17));
    tmp_25_cast_i_i_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_min_r_1_fu_367_p3),17));
    tmp_26_i_i_fu_393_p2 <= std_logic_vector(unsigned(tmp_24_cast_i_i_fu_386_p1) - unsigned(tmp_25_cast_i_i_fu_389_p1));
    tmp_27_i_i_fu_399_p2 <= "1" when (signed(tmp_26_i_i_fu_393_p2) < signed(tmp_14_cast_i_i_reg_723)) else "0";
    tmp_28_i_i_fu_404_p2 <= "1" when (p_character_num_i_i_fu_374_p3 = ap_const_lv16_0) else "0";
    tmp_29_i_i_fu_329_p2 <= "1" when (i_i_i_reg_252 = tmp_15_i_i_reg_728) else "0";
    tmp_30_cast_i_i_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_min_r_1_5_i_i_reg_801),17));
    tmp_31_cast_i_i_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_i_i_fu_624_p2),31));
    tmp_31_i_i_fu_624_p2 <= std_logic_vector(unsigned(tmp_30_cast_i_i_fu_621_p1) + unsigned(tmp_16_cast_i_i_reg_733));
    tmp_32_i_i_fu_638_p2 <= std_logic_vector(unsigned(bound_min_r_1_5_i_i_reg_801) + unsigned(tmp_19_i_i_reg_748));
    tmp_36_cast_i_i_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_max_r_1_4_i_i_reg_808),17));
    tmp_37_i_i_fu_653_p2 <= std_logic_vector(unsigned(tmp_36_cast_i_i_fu_650_p1) - unsigned(tmp_17_cast_i_i_reg_738));
    tmp_39_i_i_fu_666_p2 <= std_logic_vector(unsigned(bound_max_r_1_4_i_i_reg_808) - unsigned(tmp_18_i_i_reg_743));
    tmp_7_fu_267_p1 <= src_cols_V_dout(31 - 1 downto 0);
    tmp_fu_304_p1 <= length_fu_277_p3(16 - 1 downto 0);
    tmp_i_i_40_fu_633_p2 <= "1" when (unsigned(tmp_31_cast_i_i_cast_fu_629_p1) > unsigned(length_reg_717)) else "0";
    tmp_i_i_fu_271_p2 <= "1" when (signed(src_cols_V_dout) < signed(ap_const_lv32_1)) else "0";
end behav;
