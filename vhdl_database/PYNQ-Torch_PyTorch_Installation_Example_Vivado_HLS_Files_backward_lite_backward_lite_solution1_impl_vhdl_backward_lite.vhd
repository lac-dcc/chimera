-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backward_lite is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TLAST : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of backward_lite is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "backward_lite,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.564083,HLS_SYN_LAT=596,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=15,HLS_SYN_FF=9857,HLS_SYN_LUT=12378,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_8E : STD_LOGIC_VECTOR (7 downto 0) := "10001110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_stream_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_0_vld_in : STD_LOGIC;
    signal in_stream_data_0_vld_out : STD_LOGIC;
    signal in_stream_data_0_ack_in : STD_LOGIC;
    signal in_stream_data_0_ack_out : STD_LOGIC;
    signal in_stream_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_data_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_data_0_sel : STD_LOGIC;
    signal in_stream_data_0_load_A : STD_LOGIC;
    signal in_stream_data_0_load_B : STD_LOGIC;
    signal in_stream_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_data_0_state_cmp_full : STD_LOGIC;
    signal in_stream_last_0_vld_in : STD_LOGIC;
    signal in_stream_last_0_ack_out : STD_LOGIC;
    signal in_stream_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_ap_vld : STD_LOGIC;
    signal w1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_ap_vld : STD_LOGIC;
    signal w2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w2_ap_vld : STD_LOGIC;
    signal w3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_ap_vld : STD_LOGIC;
    signal w4 : STD_LOGIC_VECTOR (31 downto 0);
    signal w4_ap_vld : STD_LOGIC;
    signal w5 : STD_LOGIC_VECTOR (31 downto 0);
    signal w5_ap_vld : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_2413 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond2_reg_2478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond3_reg_2548 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_364 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_364_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_364_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_376 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal batch_x_mat_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal batch_x_mat_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_2413_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_2413_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_543_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_reg_2417 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal isneg_reg_2422 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_reg_2422_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_2428 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_575_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_23_reg_2433 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_2_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_2438 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_2438_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_605_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_2444 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_636_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2449 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_2455 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_2460 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_2466 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_2472 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond2_reg_2478_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2478_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_823_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_2482 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_2482_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_2482_pp1_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_fu_829_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal isneg_1_reg_2492 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_reg_2492_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_1_reg_2498 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_861_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_49_reg_2503 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_16_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_2508 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_2508_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_5_fu_891_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_5_reg_2514 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_1_fu_922_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_2519 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_2525 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_2530 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp12_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_reg_2536 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_reg_2542 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond3_reg_2548_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_2548_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1108_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_2552 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_2552_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_2552_pp2_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_9_fu_1114_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal isneg_2_reg_2562 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_reg_2562_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_2_reg_2568 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_88_fu_1146_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_88_reg_2573 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_32_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_2578 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_2578_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_8_fu_1176_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_8_reg_2584 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_2_fu_1207_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_reg_2589 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_2595 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_1221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_reg_2600 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp21_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_reg_2606 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp26_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp26_reg_2612 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state17_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state20_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state23_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state26_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter14 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter16 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter17 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter18 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter19 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter20 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter21 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter22 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter23 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter24 : BOOLEAN;
    signal ap_block_state42_pp3_stage0_iter25 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter26 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter27 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter28 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter29 : BOOLEAN;
    signal ap_block_state47_pp3_stage0_iter30 : BOOLEAN;
    signal ap_block_state48_pp3_stage0_iter31 : BOOLEAN;
    signal ap_block_state49_pp3_stage0_iter32 : BOOLEAN;
    signal ap_block_state50_pp3_stage0_iter33 : BOOLEAN;
    signal ap_block_state51_pp3_stage0_iter34 : BOOLEAN;
    signal ap_block_state52_pp3_stage0_iter35 : BOOLEAN;
    signal ap_block_state53_pp3_stage0_iter36 : BOOLEAN;
    signal ap_block_state54_pp3_stage0_iter37 : BOOLEAN;
    signal ap_block_state55_pp3_stage0_iter38 : BOOLEAN;
    signal ap_block_state56_pp3_stage0_iter39 : BOOLEAN;
    signal ap_block_state57_pp3_stage0_iter40 : BOOLEAN;
    signal ap_block_state58_pp3_stage0_iter41 : BOOLEAN;
    signal ap_block_state59_pp3_stage0_iter42 : BOOLEAN;
    signal ap_block_state60_pp3_stage0_iter43 : BOOLEAN;
    signal ap_block_state61_pp3_stage0_iter44 : BOOLEAN;
    signal ap_block_state62_pp3_stage0_iter45 : BOOLEAN;
    signal ap_block_state63_pp3_stage0_iter46 : BOOLEAN;
    signal ap_block_state64_pp3_stage0_iter47 : BOOLEAN;
    signal ap_block_state65_pp3_stage0_iter48 : BOOLEAN;
    signal ap_block_state66_pp3_stage0_iter49 : BOOLEAN;
    signal ap_block_state67_pp3_stage0_iter50 : BOOLEAN;
    signal ap_block_state68_pp3_stage0_iter51 : BOOLEAN;
    signal ap_block_state69_pp3_stage0_iter52 : BOOLEAN;
    signal ap_block_state70_pp3_stage0_iter53 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_10_fu_1393_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_46_fu_1399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter42_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter43_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter44_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter46_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter47_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter48_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter49_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter50_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter51_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_2627_pp3_iter52_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal abs_dif_V_3_fu_1405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_dif_V_3_reg_2643 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_reg_2651 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2661_pp3_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_1494_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_8_reg_2673 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal exitcond5_fu_1488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_2683 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_temp_V_fu_1511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_57_fu_1517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_2693 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal is_neg_fu_1523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_2698 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_1_fu_1556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_1_reg_2703 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_fu_1562_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_114_reg_2708 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp32_V_24_fu_1566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_24_reg_2713 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal tmp_59_fu_1580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_2718 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_1636_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_11_reg_2726 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal exitcond_fu_1630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_1648_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_82_reg_2741 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_fu_1659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_reg_2751 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_1665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_reg_2756 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_1671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_reg_2761 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_1677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_reg_2766 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_fu_1683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_reg_2771 : STD_LOGIC_VECTOR (31 downto 0);
    signal smooth_grad_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smooth_grad_V_load_reg_2776 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_cast_fu_1710_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal OP1_V_cast_reg_2791 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_11_reg_2798 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_13_reg_2803 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_temp_V_fu_1766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_temp_V_reg_2813 : STD_LOGIC_VECTOR (31 downto 0);
    signal w2_temp_V_fu_1771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w2_temp_V_reg_2818 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_reg_2823 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_reg_2828 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_temp_V_fu_1814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_temp_V_reg_2833 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal w4_temp_V_fu_1819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w4_temp_V_reg_2838 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_19_reg_2843 : STD_LOGIC_VECTOR (31 downto 0);
    signal w5_temp_V_fu_1843_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp_65_fu_1848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_reg_2853 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal is_neg_1_fu_1854_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_1_reg_2858 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_3_fu_1887_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_3_reg_2863 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_fu_1893_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_reg_2868 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_1897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_reg_2873 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_2_fu_1903_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_2_reg_2878 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_7_fu_1936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_7_reg_2883 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_fu_1942_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_118_reg_2888 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_fu_1946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_reg_2893 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_3_fu_1952_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_3_reg_2898 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_14_fu_1985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_14_reg_2903 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_fu_1991_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_120_reg_2908 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_1995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_reg_2913 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_4_fu_2001_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_4_reg_2918 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_18_fu_2034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_18_reg_2923 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_2040_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_reg_2928 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_2044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_reg_2933 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_5_fu_2050_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_5_reg_2938 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_23_fu_2083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_23_reg_2943 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_fu_2089_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_124_reg_2948 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp32_V_25_fu_2093_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_25_reg_2953 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal tmp_67_fu_2107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_reg_2958 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_26_fu_2113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_26_reg_2963 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_2127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_reg_2968 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_27_fu_2133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_27_reg_2973 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_2147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_reg_2978 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_28_fu_2153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_28_reg_2983 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_2167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_2988 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_29_fu_2173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_29_reg_2993 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_fu_2187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_reg_2998 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter53 : STD_LOGIC := '0';
    signal smooth_grad_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal smooth_grad_V_ce0 : STD_LOGIC;
    signal smooth_grad_V_we0 : STD_LOGIC;
    signal smooth_grad_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal smooth_grad_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal smooth_grad_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal smooth_grad_V_ce1 : STD_LOGIC;
    signal smooth_grad_V_we1 : STD_LOGIC;
    signal smooth_grad_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_x_mat_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal batch_x_mat_V_ce0 : STD_LOGIC;
    signal batch_x_mat_V_we0 : STD_LOGIC;
    signal batch_x_mat_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_x_mat_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal batch_x_mat_V_ce1 : STD_LOGIC;
    signal nn_out_mat_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal nn_out_mat_V_ce0 : STD_LOGIC;
    signal nn_out_mat_V_we0 : STD_LOGIC;
    signal nn_out_mat_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal nn_out_mat_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_y_mat_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal batch_y_mat_V_ce0 : STD_LOGIC;
    signal batch_y_mat_V_we0 : STD_LOGIC;
    signal batch_y_mat_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_y_mat_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_phi_fu_368_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_6_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal i_4_reg_421 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_32_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal p_Val2_8_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_492 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_61_fu_1500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_fu_1642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_1654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_1697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_1705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_fu_1761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_553_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_8_fu_588_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_s_fu_595_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_599_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_s_fu_585_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_612_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_624_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_630_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_fu_654_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp6_demorgan_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_cast_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_718_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_17_fu_722_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp1_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_731_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_769_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond1_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_794_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ireg_V_1_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_839_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_fu_874_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_2_fu_881_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_fu_885_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_13_fu_871_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_898_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_910_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_916_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_fu_940_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp31_demorgan_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp46_demorgan_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp7_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_cast_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_1003_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_34_fu_1007_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp5_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_1023_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp15_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge2_fu_1016_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp10_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel5_fu_1066_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond4_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel6_fu_1079_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ireg_V_2_fu_1120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_1124_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_30_fu_1159_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_3_fu_1166_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_7_fu_1170_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_29_fu_1156_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_1183_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1195_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_fu_1201_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_104_fu_1225_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp56_demorgan_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp71_demorgan_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp25_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_cast_fu_1280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_1288_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_44_fu_1292_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp18_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_fu_1323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_fu_1297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp24_fu_1334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp23_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge4_fu_1301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp19_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel8_fu_1339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel9_fu_1351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond7_fu_1358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel10_fu_1364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_dif_V_fu_1419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_dif_V_1_fu_1424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_fu_1434_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1457_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_50_fu_1463_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1457_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_36_fu_1531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_fu_1538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_fu_1548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_1570_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_1586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_1591_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_trunc_fu_1594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_1600_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_8_fu_1607_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_1618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_1689_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_88_cast_fu_1702_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_7_fu_1717_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_1717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_1717_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_12_fu_1737_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_1737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_1737_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_106_fu_1753_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_14_fu_1780_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_1780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_1780_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_16_fu_1799_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_16_fu_1799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_16_fu_1799_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_18_fu_1828_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_fu_1828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_fu_1828_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_37_fu_1862_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_fu_1869_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_1_fu_1879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_38_fu_1911_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_fu_1918_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_2_fu_1928_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_39_fu_1960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_fu_1967_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_3_fu_1977_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_2009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_fu_2016_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_4_fu_2026_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_40_fu_2058_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_fu_2065_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_5_fu_2075_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_2097_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_2117_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_fu_2137_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_27_fu_2157_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_2177_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_2193_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_2198_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_4_trunc_fu_2201_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_2207_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_11_fu_2214_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_2_fu_2225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_2237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_2242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_7_trunc_fu_2245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_fu_2251_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_13_fu_2258_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_4_fu_2269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_2281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_2286_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_10_trunc_fu_2289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_fu_2295_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_15_fu_2302_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_6_fu_2313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_2325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_2330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_13_trunc_fu_2333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_2339_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_17_fu_2346_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_8_fu_2357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_2369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_2374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_16_trunc_fu_2377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_fu_2383_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_19_fu_2390_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_11_fu_2401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component backward_lite_uitfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_lite_fpeg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backward_lite_sdihbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component backward_lite_smobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_lite_batcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_lite_nn_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_lite_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        bias : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_ap_vld : IN STD_LOGIC;
        w1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w1_ap_vld : IN STD_LOGIC;
        w2 : IN STD_LOGIC_VECTOR (31 downto 0);
        w2_ap_vld : IN STD_LOGIC;
        w3 : IN STD_LOGIC_VECTOR (31 downto 0);
        w3_ap_vld : IN STD_LOGIC;
        w4 : IN STD_LOGIC_VECTOR (31 downto 0);
        w4_ap_vld : IN STD_LOGIC;
        w5 : IN STD_LOGIC_VECTOR (31 downto 0);
        w5_ap_vld : IN STD_LOGIC );
    end component;



begin
    backward_lite_AXILiteS_s_axi_U : component backward_lite_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        bias => bias,
        bias_ap_vld => bias_ap_vld,
        w1 => w1,
        w1_ap_vld => w1_ap_vld,
        w2 => w2,
        w2_ap_vld => w2_ap_vld,
        w3 => w3,
        w3_ap_vld => w3_ap_vld,
        w4 => w4,
        w4_ap_vld => w4_ap_vld,
        w5 => w5,
        w5_ap_vld => w5_ap_vld);

    smooth_grad_V_U : component backward_lite_smobkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => smooth_grad_V_address0,
        ce0 => smooth_grad_V_ce0,
        we0 => smooth_grad_V_we0,
        d0 => smooth_grad_V_d0,
        q0 => smooth_grad_V_q0,
        address1 => smooth_grad_V_address1,
        ce1 => smooth_grad_V_ce1,
        we1 => smooth_grad_V_we1,
        d1 => smooth_grad_V_d1,
        q1 => smooth_grad_V_q1);

    batch_x_mat_V_U : component backward_lite_batcud
    generic map (
        DataWidth => 32,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => batch_x_mat_V_address0,
        ce0 => batch_x_mat_V_ce0,
        we0 => batch_x_mat_V_we0,
        d0 => batch_x_mat_V_d0,
        q0 => batch_x_mat_V_q0,
        address1 => batch_x_mat_V_address1,
        ce1 => batch_x_mat_V_ce1,
        q1 => batch_x_mat_V_q1);

    nn_out_mat_V_U : component backward_lite_nn_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => nn_out_mat_V_address0,
        ce0 => nn_out_mat_V_ce0,
        we0 => nn_out_mat_V_we0,
        d0 => nn_out_mat_V_d0,
        q0 => nn_out_mat_V_q0);

    batch_y_mat_V_U : component backward_lite_nn_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => batch_y_mat_V_address0,
        ce0 => batch_y_mat_V_ce0,
        we0 => batch_y_mat_V_we0,
        d0 => batch_y_mat_V_d0,
        q0 => batch_y_mat_V_q0);

    backward_lite_uitfYi_U1 : component backward_lite_uitfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_504_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_504_p1);

    backward_lite_uitfYi_U2 : component backward_lite_uitfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp32_V_7_reg_2883,
        ce => ap_const_logic_1,
        dout => grp_fu_507_p1);

    backward_lite_uitfYi_U3 : component backward_lite_uitfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp32_V_14_reg_2903,
        ce => ap_const_logic_1,
        dout => grp_fu_510_p1);

    backward_lite_uitfYi_U4 : component backward_lite_uitfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp32_V_18_reg_2923,
        ce => ap_const_logic_1,
        dout => grp_fu_513_p1);

    backward_lite_uitfYi_U5 : component backward_lite_uitfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp32_V_23_reg_2943,
        ce => ap_const_logic_1,
        dout => grp_fu_516_p1);

    backward_lite_fpeg8j_U6 : component backward_lite_fpeg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => in_stream_data_0_data_out,
        dout => grp_fu_519_p1);

    backward_lite_sdihbi_U7 : component backward_lite_sdihbi
    generic map (
        ID => 1,
        NUM_STAGE => 52,
        din0_WIDTH => 48,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1457_p0,
        din1 => abs_dif_V_1_fu_1424_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1457_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state17) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state17)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state17);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter17 <= ap_enable_reg_pp3_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter18 <= ap_enable_reg_pp3_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter19 <= ap_enable_reg_pp3_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter20 <= ap_enable_reg_pp3_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter21 <= ap_enable_reg_pp3_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter22 <= ap_enable_reg_pp3_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter23 <= ap_enable_reg_pp3_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter24 <= ap_enable_reg_pp3_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter25 <= ap_enable_reg_pp3_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter26 <= ap_enable_reg_pp3_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter27 <= ap_enable_reg_pp3_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter28 <= ap_enable_reg_pp3_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter29 <= ap_enable_reg_pp3_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter30 <= ap_enable_reg_pp3_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter31 <= ap_enable_reg_pp3_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter32 <= ap_enable_reg_pp3_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter33 <= ap_enable_reg_pp3_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter34 <= ap_enable_reg_pp3_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter35 <= ap_enable_reg_pp3_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter36 <= ap_enable_reg_pp3_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter37 <= ap_enable_reg_pp3_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter38 <= ap_enable_reg_pp3_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter39 <= ap_enable_reg_pp3_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter40 <= ap_enable_reg_pp3_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter41 <= ap_enable_reg_pp3_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter42 <= ap_enable_reg_pp3_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter43 <= ap_enable_reg_pp3_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter44 <= ap_enable_reg_pp3_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter45 <= ap_enable_reg_pp3_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter46 <= ap_enable_reg_pp3_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter47 <= ap_enable_reg_pp3_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter48 <= ap_enable_reg_pp3_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter49 <= ap_enable_reg_pp3_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter50 <= ap_enable_reg_pp3_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter51 <= ap_enable_reg_pp3_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter52 <= ap_enable_reg_pp3_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter53 <= ap_enable_reg_pp3_iter52;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp3_iter53 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_data_0_ack_out = ap_const_logic_1) and (in_stream_data_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_data_0_sel_rd <= not(in_stream_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_data_0_ack_in = ap_const_logic_1) and (in_stream_data_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_data_0_sel_wr <= not(in_stream_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_data_0_state = ap_const_lv2_2) and (in_stream_data_0_vld_in = ap_const_logic_0)) or ((in_stream_data_0_state = ap_const_lv2_3) and (in_stream_data_0_vld_in = ap_const_logic_0) and (in_stream_data_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_data_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_data_0_state = ap_const_lv2_1) and (in_stream_data_0_ack_out = ap_const_logic_0)) or ((in_stream_data_0_state = ap_const_lv2_3) and (in_stream_data_0_ack_out = ap_const_logic_0) and (in_stream_data_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_data_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_data_0_vld_in = ap_const_logic_0) and (in_stream_data_0_ack_out = ap_const_logic_1))) and not(((in_stream_data_0_ack_out = ap_const_logic_0) and (in_stream_data_0_vld_in = ap_const_logic_1))) and (in_stream_data_0_state = ap_const_lv2_3)) or ((in_stream_data_0_state = ap_const_lv2_1) and (in_stream_data_0_ack_out = ap_const_logic_1)) or ((in_stream_data_0_state = ap_const_lv2_2) and (in_stream_data_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_data_0_state <= ap_const_lv2_3;
                else 
                    in_stream_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_last_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_last_0_state = ap_const_lv2_2) and (in_stream_last_0_vld_in = ap_const_logic_0)) or ((in_stream_last_0_state = ap_const_lv2_3) and (in_stream_last_0_vld_in = ap_const_logic_0) and (in_stream_last_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_last_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_last_0_state = ap_const_lv2_1) and (in_stream_last_0_ack_out = ap_const_logic_0)) or ((in_stream_last_0_state = ap_const_lv2_3) and (in_stream_last_0_ack_out = ap_const_logic_0) and (in_stream_last_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_last_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_last_0_vld_in = ap_const_logic_0) and (in_stream_last_0_ack_out = ap_const_logic_1))) and not(((in_stream_last_0_ack_out = ap_const_logic_0) and (in_stream_last_0_vld_in = ap_const_logic_1))) and (in_stream_last_0_state = ap_const_lv2_3)) or ((in_stream_last_0_state = ap_const_lv2_1) and (in_stream_last_0_ack_out = ap_const_logic_1)) or ((in_stream_last_0_state = ap_const_lv2_2) and (in_stream_last_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_last_0_state <= ap_const_lv2_3;
                else 
                    in_stream_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_376 <= ap_const_lv7_20;
            elsif (((exitcond2_fu_817_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_376 <= i_7_fu_829_p2;
            end if; 
        end if;
    end process;

    i_2_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_387 <= ap_const_lv8_40;
            elsif (((exitcond3_fu_1102_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_387 <= i_9_fu_1114_p2;
            end if; 
        end if;
    end process;

    i_3_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_3_reg_398 <= ap_const_lv6_0;
            elsif (((exitcond4_fu_1387_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_3_reg_398 <= i_10_fu_1393_p2;
            end if; 
        end if;
    end process;

    i_4_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                i_4_reg_421 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                i_4_reg_421 <= i_8_reg_2673;
            end if; 
        end if;
    end process;

    i_5_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                i_5_reg_492 <= i_11_reg_2726;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                i_5_reg_492 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2413 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_364 <= i_6_reg_2417;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_364 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_32_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                p_Val2_32_reg_432 <= w5_temp_V_fu_1843_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                p_Val2_32_reg_432 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                p_Val2_3_reg_468 <= w2_temp_V_reg_2818;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                p_Val2_3_reg_468 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                p_Val2_4_reg_480 <= w1_temp_V_reg_2813;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                p_Val2_4_reg_480 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_6_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                p_Val2_6_reg_409 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                p_Val2_6_reg_409 <= bias_temp_V_fu_1511_p2;
            end if; 
        end if;
    end process;

    p_Val2_8_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                p_Val2_8_reg_444 <= w4_temp_V_reg_2838;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                p_Val2_8_reg_444 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_9_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                p_Val2_9_reg_456 <= w3_temp_V_reg_2833;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                p_Val2_9_reg_456 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_527_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                reg_527 <= batch_x_mat_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                reg_527 <= batch_x_mat_V_q0;
            end if; 
        end if;
    end process;

    reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                reg_532 <= batch_x_mat_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                reg_532 <= batch_x_mat_V_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                OP1_V_cast_reg_2791 <= OP1_V_cast_fu_1710_p1;
                p_Val2_11_reg_2798 <= p_Val2_7_fu_1717_p2(47 downto 16);
                p_Val2_13_reg_2803 <= p_Val2_12_fu_1737_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                abs_dif_V_3_reg_2643 <= abs_dif_V_3_fu_1405_p2;
                tmp_111_reg_2651 <= abs_dif_V_3_fu_1405_p2(31 downto 31);
                    tmp_46_reg_2627_pp3_iter1_reg(5 downto 0) <= tmp_46_reg_2627(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_2413 <= exitcond1_fu_537_p2;
                exitcond1_reg_2413_pp0_iter1_reg <= exitcond1_reg_2413;
                i_reg_364_pp0_iter1_reg <= i_reg_364;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond1_reg_2413_pp0_iter2_reg <= exitcond1_reg_2413_pp0_iter1_reg;
                i_reg_364_pp0_iter2_reg <= i_reg_364_pp0_iter1_reg;
                isneg_reg_2422_pp0_iter2_reg <= isneg_reg_2422;
                tmp_2_reg_2438_pp0_iter2_reg <= tmp_2_reg_2438;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond2_reg_2478 <= exitcond2_fu_817_p2;
                exitcond2_reg_2478_pp1_iter1_reg <= exitcond2_reg_2478;
                tmp_10_reg_2482_pp1_iter1_reg <= tmp_10_reg_2482;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                exitcond2_reg_2478_pp1_iter2_reg <= exitcond2_reg_2478_pp1_iter1_reg;
                isneg_1_reg_2492_pp1_iter2_reg <= isneg_1_reg_2492;
                tmp_10_reg_2482_pp1_iter2_reg <= tmp_10_reg_2482_pp1_iter1_reg;
                tmp_16_reg_2508_pp1_iter2_reg <= tmp_16_reg_2508;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond3_reg_2548 <= exitcond3_fu_1102_p2;
                exitcond3_reg_2548_pp2_iter1_reg <= exitcond3_reg_2548;
                tmp_26_reg_2552_pp2_iter1_reg <= tmp_26_reg_2552;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond3_reg_2548_pp2_iter2_reg <= exitcond3_reg_2548_pp2_iter1_reg;
                isneg_2_reg_2562_pp2_iter2_reg <= isneg_2_reg_2562;
                tmp_26_reg_2552_pp2_iter2_reg <= tmp_26_reg_2552_pp2_iter1_reg;
                tmp_32_reg_2578_pp2_iter2_reg <= tmp_32_reg_2578;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_2478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exp_tmp_V_1_reg_2498 <= ireg_V_1_fu_835_p1(62 downto 52);
                isneg_1_reg_2492 <= ireg_V_1_fu_835_p1(63 downto 63);
                tmp_16_reg_2508 <= tmp_16_fu_865_p2;
                tmp_49_reg_2503 <= tmp_49_fu_861_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_2548 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exp_tmp_V_2_reg_2568 <= ireg_V_2_fu_1120_p1(62 downto 52);
                isneg_2_reg_2562 <= ireg_V_2_fu_1120_p1(63 downto 63);
                tmp_32_reg_2578 <= tmp_32_fu_1150_p2;
                tmp_88_reg_2573 <= tmp_88_fu_1146_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2413 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_tmp_V_reg_2428 <= ireg_V_fu_549_p1(62 downto 52);
                isneg_reg_2422 <= ireg_V_fu_549_p1(63 downto 63);
                tmp_23_reg_2433 <= tmp_23_fu_575_p1;
                tmp_2_reg_2438 <= tmp_2_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                i_11_reg_2726 <= i_11_fu_1636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_6_reg_2417 <= i_6_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                i_8_reg_2673 <= i_8_fu_1494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp2_reg_2661 <= icmp2_fu_1444_p2;
                icmp2_reg_2661_pp3_iter10_reg <= icmp2_reg_2661_pp3_iter9_reg;
                icmp2_reg_2661_pp3_iter11_reg <= icmp2_reg_2661_pp3_iter10_reg;
                icmp2_reg_2661_pp3_iter12_reg <= icmp2_reg_2661_pp3_iter11_reg;
                icmp2_reg_2661_pp3_iter13_reg <= icmp2_reg_2661_pp3_iter12_reg;
                icmp2_reg_2661_pp3_iter14_reg <= icmp2_reg_2661_pp3_iter13_reg;
                icmp2_reg_2661_pp3_iter15_reg <= icmp2_reg_2661_pp3_iter14_reg;
                icmp2_reg_2661_pp3_iter16_reg <= icmp2_reg_2661_pp3_iter15_reg;
                icmp2_reg_2661_pp3_iter17_reg <= icmp2_reg_2661_pp3_iter16_reg;
                icmp2_reg_2661_pp3_iter18_reg <= icmp2_reg_2661_pp3_iter17_reg;
                icmp2_reg_2661_pp3_iter19_reg <= icmp2_reg_2661_pp3_iter18_reg;
                icmp2_reg_2661_pp3_iter20_reg <= icmp2_reg_2661_pp3_iter19_reg;
                icmp2_reg_2661_pp3_iter21_reg <= icmp2_reg_2661_pp3_iter20_reg;
                icmp2_reg_2661_pp3_iter22_reg <= icmp2_reg_2661_pp3_iter21_reg;
                icmp2_reg_2661_pp3_iter23_reg <= icmp2_reg_2661_pp3_iter22_reg;
                icmp2_reg_2661_pp3_iter24_reg <= icmp2_reg_2661_pp3_iter23_reg;
                icmp2_reg_2661_pp3_iter25_reg <= icmp2_reg_2661_pp3_iter24_reg;
                icmp2_reg_2661_pp3_iter26_reg <= icmp2_reg_2661_pp3_iter25_reg;
                icmp2_reg_2661_pp3_iter27_reg <= icmp2_reg_2661_pp3_iter26_reg;
                icmp2_reg_2661_pp3_iter28_reg <= icmp2_reg_2661_pp3_iter27_reg;
                icmp2_reg_2661_pp3_iter29_reg <= icmp2_reg_2661_pp3_iter28_reg;
                icmp2_reg_2661_pp3_iter30_reg <= icmp2_reg_2661_pp3_iter29_reg;
                icmp2_reg_2661_pp3_iter31_reg <= icmp2_reg_2661_pp3_iter30_reg;
                icmp2_reg_2661_pp3_iter32_reg <= icmp2_reg_2661_pp3_iter31_reg;
                icmp2_reg_2661_pp3_iter33_reg <= icmp2_reg_2661_pp3_iter32_reg;
                icmp2_reg_2661_pp3_iter34_reg <= icmp2_reg_2661_pp3_iter33_reg;
                icmp2_reg_2661_pp3_iter35_reg <= icmp2_reg_2661_pp3_iter34_reg;
                icmp2_reg_2661_pp3_iter36_reg <= icmp2_reg_2661_pp3_iter35_reg;
                icmp2_reg_2661_pp3_iter37_reg <= icmp2_reg_2661_pp3_iter36_reg;
                icmp2_reg_2661_pp3_iter38_reg <= icmp2_reg_2661_pp3_iter37_reg;
                icmp2_reg_2661_pp3_iter39_reg <= icmp2_reg_2661_pp3_iter38_reg;
                icmp2_reg_2661_pp3_iter3_reg <= icmp2_reg_2661;
                icmp2_reg_2661_pp3_iter40_reg <= icmp2_reg_2661_pp3_iter39_reg;
                icmp2_reg_2661_pp3_iter41_reg <= icmp2_reg_2661_pp3_iter40_reg;
                icmp2_reg_2661_pp3_iter42_reg <= icmp2_reg_2661_pp3_iter41_reg;
                icmp2_reg_2661_pp3_iter43_reg <= icmp2_reg_2661_pp3_iter42_reg;
                icmp2_reg_2661_pp3_iter44_reg <= icmp2_reg_2661_pp3_iter43_reg;
                icmp2_reg_2661_pp3_iter45_reg <= icmp2_reg_2661_pp3_iter44_reg;
                icmp2_reg_2661_pp3_iter46_reg <= icmp2_reg_2661_pp3_iter45_reg;
                icmp2_reg_2661_pp3_iter47_reg <= icmp2_reg_2661_pp3_iter46_reg;
                icmp2_reg_2661_pp3_iter48_reg <= icmp2_reg_2661_pp3_iter47_reg;
                icmp2_reg_2661_pp3_iter49_reg <= icmp2_reg_2661_pp3_iter48_reg;
                icmp2_reg_2661_pp3_iter4_reg <= icmp2_reg_2661_pp3_iter3_reg;
                icmp2_reg_2661_pp3_iter50_reg <= icmp2_reg_2661_pp3_iter49_reg;
                icmp2_reg_2661_pp3_iter51_reg <= icmp2_reg_2661_pp3_iter50_reg;
                icmp2_reg_2661_pp3_iter52_reg <= icmp2_reg_2661_pp3_iter51_reg;
                icmp2_reg_2661_pp3_iter5_reg <= icmp2_reg_2661_pp3_iter4_reg;
                icmp2_reg_2661_pp3_iter6_reg <= icmp2_reg_2661_pp3_iter5_reg;
                icmp2_reg_2661_pp3_iter7_reg <= icmp2_reg_2661_pp3_iter6_reg;
                icmp2_reg_2661_pp3_iter8_reg <= icmp2_reg_2661_pp3_iter7_reg;
                icmp2_reg_2661_pp3_iter9_reg <= icmp2_reg_2661_pp3_iter8_reg;
                    tmp_46_reg_2627_pp3_iter10_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter9_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter11_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter10_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter12_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter11_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter13_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter12_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter14_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter13_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter15_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter14_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter16_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter15_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter17_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter16_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter18_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter17_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter19_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter18_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter20_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter19_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter21_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter20_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter22_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter21_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter23_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter22_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter24_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter23_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter25_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter24_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter26_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter25_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter27_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter26_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter28_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter27_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter29_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter28_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter2_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter1_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter30_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter29_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter31_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter30_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter32_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter31_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter33_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter32_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter34_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter33_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter35_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter34_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter36_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter35_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter37_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter36_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter38_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter37_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter39_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter38_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter3_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter2_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter40_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter39_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter41_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter40_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter42_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter41_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter43_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter42_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter44_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter43_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter45_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter44_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter46_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter45_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter47_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter46_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter48_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter47_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter49_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter48_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter4_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter3_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter50_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter49_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter51_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter50_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter52_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter51_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter5_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter4_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter6_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter5_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter7_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter6_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter8_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter7_reg(5 downto 0);
                    tmp_46_reg_2627_pp3_iter9_reg(5 downto 0) <= tmp_46_reg_2627_pp3_iter8_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_0_load_A = ap_const_logic_1)) then
                in_stream_data_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_0_load_B = ap_const_logic_1)) then
                in_stream_data_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                is_neg_1_reg_2858 <= p_Val2_4_reg_480(31 downto 31);
                is_neg_2_reg_2878 <= p_Val2_3_reg_468(31 downto 31);
                is_neg_3_reg_2898 <= p_Val2_9_reg_456(31 downto 31);
                is_neg_4_reg_2918 <= p_Val2_8_reg_444(31 downto 31);
                is_neg_5_reg_2938 <= p_Val2_32_reg_432(31 downto 31);
                tmp32_V_14_reg_2903 <= tmp32_V_14_fu_1985_p2;
                tmp32_V_18_reg_2923 <= tmp32_V_18_fu_2034_p2;
                tmp32_V_23_reg_2943 <= tmp32_V_23_fu_2083_p2;
                tmp32_V_3_reg_2863 <= tmp32_V_3_fu_1887_p2;
                tmp32_V_7_reg_2883 <= tmp32_V_7_fu_1936_p2;
                tmp_116_reg_2868 <= tmp_116_fu_1893_p1;
                tmp_118_reg_2888 <= tmp_118_fu_1942_p1;
                tmp_120_reg_2908 <= tmp_120_fu_1991_p1;
                tmp_122_reg_2928 <= tmp_122_fu_2040_p1;
                tmp_124_reg_2948 <= tmp_124_fu_2089_p1;
                tmp_65_reg_2853 <= tmp_65_fu_1848_p2;
                tmp_72_reg_2873 <= tmp_72_fu_1897_p2;
                tmp_78_reg_2893 <= tmp_78_fu_1946_p2;
                tmp_90_reg_2913 <= tmp_90_fu_1995_p2;
                tmp_98_reg_2933 <= tmp_98_fu_2044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                is_neg_reg_2698 <= p_Val2_6_reg_409(31 downto 31);
                tmp32_V_1_reg_2703 <= tmp32_V_1_fu_1556_p2;
                tmp_114_reg_2708 <= tmp_114_fu_1562_p1;
                tmp_57_reg_2693 <= tmp_57_fu_1517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2413_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                man_V_2_reg_2444 <= man_V_2_fu_605_p3;
                sel_tmp4_reg_2472 <= sel_tmp4_fu_699_p2;
                sel_tmp7_reg_2466 <= sel_tmp7_fu_681_p2;
                sh_amt_reg_2449 <= sh_amt_fu_636_p3;
                tmp_25_reg_2460 <= tmp_25_fu_650_p1;
                tmp_9_reg_2455 <= tmp_9_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_2478_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                man_V_5_reg_2514 <= man_V_5_fu_891_p3;
                sel_tmp12_reg_2536 <= sel_tmp12_fu_967_p2;
                sel_tmp17_reg_2542 <= sel_tmp17_fu_985_p2;
                sh_amt_1_reg_2519 <= sh_amt_1_fu_922_p3;
                tmp_22_reg_2525 <= tmp_22_fu_930_p2;
                tmp_51_reg_2530 <= tmp_51_fu_936_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_2548_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                man_V_8_reg_2584 <= man_V_8_fu_1176_p3;
                sel_tmp21_reg_2606 <= sel_tmp21_fu_1252_p2;
                sel_tmp26_reg_2612 <= sel_tmp26_fu_1270_p2;
                sh_amt_2_reg_2589 <= sh_amt_2_fu_1207_p3;
                tmp_40_reg_2595 <= tmp_40_fu_1215_p2;
                tmp_97_reg_2600 <= tmp_97_fu_1221_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                p_Val2_15_reg_2823 <= p_Val2_14_fu_1780_p2(47 downto 16);
                p_Val2_17_reg_2828 <= p_Val2_16_fu_1799_p2(47 downto 16);
                w1_temp_V_reg_2813 <= w1_temp_V_fu_1766_p2;
                w2_temp_V_reg_2818 <= w2_temp_V_fu_1771_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                p_Val2_19_reg_2843 <= p_Val2_18_fu_1828_p2(47 downto 16);
                w3_temp_V_reg_2833 <= w3_temp_V_fu_1814_p2;
                w4_temp_V_reg_2838 <= w4_temp_V_fu_1819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                smooth_grad_V_load_reg_2776 <= smooth_grad_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_57_reg_2693 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                tmp32_V_24_reg_2713 <= tmp32_V_24_fu_1566_p1;
                tmp_59_reg_2718 <= tmp_59_fu_1580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_65_reg_2853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                tmp32_V_25_reg_2953 <= tmp32_V_25_fu_2093_p1;
                tmp_67_reg_2958 <= tmp_67_fu_2107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_72_reg_2873 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                tmp32_V_26_reg_2963 <= tmp32_V_26_fu_2113_p1;
                tmp_74_reg_2968 <= tmp_74_fu_2127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_78_reg_2893 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                tmp32_V_27_reg_2973 <= tmp32_V_27_fu_2133_p1;
                tmp_81_reg_2978 <= tmp_81_fu_2147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_90_reg_2913 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                tmp32_V_28_reg_2983 <= tmp32_V_28_fu_2153_p1;
                tmp_93_reg_2988 <= tmp_93_fu_2167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_98_reg_2933 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                tmp32_V_29_reg_2993 <= tmp32_V_29_fu_2173_p1;
                tmp_100_reg_2998 <= tmp_100_fu_2187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_817_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_10_reg_2482 <= tmp_10_fu_823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1102_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_26_reg_2552 <= tmp_26_fu_1108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1387_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    tmp_46_reg_2627(5 downto 0) <= tmp_46_fu_1399_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                tmp_58_reg_2683 <= tmp_58_fu_1505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                tmp_66_reg_2751 <= tmp_66_fu_1659_p2;
                tmp_73_reg_2756 <= tmp_73_fu_1665_p2;
                tmp_79_reg_2761 <= tmp_79_fu_1671_p2;
                tmp_91_reg_2766 <= tmp_91_fu_1677_p2;
                tmp_99_reg_2771 <= tmp_99_fu_1683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                tmp_82_reg_2741 <= tmp_82_fu_1648_p2;
            end if;
        end if;
    end process;
    tmp_46_reg_2627(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter10_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter11_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter12_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter13_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter16_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter17_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter18_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter19_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter20_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter21_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter22_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter23_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter24_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter25_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter26_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter27_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter28_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter29_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter30_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter31_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter32_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter33_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter34_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter35_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter36_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter37_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter38_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter39_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter40_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter41_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter42_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter43_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter44_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter45_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter46_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter47_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter48_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter49_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter50_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter51_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_46_reg_2627_pp3_iter52_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, exitcond1_fu_537_p2, ap_enable_reg_pp0_iter0, exitcond2_fu_817_p2, ap_enable_reg_pp1_iter0, exitcond3_fu_1102_p2, ap_enable_reg_pp2_iter0, exitcond4_fu_1387_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state72, exitcond5_fu_1488_p2, ap_CS_fsm_state82, exitcond_fu_1630_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter52, ap_enable_reg_pp3_iter53)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_537_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond1_fu_537_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((exitcond2_fu_817_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((exitcond2_fu_817_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((exitcond3_fu_1102_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((exitcond3_fu_1102_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((exitcond4_fu_1387_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter53 = ap_const_logic_1) and (ap_enable_reg_pp3_iter52 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((exitcond4_fu_1387_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter53 = ap_const_logic_1) and (ap_enable_reg_pp3_iter52 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((exitcond5_fu_1488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((exitcond_fu_1630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_898_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_13_fu_871_p1));
    F2_2_fu_1183_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_29_fu_1156_p1));
    F2_fu_612_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_s_fu_585_p1));
        OP1_V_cast_fu_1710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(smooth_grad_V_load_reg_2776),48));

    abs_dif_V_1_fu_1424_p3 <= 
        abs_dif_V_fu_1419_p2 when (tmp_111_reg_2651(0) = '1') else 
        abs_dif_V_3_reg_2643;
    abs_dif_V_3_fu_1405_p2 <= std_logic_vector(unsigned(nn_out_mat_V_q0) - unsigned(batch_y_mat_V_q0));
    abs_dif_V_fu_1419_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(abs_dif_V_3_reg_2643));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state16 <= ap_CS_fsm(6);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
    ap_CS_fsm_state71 <= ap_CS_fsm(8);
    ap_CS_fsm_state72 <= ap_CS_fsm(9);
    ap_CS_fsm_state73 <= ap_CS_fsm(10);
    ap_CS_fsm_state74 <= ap_CS_fsm(11);
    ap_CS_fsm_state75 <= ap_CS_fsm(12);
    ap_CS_fsm_state80 <= ap_CS_fsm(17);
    ap_CS_fsm_state81 <= ap_CS_fsm(18);
    ap_CS_fsm_state82 <= ap_CS_fsm(19);
    ap_CS_fsm_state83 <= ap_CS_fsm(20);
    ap_CS_fsm_state84 <= ap_CS_fsm(21);
    ap_CS_fsm_state85 <= ap_CS_fsm(22);
    ap_CS_fsm_state86 <= ap_CS_fsm(23);
    ap_CS_fsm_state87 <= ap_CS_fsm(24);
    ap_CS_fsm_state88 <= ap_CS_fsm(25);
    ap_CS_fsm_state89 <= ap_CS_fsm(26);
    ap_CS_fsm_state94 <= ap_CS_fsm(31);
    ap_CS_fsm_state95 <= ap_CS_fsm(32);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_data_0_vld_out, ap_enable_reg_pp0_iter1, exitcond1_reg_2413)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond1_reg_2413 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_data_0_vld_out, ap_enable_reg_pp0_iter1, exitcond1_reg_2413)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond1_reg_2413 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(in_stream_data_0_vld_out, ap_enable_reg_pp1_iter1, exitcond2_reg_2478)
    begin
                ap_block_pp1_stage0_11001 <= ((exitcond2_reg_2478 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(in_stream_data_0_vld_out, ap_enable_reg_pp1_iter1, exitcond2_reg_2478)
    begin
                ap_block_pp1_stage0_subdone <= ((exitcond2_reg_2478 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(in_stream_data_0_vld_out, ap_enable_reg_pp2_iter1, exitcond3_reg_2548)
    begin
                ap_block_pp2_stage0_11001 <= ((exitcond3_reg_2548 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(in_stream_data_0_vld_out, ap_enable_reg_pp2_iter1, exitcond3_reg_2548)
    begin
                ap_block_pp2_stage0_subdone <= ((exitcond3_reg_2548 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp2_stage0_iter1_assign_proc : process(in_stream_data_0_vld_out, exitcond3_reg_2548)
    begin
                ap_block_state13_pp2_stage0_iter1 <= ((exitcond3_reg_2548 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state14_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_data_0_vld_out, exitcond1_reg_2413)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond1_reg_2413 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state40_pp3_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp3_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp3_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp3_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp3_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp3_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp3_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp3_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp3_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp3_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp3_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp3_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp3_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp3_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp3_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp3_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp3_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp3_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp3_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp3_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp3_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp3_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp3_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp3_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp3_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp1_stage0_iter1_assign_proc : process(in_stream_data_0_vld_out, exitcond2_reg_2478)
    begin
                ap_block_state8_pp1_stage0_iter1 <= ((exitcond2_reg_2478 = ap_const_lv1_0) and (in_stream_data_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_537_p2)
    begin
        if ((exitcond1_fu_537_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(exitcond2_fu_817_p2)
    begin
        if ((exitcond2_fu_817_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state12_assign_proc : process(exitcond3_fu_1102_p2)
    begin
        if ((exitcond3_fu_1102_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state17_assign_proc : process(exitcond4_fu_1387_p2)
    begin
        if ((exitcond4_fu_1387_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_enable_reg_pp3_iter13, ap_enable_reg_pp3_iter14, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter16, ap_enable_reg_pp3_iter17, ap_enable_reg_pp3_iter18, ap_enable_reg_pp3_iter19, ap_enable_reg_pp3_iter20, ap_enable_reg_pp3_iter21, ap_enable_reg_pp3_iter22, ap_enable_reg_pp3_iter23, ap_enable_reg_pp3_iter24, ap_enable_reg_pp3_iter25, ap_enable_reg_pp3_iter26, ap_enable_reg_pp3_iter27, ap_enable_reg_pp3_iter28, ap_enable_reg_pp3_iter29, ap_enable_reg_pp3_iter30, ap_enable_reg_pp3_iter31, ap_enable_reg_pp3_iter32, ap_enable_reg_pp3_iter33, ap_enable_reg_pp3_iter34, ap_enable_reg_pp3_iter35, ap_enable_reg_pp3_iter36, ap_enable_reg_pp3_iter37, ap_enable_reg_pp3_iter38, ap_enable_reg_pp3_iter39, ap_enable_reg_pp3_iter40, ap_enable_reg_pp3_iter41, ap_enable_reg_pp3_iter42, ap_enable_reg_pp3_iter43, ap_enable_reg_pp3_iter44, ap_enable_reg_pp3_iter45, ap_enable_reg_pp3_iter46, ap_enable_reg_pp3_iter47, ap_enable_reg_pp3_iter48, ap_enable_reg_pp3_iter49, ap_enable_reg_pp3_iter50, ap_enable_reg_pp3_iter51, ap_enable_reg_pp3_iter52, ap_enable_reg_pp3_iter53)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter53 = ap_const_logic_0) and (ap_enable_reg_pp3_iter52 = ap_const_logic_0) and (ap_enable_reg_pp3_iter51 = ap_const_logic_0) and (ap_enable_reg_pp3_iter50 = ap_const_logic_0) and (ap_enable_reg_pp3_iter49 = ap_const_logic_0) and (ap_enable_reg_pp3_iter48 = ap_const_logic_0) and (ap_enable_reg_pp3_iter47 = ap_const_logic_0) and (ap_enable_reg_pp3_iter46 = ap_const_logic_0) and (ap_enable_reg_pp3_iter45 = ap_const_logic_0) and (ap_enable_reg_pp3_iter44 = ap_const_logic_0) and (ap_enable_reg_pp3_iter43 = ap_const_logic_0) and (ap_enable_reg_pp3_iter42 = ap_const_logic_0) and (ap_enable_reg_pp3_iter41 = ap_const_logic_0) and (ap_enable_reg_pp3_iter40 = ap_const_logic_0) and (ap_enable_reg_pp3_iter39 = ap_const_logic_0) and (ap_enable_reg_pp3_iter38 = ap_const_logic_0) and (ap_enable_reg_pp3_iter37 = ap_const_logic_0) and (ap_enable_reg_pp3_iter36 = ap_const_logic_0) and (ap_enable_reg_pp3_iter35 = ap_const_logic_0) and (ap_enable_reg_pp3_iter34 = ap_const_logic_0) and (ap_enable_reg_pp3_iter33 = ap_const_logic_0) and (ap_enable_reg_pp3_iter32 = ap_const_logic_0) and (ap_enable_reg_pp3_iter31 = ap_const_logic_0) and (ap_enable_reg_pp3_iter30 = ap_const_logic_0) and (ap_enable_reg_pp3_iter29 = ap_const_logic_0) and (ap_enable_reg_pp3_iter28 = ap_const_logic_0) and (ap_enable_reg_pp3_iter27 = ap_const_logic_0) and (ap_enable_reg_pp3_iter26 = ap_const_logic_0) and (ap_enable_reg_pp3_iter25 = ap_const_logic_0) and (ap_enable_reg_pp3_iter24 = ap_const_logic_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_0) and (ap_enable_reg_pp3_iter22 = ap_const_logic_0) and (ap_enable_reg_pp3_iter21 = ap_const_logic_0) and (ap_enable_reg_pp3_iter20 = ap_const_logic_0) and (ap_enable_reg_pp3_iter19 = ap_const_logic_0) and (ap_enable_reg_pp3_iter18 = ap_const_logic_0) and (ap_enable_reg_pp3_iter17 = ap_const_logic_0) and (ap_enable_reg_pp3_iter16 = ap_const_logic_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_368_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_2413, i_reg_364, i_6_reg_2417)
    begin
        if (((exitcond1_reg_2413 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_368_p4 <= i_6_reg_2417;
        else 
            ap_phi_mux_i_phi_fu_368_p4 <= i_reg_364;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    batch_x_mat_V_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state83, ap_CS_fsm_state82, ap_enable_reg_pp2_iter3, tmp_27_fu_1276_p1, tmp_80_fu_1642_p1, tmp_89_fu_1705_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            batch_x_mat_V_address0 <= tmp_89_fu_1705_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            batch_x_mat_V_address0 <= tmp_80_fu_1642_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            batch_x_mat_V_address0 <= tmp_27_fu_1276_p1(8 - 1 downto 0);
        else 
            batch_x_mat_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    batch_x_mat_V_address1_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state82, tmp_83_fu_1654_p1, tmp_86_fu_1697_p1, tmp_92_fu_1761_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            batch_x_mat_V_address1 <= tmp_92_fu_1761_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            batch_x_mat_V_address1 <= tmp_86_fu_1697_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            batch_x_mat_V_address1 <= tmp_83_fu_1654_p1(8 - 1 downto 0);
        else 
            batch_x_mat_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    batch_x_mat_V_ce0_assign_proc : process(ap_CS_fsm_state83, ap_block_pp2_stage0_11001, ap_CS_fsm_state82, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state83) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)))) then 
            batch_x_mat_V_ce0 <= ap_const_logic_1;
        else 
            batch_x_mat_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_x_mat_V_ce1_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            batch_x_mat_V_ce1 <= ap_const_logic_1;
        else 
            batch_x_mat_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    batch_x_mat_V_d0 <= 
        newSel10_fu_1364_p3 when (or_cond8_fu_1372_p2(0) = '1') else 
        ap_const_lv32_0;

    batch_x_mat_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond3_reg_2548_pp2_iter2_reg, ap_enable_reg_pp2_iter3)
    begin
        if (((exitcond3_reg_2548_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            batch_x_mat_V_we0 <= ap_const_logic_1;
        else 
            batch_x_mat_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_y_mat_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, tmp_46_fu_1399_p1, ap_enable_reg_pp1_iter3, tmp_11_fu_991_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            batch_y_mat_V_address0 <= tmp_46_fu_1399_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            batch_y_mat_V_address0 <= tmp_11_fu_991_p1(5 - 1 downto 0);
        else 
            batch_y_mat_V_address0 <= "XXXXX";
        end if; 
    end process;


    batch_y_mat_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)))) then 
            batch_y_mat_V_ce0 <= ap_const_logic_1;
        else 
            batch_y_mat_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    batch_y_mat_V_d0 <= 
        newSel6_fu_1079_p3 when (or_cond5_fu_1087_p2(0) = '1') else 
        ap_const_lv32_0;

    batch_y_mat_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond2_reg_2478_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((exitcond2_reg_2478_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            batch_y_mat_V_we0 <= ap_const_logic_1;
        else 
            batch_y_mat_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias <= 
        ap_const_lv32_0 when (tmp_57_reg_2693(0) = '1') else 
        f_fu_1618_p1;

    bias_ap_vld_assign_proc : process(ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            bias_ap_vld <= ap_const_logic_1;
        else 
            bias_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bias_temp_V_fu_1511_p2 <= std_logic_vector(unsigned(smooth_grad_V_q0) + unsigned(p_Val2_6_reg_409));
    exitcond1_fu_537_p2 <= "1" when (ap_phi_mux_i_phi_fu_368_p4 = ap_const_lv6_20) else "0";
    exitcond2_fu_817_p2 <= "1" when (i_1_reg_376 = ap_const_lv7_40) else "0";
    exitcond3_fu_1102_p2 <= "1" when (i_2_reg_387 = ap_const_lv8_E0) else "0";
    exitcond4_fu_1387_p2 <= "1" when (i_3_reg_398 = ap_const_lv6_20) else "0";
    exitcond5_fu_1488_p2 <= "1" when (i_4_reg_421 = ap_const_lv6_20) else "0";
    exitcond_fu_1630_p2 <= "1" when (i_5_reg_492 = ap_const_lv6_20) else "0";
    f_11_fu_2401_p1 <= p_Result_19_fu_2390_p5;
    f_2_fu_2225_p1 <= p_Result_11_fu_2214_p5;
    f_4_fu_2269_p1 <= p_Result_13_fu_2258_p5;
    f_6_fu_2313_p1 <= p_Result_15_fu_2302_p5;
    f_8_fu_2357_p1 <= p_Result_17_fu_2346_p5;
    f_fu_1618_p1 <= p_Result_8_fu_1607_p5;
    grp_fu_1457_p0 <= (abs_dif_V_3_reg_2643 & ap_const_lv16_0);

    grp_fu_504_p0_assign_proc : process(tmp32_V_1_reg_2703, tmp32_V_3_reg_2863, ap_CS_fsm_state75, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_504_p0 <= tmp32_V_3_reg_2863;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_504_p0 <= tmp32_V_1_reg_2703;
        else 
            grp_fu_504_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_fu_1393_p2 <= std_logic_vector(unsigned(i_3_reg_398) + unsigned(ap_const_lv6_1));
    i_11_fu_1636_p2 <= std_logic_vector(unsigned(i_5_reg_492) + unsigned(ap_const_lv6_1));
    i_6_fu_543_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_368_p4) + unsigned(ap_const_lv6_1));
    i_7_fu_829_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i_1_reg_376));
    i_8_fu_1494_p2 <= std_logic_vector(unsigned(i_4_reg_421) + unsigned(ap_const_lv6_1));
    i_9_fu_1114_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i_2_reg_387));
    icmp1_fu_1235_p2 <= "1" when (tmp_104_fu_1225_p4 = ap_const_lv7_0) else "0";
    icmp2_fu_1444_p2 <= "1" when (signed(tmp_112_fu_1434_p4) < signed(ap_const_lv16_1)) else "0";
    icmp7_fu_950_p2 <= "1" when (tmp_53_fu_940_p4 = ap_const_lv7_0) else "0";
    icmp_fu_664_p2 <= "1" when (tmp_33_fu_654_p4 = ap_const_lv7_0) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(in_stream_data_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_2413, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond2_reg_2478, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond3_reg_2548)
    begin
        if ((((exitcond3_reg_2548 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond2_reg_2478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond1_reg_2413 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            in_stream_TDATA_blk_n <= in_stream_data_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_last_0_state(1);
    in_stream_data_0_ack_in <= in_stream_data_0_state(1);

    in_stream_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_2413, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_reg_2478, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_2548, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((exitcond3_reg_2548 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond2_reg_2478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond1_reg_2413 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_stream_data_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_data_0_data_out_assign_proc : process(in_stream_data_0_payload_A, in_stream_data_0_payload_B, in_stream_data_0_sel)
    begin
        if ((in_stream_data_0_sel = ap_const_logic_1)) then 
            in_stream_data_0_data_out <= in_stream_data_0_payload_B;
        else 
            in_stream_data_0_data_out <= in_stream_data_0_payload_A;
        end if; 
    end process;

    in_stream_data_0_load_A <= (in_stream_data_0_state_cmp_full and not(in_stream_data_0_sel_wr));
    in_stream_data_0_load_B <= (in_stream_data_0_state_cmp_full and in_stream_data_0_sel_wr);
    in_stream_data_0_sel <= in_stream_data_0_sel_rd;
    in_stream_data_0_state_cmp_full <= '0' when (in_stream_data_0_state = ap_const_lv2_1) else '1';
    in_stream_data_0_vld_in <= in_stream_TVALID;
    in_stream_data_0_vld_out <= in_stream_data_0_state(0);

    in_stream_last_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_2413, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_reg_2478, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_2548, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((exitcond3_reg_2548 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond2_reg_2478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond1_reg_2413 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_stream_last_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_last_0_vld_in <= in_stream_TVALID;
    ireg_V_1_fu_835_p1 <= grp_fu_519_p1;
    ireg_V_2_fu_1120_p1 <= grp_fu_519_p1;
    ireg_V_fu_549_p1 <= grp_fu_519_p1;
    is_neg_1_fu_1854_p3 <= p_Val2_4_reg_480(31 downto 31);
    is_neg_2_fu_1903_p3 <= p_Val2_3_reg_468(31 downto 31);
    is_neg_3_fu_1952_p3 <= p_Val2_9_reg_456(31 downto 31);
    is_neg_4_fu_2001_p3 <= p_Val2_8_reg_444(31 downto 31);
    is_neg_5_fu_2050_p3 <= p_Val2_32_reg_432(31 downto 31);
    is_neg_fu_1523_p3 <= p_Val2_6_reg_409(31 downto 31);
    man_V_1_fu_599_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_s_fu_595_p1));
    man_V_2_fu_605_p3 <= 
        man_V_1_fu_599_p2 when (isneg_reg_2422(0) = '1') else 
        p_Result_s_fu_595_p1;
    man_V_4_fu_885_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_2_fu_881_p1));
    man_V_5_fu_891_p3 <= 
        man_V_4_fu_885_p2 when (isneg_1_reg_2492(0) = '1') else 
        p_Result_2_fu_881_p1;
    man_V_7_fu_1170_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_3_fu_1166_p1));
    man_V_8_fu_1176_p3 <= 
        man_V_7_fu_1170_p2 when (isneg_2_reg_2562(0) = '1') else 
        p_Result_3_fu_1166_p1;
    newSel10_fu_1364_p3 <= 
        newSel8_fu_1339_p3 when (or_cond6_fu_1346_p2(0) = '1') else 
        newSel9_fu_1351_p3;
    newSel1_fu_781_p3 <= 
        storemerge_fu_731_p3 when (sel_tmp9_fu_759_p2(0) = '1') else 
        tmp_25_reg_2460;
    newSel2_fu_794_p3 <= 
        newSel_fu_769_p3 when (or_cond_fu_776_p2(0) = '1') else 
        newSel1_fu_781_p3;
    newSel4_fu_1054_p3 <= 
        tmp_35_fu_1023_p2 when (sel_tmp17_reg_2542(0) = '1') else 
        tmp_63_fu_1012_p1;
    newSel5_fu_1066_p3 <= 
        storemerge2_fu_1016_p3 when (sel_tmp14_fu_1044_p2(0) = '1') else 
        tmp_51_reg_2530;
    newSel6_fu_1079_p3 <= 
        newSel4_fu_1054_p3 when (or_cond3_fu_1061_p2(0) = '1') else 
        newSel5_fu_1066_p3;
    newSel8_fu_1339_p3 <= 
        tmp_45_fu_1308_p2 when (sel_tmp26_reg_2612(0) = '1') else 
        tmp_110_fu_1297_p1;
    newSel9_fu_1351_p3 <= 
        storemerge4_fu_1301_p3 when (sel_tmp23_fu_1329_p2(0) = '1') else 
        tmp_97_reg_2600;
    newSel_fu_769_p3 <= 
        tmp_18_fu_738_p2 when (sel_tmp4_reg_2472(0) = '1') else 
        tmp_36_fu_727_p1;

    nn_out_mat_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, tmp_46_fu_1399_p1, ap_enable_reg_pp0_iter3, tmp_6_fu_705_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            nn_out_mat_V_address0 <= tmp_46_fu_1399_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            nn_out_mat_V_address0 <= tmp_6_fu_705_p1(5 - 1 downto 0);
        else 
            nn_out_mat_V_address0 <= "XXXXX";
        end if; 
    end process;


    nn_out_mat_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            nn_out_mat_V_ce0 <= ap_const_logic_1;
        else 
            nn_out_mat_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    nn_out_mat_V_d0 <= 
        newSel2_fu_794_p3 when (or_cond2_fu_802_p2(0) = '1') else 
        ap_const_lv32_0;

    nn_out_mat_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond1_reg_2413_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((exitcond1_reg_2413_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            nn_out_mat_V_we0 <= ap_const_logic_1;
        else 
            nn_out_mat_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    num_zeros_1_fu_1879_p3_proc : process(p_Result_10_fu_1869_p4)
    begin
        num_zeros_1_fu_1879_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_10_fu_1869_p4(i) = '1' then
                num_zeros_1_fu_1879_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    num_zeros_2_fu_1928_p3_proc : process(p_Result_12_fu_1918_p4)
    begin
        num_zeros_2_fu_1928_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_12_fu_1918_p4(i) = '1' then
                num_zeros_2_fu_1928_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    num_zeros_3_fu_1977_p3_proc : process(p_Result_14_fu_1967_p4)
    begin
        num_zeros_3_fu_1977_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_14_fu_1967_p4(i) = '1' then
                num_zeros_3_fu_1977_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    num_zeros_4_fu_2026_p3_proc : process(p_Result_16_fu_2016_p4)
    begin
        num_zeros_4_fu_2026_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_16_fu_2016_p4(i) = '1' then
                num_zeros_4_fu_2026_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    num_zeros_5_fu_2075_p3_proc : process(p_Result_18_fu_2065_p4)
    begin
        num_zeros_5_fu_2075_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_18_fu_2065_p4(i) = '1' then
                num_zeros_5_fu_2075_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    num_zeros_fu_1548_p3_proc : process(p_Result_7_fu_1538_p4)
    begin
        num_zeros_fu_1548_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_7_fu_1538_p4(i) = '1' then
                num_zeros_fu_1548_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    or_cond1_fu_788_p2 <= (sel_tmp9_fu_759_p2 or sel_tmp2_fu_748_p2);
    or_cond2_fu_802_p2 <= (or_cond_fu_776_p2 or or_cond1_fu_788_p2);
    or_cond3_fu_1061_p2 <= (sel_tmp17_reg_2542 or sel_tmp15_fu_1049_p2);
    or_cond4_fu_1073_p2 <= (sel_tmp14_fu_1044_p2 or sel_tmp10_fu_1033_p2);
    or_cond5_fu_1087_p2 <= (or_cond4_fu_1073_p2 or or_cond3_fu_1061_p2);
    or_cond6_fu_1346_p2 <= (sel_tmp26_reg_2612 or sel_tmp24_fu_1334_p2);
    or_cond7_fu_1358_p2 <= (sel_tmp23_fu_1329_p2 or sel_tmp19_fu_1318_p2);
    or_cond8_fu_1372_p2 <= (or_cond7_fu_1358_p2 or or_cond6_fu_1346_p2);
    or_cond_fu_776_p2 <= (sel_tmp_fu_764_p2 or sel_tmp4_reg_2472);
    p_Repl2_10_trunc_fu_2289_p2 <= std_logic_vector(unsigned(tmp_84_fu_2281_p2) + unsigned(tmp_85_fu_2286_p1));
    p_Repl2_13_trunc_fu_2333_p2 <= std_logic_vector(unsigned(tmp_94_fu_2325_p2) + unsigned(tmp_95_fu_2330_p1));
    p_Repl2_16_trunc_fu_2377_p2 <= std_logic_vector(unsigned(tmp_101_fu_2369_p2) + unsigned(tmp_102_fu_2374_p1));
    p_Repl2_1_trunc_fu_1594_p2 <= std_logic_vector(unsigned(tmp_60_fu_1586_p2) + unsigned(tmp_62_fu_1591_p1));
    p_Repl2_4_trunc_fu_2201_p2 <= std_logic_vector(unsigned(tmp_68_fu_2193_p2) + unsigned(tmp_69_fu_2198_p1));
    p_Repl2_7_trunc_fu_2245_p2 <= std_logic_vector(unsigned(tmp_75_fu_2237_p2) + unsigned(tmp_76_fu_2242_p1));
    
    p_Result_10_fu_1869_p4_proc : process(p_Val2_37_fu_1862_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_10_fu_1869_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_37_fu_1862_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_10_fu_1869_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_10_fu_1869_p4_i) := p_Val2_37_fu_1862_p3(32-1-p_Result_10_fu_1869_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_10_fu_1869_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_11_fu_2214_p5 <= (tmp_71_fu_2207_p3 & tmp32_V_25_reg_2953(22 downto 0));
    
    p_Result_12_fu_1918_p4_proc : process(p_Val2_38_fu_1911_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_12_fu_1918_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_38_fu_1911_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_12_fu_1918_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_12_fu_1918_p4_i) := p_Val2_38_fu_1911_p3(32-1-p_Result_12_fu_1918_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_12_fu_1918_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_13_fu_2258_p5 <= (tmp_77_fu_2251_p3 & tmp32_V_26_reg_2963(22 downto 0));
    
    p_Result_14_fu_1967_p4_proc : process(p_Val2_39_fu_1960_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_14_fu_1967_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_39_fu_1960_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_14_fu_1967_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_14_fu_1967_p4_i) := p_Val2_39_fu_1960_p3(32-1-p_Result_14_fu_1967_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_14_fu_1967_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_15_fu_2302_p5 <= (tmp_87_fu_2295_p3 & tmp32_V_27_reg_2973(22 downto 0));
    
    p_Result_16_fu_2016_p4_proc : process(p_Val2_s_fu_2009_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_16_fu_2016_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_2009_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_16_fu_2016_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_16_fu_2016_p4_i) := p_Val2_s_fu_2009_p3(32-1-p_Result_16_fu_2016_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_16_fu_2016_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_17_fu_2346_p5 <= (tmp_96_fu_2339_p3 & tmp32_V_28_reg_2983(22 downto 0));
    
    p_Result_18_fu_2065_p4_proc : process(p_Val2_40_fu_2058_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_18_fu_2065_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_40_fu_2058_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_18_fu_2065_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_18_fu_2065_p4_i) := p_Val2_40_fu_2058_p3(32-1-p_Result_18_fu_2065_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_18_fu_2065_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_19_fu_2390_p5 <= (tmp_103_fu_2383_p3 & tmp32_V_29_reg_2993(22 downto 0));
    p_Result_1_fu_2097_p4 <= tmp32_V_25_fu_2093_p1(30 downto 23);
    p_Result_2_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_874_p3),54));
    p_Result_3_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_1159_p3),54));
    p_Result_4_fu_2117_p4 <= tmp32_V_26_fu_2113_p1(30 downto 23);
    p_Result_5_fu_1570_p4 <= tmp32_V_24_fu_1566_p1(30 downto 23);
    p_Result_6_fu_2177_p4 <= tmp32_V_29_fu_2173_p1(30 downto 23);
    
    p_Result_7_fu_1538_p4_proc : process(p_Val2_36_fu_1531_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_7_fu_1538_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_36_fu_1531_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_7_fu_1538_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_7_fu_1538_p4_i) := p_Val2_36_fu_1531_p3(32-1-p_Result_7_fu_1538_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_7_fu_1538_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_8_fu_1607_p5 <= (tmp_64_fu_1600_p3 & tmp32_V_24_reg_2713(22 downto 0));
    p_Result_9_fu_2137_p4 <= tmp32_V_27_fu_2133_p1(30 downto 23);
    p_Result_s_27_fu_2157_p4 <= tmp32_V_28_fu_2153_p1(30 downto 23);
    p_Result_s_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_588_p3),54));
    p_Val2_12_fu_1737_p0 <= OP1_V_cast_fu_1710_p1(32 - 1 downto 0);
    p_Val2_12_fu_1737_p1 <= reg_532;
    p_Val2_12_fu_1737_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_12_fu_1737_p0) * signed(p_Val2_12_fu_1737_p1))), 48));
    p_Val2_14_fu_1780_p0 <= OP1_V_cast_reg_2791(32 - 1 downto 0);
    p_Val2_14_fu_1780_p1 <= reg_527;
    p_Val2_14_fu_1780_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_14_fu_1780_p0) * signed(p_Val2_14_fu_1780_p1))), 48));
    p_Val2_16_fu_1799_p0 <= OP1_V_cast_reg_2791(32 - 1 downto 0);
    p_Val2_16_fu_1799_p1 <= reg_532;
    p_Val2_16_fu_1799_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_16_fu_1799_p0) * signed(p_Val2_16_fu_1799_p1))), 48));
    p_Val2_18_fu_1828_p0 <= OP1_V_cast_reg_2791(32 - 1 downto 0);
    p_Val2_18_fu_1828_p1 <= reg_527;
    p_Val2_18_fu_1828_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_18_fu_1828_p0) * signed(p_Val2_18_fu_1828_p1))), 48));
    p_Val2_36_fu_1531_p3 <= 
        tmp_58_reg_2683 when (is_neg_fu_1523_p3(0) = '1') else 
        p_Val2_6_reg_409;
    p_Val2_37_fu_1862_p3 <= 
        tmp_66_reg_2751 when (is_neg_1_fu_1854_p3(0) = '1') else 
        p_Val2_4_reg_480;
    p_Val2_38_fu_1911_p3 <= 
        tmp_73_reg_2756 when (is_neg_2_fu_1903_p3(0) = '1') else 
        p_Val2_3_reg_468;
    p_Val2_39_fu_1960_p3 <= 
        tmp_79_reg_2761 when (is_neg_3_fu_1952_p3(0) = '1') else 
        p_Val2_9_reg_456;
    p_Val2_40_fu_2058_p3 <= 
        tmp_99_reg_2771 when (is_neg_5_fu_2050_p3(0) = '1') else 
        p_Val2_32_reg_432;
    p_Val2_7_fu_1717_p0 <= OP1_V_cast_fu_1710_p1(32 - 1 downto 0);
    p_Val2_7_fu_1717_p1 <= reg_527;
    p_Val2_7_fu_1717_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_7_fu_1717_p0) * signed(p_Val2_7_fu_1717_p1))), 48));
    p_Val2_s_fu_2009_p3 <= 
        tmp_91_reg_2766 when (is_neg_4_fu_2001_p3(0) = '1') else 
        p_Val2_8_reg_444;
    sel_tmp10_fu_1033_p2 <= (tmp_22_reg_2525 and sel_tmp5_fu_1028_p2);
    sel_tmp11_fu_961_p2 <= (sel_tmp31_demorgan_fu_956_p2 xor ap_const_lv1_1);
    sel_tmp12_fu_967_p2 <= (tmp_19_fu_904_p2 and sel_tmp11_fu_961_p2);
    sel_tmp13_fu_1038_p2 <= (tmp_24_fu_998_p2 xor ap_const_lv1_1);
    sel_tmp14_fu_1044_p2 <= (sel_tmp13_fu_1038_p2 and sel_tmp12_reg_2536);
    sel_tmp15_fu_1049_p2 <= (tmp_24_fu_998_p2 and sel_tmp12_reg_2536);
    sel_tmp16_fu_979_p2 <= (sel_tmp46_demorgan_fu_973_p2 xor ap_const_lv1_1);
    sel_tmp17_fu_985_p2 <= (sel_tmp16_fu_979_p2 and icmp7_fu_950_p2);
    sel_tmp18_fu_1313_p2 <= (tmp_32_reg_2578_pp2_iter2_reg xor ap_const_lv1_1);
    sel_tmp19_fu_1318_p2 <= (tmp_40_reg_2595 and sel_tmp18_fu_1313_p2);
    sel_tmp1_fu_743_p2 <= (tmp_2_reg_2438_pp0_iter2_reg xor ap_const_lv1_1);
    sel_tmp20_fu_1246_p2 <= (sel_tmp56_demorgan_fu_1241_p2 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_687_p2 <= (tmp_4_fu_618_p2 or sel_tmp6_demorgan_fu_670_p2);
    sel_tmp21_fu_1252_p2 <= (tmp_37_fu_1189_p2 and sel_tmp20_fu_1246_p2);
    sel_tmp22_fu_1323_p2 <= (tmp_41_fu_1283_p2 xor ap_const_lv1_1);
    sel_tmp23_fu_1329_p2 <= (sel_tmp22_fu_1323_p2 and sel_tmp21_reg_2606);
    sel_tmp24_fu_1334_p2 <= (tmp_41_fu_1283_p2 and sel_tmp21_reg_2606);
    sel_tmp25_fu_1264_p2 <= (sel_tmp71_demorgan_fu_1258_p2 xor ap_const_lv1_1);
    sel_tmp26_fu_1270_p2 <= (sel_tmp25_fu_1264_p2 and icmp1_fu_1235_p2);
    sel_tmp2_fu_748_p2 <= (tmp_9_reg_2455 and sel_tmp1_fu_743_p2);
    sel_tmp31_demorgan_fu_956_p2 <= (tmp_22_fu_930_p2 or tmp_16_reg_2508);
    sel_tmp3_fu_693_p2 <= (sel_tmp21_demorgan_fu_687_p2 xor ap_const_lv1_1);
    sel_tmp46_demorgan_fu_973_p2 <= (tmp_19_fu_904_p2 or sel_tmp31_demorgan_fu_956_p2);
    sel_tmp4_fu_699_p2 <= (sel_tmp3_fu_693_p2 and icmp_fu_664_p2);
    sel_tmp56_demorgan_fu_1241_p2 <= (tmp_40_fu_1215_p2 or tmp_32_reg_2578);
    sel_tmp5_fu_1028_p2 <= (tmp_16_reg_2508_pp1_iter2_reg xor ap_const_lv1_1);
    sel_tmp6_demorgan_fu_670_p2 <= (tmp_9_fu_644_p2 or tmp_2_reg_2438);
    sel_tmp6_fu_675_p2 <= (sel_tmp6_demorgan_fu_670_p2 xor ap_const_lv1_1);
    sel_tmp71_demorgan_fu_1258_p2 <= (tmp_37_fu_1189_p2 or sel_tmp56_demorgan_fu_1241_p2);
    sel_tmp7_fu_681_p2 <= (tmp_4_fu_618_p2 and sel_tmp6_fu_675_p2);
    sel_tmp8_fu_753_p2 <= (tmp_3_fu_713_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_759_p2 <= (sel_tmp8_fu_753_p2 and sel_tmp7_reg_2466);
    sel_tmp_fu_764_p2 <= (tmp_3_fu_713_p2 and sel_tmp7_reg_2466);
        sh_amt_1_cast_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_2519),32));

    sh_amt_1_fu_922_p3 <= 
        tmp_20_fu_910_p2 when (tmp_19_fu_904_p2(0) = '1') else 
        tmp_21_fu_916_p2;
        sh_amt_2_cast_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_2589),32));

    sh_amt_2_fu_1207_p3 <= 
        tmp_38_fu_1195_p2 when (tmp_37_fu_1189_p2(0) = '1') else 
        tmp_39_fu_1201_p2;
        sh_amt_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_2449),32));

    sh_amt_fu_636_p3 <= 
        tmp_5_fu_624_p2 when (tmp_4_fu_618_p2(0) = '1') else 
        tmp_7_fu_630_p2;

    smooth_grad_V_address0_assign_proc : process(tmp_46_reg_2627_pp3_iter1_reg, ap_CS_fsm_state72, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, tmp_61_fu_1500_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            smooth_grad_V_address0 <= tmp_61_fu_1500_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            smooth_grad_V_address0 <= tmp_46_reg_2627_pp3_iter1_reg(5 - 1 downto 0);
        else 
            smooth_grad_V_address0 <= "XXXXX";
        end if; 
    end process;


    smooth_grad_V_address1_assign_proc : process(tmp_46_reg_2627_pp3_iter52_reg, ap_CS_fsm_state82, ap_enable_reg_pp3_iter53, ap_block_pp3_stage0, tmp_80_fu_1642_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            smooth_grad_V_address1 <= tmp_80_fu_1642_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter53 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            smooth_grad_V_address1 <= tmp_46_reg_2627_pp3_iter52_reg(5 - 1 downto 0);
        else 
            smooth_grad_V_address1 <= "XXXXX";
        end if; 
    end process;


    smooth_grad_V_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state72, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then 
            smooth_grad_V_ce0 <= ap_const_logic_1;
        else 
            smooth_grad_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    smooth_grad_V_ce1_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state82, ap_enable_reg_pp3_iter53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter53 = ap_const_logic_1)))) then 
            smooth_grad_V_ce1 <= ap_const_logic_1;
        else 
            smooth_grad_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        smooth_grad_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_fu_1463_p4),32));

    smooth_grad_V_d1 <= grp_fu_1457_p2(36 downto 5);

    smooth_grad_V_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp2_fu_1444_p2, ap_enable_reg_pp3_iter2)
    begin
        if (((icmp2_fu_1444_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            smooth_grad_V_we0 <= ap_const_logic_1;
        else 
            smooth_grad_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    smooth_grad_V_we1_assign_proc : process(ap_block_pp3_stage0_11001, icmp2_reg_2661_pp3_iter52_reg, ap_enable_reg_pp3_iter53)
    begin
        if (((icmp2_reg_2661_pp3_iter52_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter53 = ap_const_logic_1))) then 
            smooth_grad_V_we1 <= ap_const_logic_1;
        else 
            smooth_grad_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge2_fu_1016_p3 <= 
        ap_const_lv32_FFFFFFFF when (isneg_1_reg_2492_pp1_iter2_reg(0) = '1') else 
        ap_const_lv32_0;
    storemerge4_fu_1301_p3 <= 
        ap_const_lv32_FFFFFFFF when (isneg_2_reg_2562_pp2_iter2_reg(0) = '1') else 
        ap_const_lv32_0;
    storemerge_fu_731_p3 <= 
        ap_const_lv32_FFFFFFFF when (isneg_reg_2422_pp0_iter2_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp32_V_14_fu_1985_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_39_fu_1960_p3),to_integer(unsigned('0' & num_zeros_3_fu_1977_p3(31-1 downto 0)))));
    tmp32_V_18_fu_2034_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_s_fu_2009_p3),to_integer(unsigned('0' & num_zeros_4_fu_2026_p3(31-1 downto 0)))));
    tmp32_V_1_fu_1556_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_36_fu_1531_p3),to_integer(unsigned('0' & num_zeros_fu_1548_p3(31-1 downto 0)))));
    tmp32_V_23_fu_2083_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_40_fu_2058_p3),to_integer(unsigned('0' & num_zeros_5_fu_2075_p3(31-1 downto 0)))));
    tmp32_V_24_fu_1566_p1 <= grp_fu_504_p1;
    tmp32_V_25_fu_2093_p1 <= grp_fu_504_p1;
    tmp32_V_26_fu_2113_p1 <= grp_fu_507_p1;
    tmp32_V_27_fu_2133_p1 <= grp_fu_510_p1;
    tmp32_V_28_fu_2153_p1 <= grp_fu_513_p1;
    tmp32_V_29_fu_2173_p1 <= grp_fu_516_p1;
    tmp32_V_3_fu_1887_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_37_fu_1862_p3),to_integer(unsigned('0' & num_zeros_1_fu_1879_p3(31-1 downto 0)))));
    tmp32_V_7_fu_1936_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_38_fu_1911_p3),to_integer(unsigned('0' & num_zeros_2_fu_1928_p3(31-1 downto 0)))));
    tmp_100_fu_2187_p2 <= "0" when (p_Result_6_fu_2177_p4 = ap_const_lv8_9E) else "1";
    tmp_101_fu_2369_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_124_reg_2948));
    tmp_102_fu_2374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_reg_2998),8));
    tmp_103_fu_2383_p3 <= (is_neg_5_reg_2938 & p_Repl2_16_trunc_fu_2377_p2);
    tmp_104_fu_1225_p4 <= sh_amt_2_fu_1207_p3(11 downto 5);
    tmp_105_fu_1689_p3 <= (ap_const_lv1_1 & i_5_reg_492);
    tmp_106_fu_1753_p3 <= (ap_const_lv2_2 & i_5_reg_492);
    tmp_10_fu_823_p2 <= std_logic_vector(signed(ap_const_lv7_60) + signed(i_1_reg_376));
    tmp_110_fu_1297_p1 <= tmp_44_fu_1292_p2(32 - 1 downto 0);
    tmp_112_fu_1434_p4 <= abs_dif_V_1_fu_1424_p3(31 downto 16);
    tmp_114_fu_1562_p1 <= num_zeros_fu_1548_p3(8 - 1 downto 0);
    tmp_116_fu_1893_p1 <= num_zeros_1_fu_1879_p3(8 - 1 downto 0);
    tmp_118_fu_1942_p1 <= num_zeros_2_fu_1928_p3(8 - 1 downto 0);
    tmp_11_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_2482_pp1_iter2_reg),64));
    tmp_120_fu_1991_p1 <= num_zeros_3_fu_1977_p3(8 - 1 downto 0);
    tmp_122_fu_2040_p1 <= num_zeros_4_fu_2026_p3(8 - 1 downto 0);
    tmp_124_fu_2089_p1 <= num_zeros_5_fu_2075_p3(8 - 1 downto 0);
    tmp_13_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_1_reg_2498),12));
    tmp_14_fu_874_p3 <= (ap_const_lv1_1 & tmp_49_reg_2503);
    tmp_15_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_710_p1),54));
    tmp_16_fu_865_p2 <= "1" when (tmp_42_fu_839_p1 = ap_const_lv63_0) else "0";
    tmp_17_fu_722_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_2444),to_integer(unsigned('0' & tmp_15_fu_718_p1(31-1 downto 0)))));
    tmp_18_fu_738_p2 <= std_logic_vector(shift_left(unsigned(tmp_25_reg_2460),to_integer(unsigned('0' & sh_amt_cast_fu_710_p1(31-1 downto 0)))));
    tmp_19_fu_904_p2 <= "1" when (signed(F2_1_fu_898_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_1_fu_553_p1 <= ireg_V_fu_549_p1(63 - 1 downto 0);
    tmp_20_fu_910_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_1_fu_898_p2));
    tmp_21_fu_916_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_1_fu_898_p2));
    tmp_22_fu_930_p2 <= "1" when (F2_1_fu_898_p2 = ap_const_lv12_10) else "0";
    tmp_23_fu_575_p1 <= ireg_V_fu_549_p1(52 - 1 downto 0);
    tmp_24_fu_998_p2 <= "1" when (unsigned(sh_amt_1_reg_2519) < unsigned(ap_const_lv12_36)) else "0";
    tmp_25_fu_650_p1 <= man_V_2_fu_605_p3(32 - 1 downto 0);
    tmp_26_fu_1108_p2 <= std_logic_vector(signed(ap_const_lv8_C0) + signed(i_2_reg_387));
    tmp_27_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_2552_pp2_iter2_reg),64));
    tmp_29_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_2_reg_2568),12));
    tmp_2_fu_579_p2 <= "1" when (tmp_1_fu_553_p1 = ap_const_lv63_0) else "0";
    tmp_30_fu_1159_p3 <= (ap_const_lv1_1 & tmp_88_reg_2573);
    tmp_31_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_1_cast_fu_995_p1),54));
    tmp_32_fu_1150_p2 <= "1" when (tmp_70_fu_1124_p1 = ap_const_lv63_0) else "0";
    tmp_33_fu_654_p4 <= sh_amt_fu_636_p3(11 downto 5);
    tmp_34_fu_1007_p2 <= std_logic_vector(shift_right(signed(man_V_5_reg_2514),to_integer(unsigned('0' & tmp_31_fu_1003_p1(31-1 downto 0)))));
    tmp_35_fu_1023_p2 <= std_logic_vector(shift_left(unsigned(tmp_51_reg_2530),to_integer(unsigned('0' & sh_amt_1_cast_fu_995_p1(31-1 downto 0)))));
    tmp_36_fu_727_p1 <= tmp_17_fu_722_p2(32 - 1 downto 0);
    tmp_37_fu_1189_p2 <= "1" when (signed(F2_2_fu_1183_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_38_fu_1195_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_2_fu_1183_p2));
    tmp_39_fu_1201_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_2_fu_1183_p2));
    tmp_3_fu_713_p2 <= "1" when (unsigned(sh_amt_reg_2449) < unsigned(ap_const_lv12_36)) else "0";
    tmp_40_fu_1215_p2 <= "1" when (F2_2_fu_1183_p2 = ap_const_lv12_10) else "0";
    tmp_41_fu_1283_p2 <= "1" when (unsigned(sh_amt_2_reg_2589) < unsigned(ap_const_lv12_36)) else "0";
    tmp_42_fu_839_p1 <= ireg_V_1_fu_835_p1(63 - 1 downto 0);
    tmp_43_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_2_cast_fu_1280_p1),54));
    tmp_44_fu_1292_p2 <= std_logic_vector(shift_right(signed(man_V_8_reg_2584),to_integer(unsigned('0' & tmp_43_fu_1288_p1(31-1 downto 0)))));
    tmp_45_fu_1308_p2 <= std_logic_vector(shift_left(unsigned(tmp_97_reg_2600),to_integer(unsigned('0' & sh_amt_2_cast_fu_1280_p1(31-1 downto 0)))));
    tmp_46_fu_1399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_398),64));
    tmp_49_fu_861_p1 <= ireg_V_1_fu_835_p1(52 - 1 downto 0);
    tmp_4_fu_618_p2 <= "1" when (signed(F2_fu_612_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_50_fu_1463_p4 <= abs_dif_V_3_reg_2643(31 downto 5);
    tmp_51_fu_936_p1 <= man_V_5_fu_891_p3(32 - 1 downto 0);
    tmp_53_fu_940_p4 <= sh_amt_1_fu_922_p3(11 downto 5);
    tmp_57_fu_1517_p2 <= "1" when (p_Val2_6_reg_409 = ap_const_lv32_0) else "0";
    tmp_58_fu_1505_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_6_reg_409));
    tmp_59_fu_1580_p2 <= "0" when (p_Result_5_fu_1570_p4 = ap_const_lv8_9E) else "1";
    tmp_5_fu_624_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_612_p2));
    tmp_60_fu_1586_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_114_reg_2708));
    tmp_61_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_421),64));
    tmp_62_fu_1591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_reg_2718),8));
    tmp_63_fu_1012_p1 <= tmp_34_fu_1007_p2(32 - 1 downto 0);
    tmp_64_fu_1600_p3 <= (is_neg_reg_2698 & p_Repl2_1_trunc_fu_1594_p2);
    tmp_65_fu_1848_p2 <= "1" when (p_Val2_4_reg_480 = ap_const_lv32_0) else "0";
    tmp_66_fu_1659_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_reg_480));
    tmp_67_fu_2107_p2 <= "0" when (p_Result_1_fu_2097_p4 = ap_const_lv8_9E) else "1";
    tmp_68_fu_2193_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_116_reg_2868));
    tmp_69_fu_2198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_reg_2958),8));
    tmp_6_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_364_pp0_iter2_reg),64));
    tmp_70_fu_1124_p1 <= ireg_V_2_fu_1120_p1(63 - 1 downto 0);
    tmp_71_fu_2207_p3 <= (is_neg_1_reg_2858 & p_Repl2_4_trunc_fu_2201_p2);
    tmp_72_fu_1897_p2 <= "1" when (p_Val2_3_reg_468 = ap_const_lv32_0) else "0";
    tmp_73_fu_1665_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_3_reg_468));
    tmp_74_fu_2127_p2 <= "0" when (p_Result_4_fu_2117_p4 = ap_const_lv8_9E) else "1";
    tmp_75_fu_2237_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_118_reg_2888));
    tmp_76_fu_2242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_2968),8));
    tmp_77_fu_2251_p3 <= (is_neg_2_reg_2878 & p_Repl2_7_trunc_fu_2245_p2);
    tmp_78_fu_1946_p2 <= "1" when (p_Val2_9_reg_456 = ap_const_lv32_0) else "0";
    tmp_79_fu_1671_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_9_reg_456));
    tmp_7_fu_630_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_612_p2));
    tmp_80_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_492),64));
    tmp_81_fu_2147_p2 <= "0" when (p_Result_9_fu_2137_p4 = ap_const_lv8_9E) else "1";
    tmp_82_fu_1648_p2 <= (i_5_reg_492 xor ap_const_lv6_20);
    tmp_83_fu_1654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_1648_p2),64));
    tmp_84_fu_2281_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_120_reg_2908));
    tmp_85_fu_2286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_reg_2978),8));
    tmp_86_fu_1697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_1689_p3),64));
    tmp_87_fu_2295_p3 <= (is_neg_3_reg_2898 & p_Repl2_10_trunc_fu_2289_p2);
        tmp_88_cast_fu_1702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_82_reg_2741),7));

    tmp_88_fu_1146_p1 <= ireg_V_2_fu_1120_p1(52 - 1 downto 0);
    tmp_89_fu_1705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_cast_fu_1702_p1),64));
    tmp_8_fu_588_p3 <= (ap_const_lv1_1 & tmp_23_reg_2433);
    tmp_90_fu_1995_p2 <= "1" when (p_Val2_8_reg_444 = ap_const_lv32_0) else "0";
    tmp_91_fu_1677_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_8_reg_444));
    tmp_92_fu_1761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_1753_p3),64));
    tmp_93_fu_2167_p2 <= "0" when (p_Result_s_27_fu_2157_p4 = ap_const_lv8_9E) else "1";
    tmp_94_fu_2325_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_122_reg_2928));
    tmp_95_fu_2330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_reg_2988),8));
    tmp_96_fu_2339_p3 <= (is_neg_4_reg_2918 & p_Repl2_13_trunc_fu_2333_p2);
    tmp_97_fu_1221_p1 <= man_V_8_fu_1176_p3(32 - 1 downto 0);
    tmp_98_fu_2044_p2 <= "1" when (p_Val2_32_reg_432 = ap_const_lv32_0) else "0";
    tmp_99_fu_1683_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_32_reg_432));
    tmp_9_fu_644_p2 <= "1" when (F2_fu_612_p2 = ap_const_lv12_10) else "0";
    tmp_s_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_2428),12));
    w1 <= 
        ap_const_lv32_0 when (tmp_65_reg_2853(0) = '1') else 
        f_2_fu_2225_p1;

    w1_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            w1_ap_vld <= ap_const_logic_1;
        else 
            w1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    w1_temp_V_fu_1766_p2 <= std_logic_vector(unsigned(p_Val2_11_reg_2798) + unsigned(p_Val2_4_reg_480));
    w2 <= 
        ap_const_lv32_0 when (tmp_72_reg_2873(0) = '1') else 
        f_4_fu_2269_p1;

    w2_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            w2_ap_vld <= ap_const_logic_1;
        else 
            w2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    w2_temp_V_fu_1771_p2 <= std_logic_vector(unsigned(p_Val2_13_reg_2803) + unsigned(p_Val2_3_reg_468));
    w3 <= 
        ap_const_lv32_0 when (tmp_78_reg_2893(0) = '1') else 
        f_6_fu_2313_p1;

    w3_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            w3_ap_vld <= ap_const_logic_1;
        else 
            w3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    w3_temp_V_fu_1814_p2 <= std_logic_vector(unsigned(p_Val2_15_reg_2823) + unsigned(p_Val2_9_reg_456));
    w4 <= 
        ap_const_lv32_0 when (tmp_90_reg_2913(0) = '1') else 
        f_8_fu_2357_p1;

    w4_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            w4_ap_vld <= ap_const_logic_1;
        else 
            w4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    w4_temp_V_fu_1819_p2 <= std_logic_vector(unsigned(p_Val2_17_reg_2828) + unsigned(p_Val2_8_reg_444));
    w5 <= 
        ap_const_lv32_0 when (tmp_98_reg_2933(0) = '1') else 
        f_11_fu_2401_p1;

    w5_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            w5_ap_vld <= ap_const_logic_1;
        else 
            w5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    w5_temp_V_fu_1843_p2 <= std_logic_vector(unsigned(p_Val2_19_reg_2843) + unsigned(p_Val2_32_reg_432));
end behav;
