-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_rect is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    video_src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    video_src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    video_src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    video_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    video_dst_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    video_dst_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    video_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_src_TVALID : IN STD_LOGIC;
    video_src_TREADY : OUT STD_LOGIC;
    video_dst_TVALID : OUT STD_LOGIC;
    video_dst_TREADY : IN STD_LOGIC );
end;


architecture behav of hls_rect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_rect,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=925215,HLS_SYN_TPT=925204,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=2489,HLS_SYN_LUT=7940,HLS_VERSION=2019_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal xleft_s : STD_LOGIC_VECTOR (15 downto 0);
    signal xright_s : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_s : STD_LOGIC_VECTOR (15 downto 0);
    signal ydown_s : STD_LOGIC_VECTOR (15 downto 0);
    signal color1 : STD_LOGIC_VECTOR (7 downto 0);
    signal color2 : STD_LOGIC_VECTOR (7 downto 0);
    signal color3 : STD_LOGIC_VECTOR (7 downto 0);
    signal char1 : STD_LOGIC_VECTOR (7 downto 0);
    signal char2 : STD_LOGIC_VECTOR (7 downto 0);
    signal char3 : STD_LOGIC_VECTOR (7 downto 0);
    signal char4 : STD_LOGIC_VECTOR (7 downto 0);
    signal char5 : STD_LOGIC_VECTOR (7 downto 0);
    signal char6 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_ap_start : STD_LOGIC;
    signal hls_rect_entry3_U0_ap_done : STD_LOGIC;
    signal hls_rect_entry3_U0_ap_continue : STD_LOGIC;
    signal hls_rect_entry3_U0_ap_idle : STD_LOGIC;
    signal hls_rect_entry3_U0_ap_ready : STD_LOGIC;
    signal hls_rect_entry3_U0_start_out : STD_LOGIC;
    signal hls_rect_entry3_U0_start_write : STD_LOGIC;
    signal hls_rect_entry3_U0_xleft_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry3_U0_xleft_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_xright_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry3_U0_xright_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_ytop_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry3_U0_ytop_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_ydown_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry3_U0_ydown_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_color1_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_color2_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_color3_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_char1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_char1_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_char2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_char2_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_char3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_char3_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_char4_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_char4_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_char5_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_char5_out_write : STD_LOGIC;
    signal hls_rect_entry3_U0_char6_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry3_U0_char6_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_ap_start : STD_LOGIC;
    signal hls_rect_entry304_U0_start_full_n : STD_LOGIC;
    signal hls_rect_entry304_U0_ap_done : STD_LOGIC;
    signal hls_rect_entry304_U0_ap_continue : STD_LOGIC;
    signal hls_rect_entry304_U0_ap_idle : STD_LOGIC;
    signal hls_rect_entry304_U0_ap_ready : STD_LOGIC;
    signal hls_rect_entry304_U0_start_out : STD_LOGIC;
    signal hls_rect_entry304_U0_start_write : STD_LOGIC;
    signal hls_rect_entry304_U0_xleft_s_read : STD_LOGIC;
    signal hls_rect_entry304_U0_xright_s_read : STD_LOGIC;
    signal hls_rect_entry304_U0_ytop_s_read : STD_LOGIC;
    signal hls_rect_entry304_U0_ydown_s_read : STD_LOGIC;
    signal hls_rect_entry304_U0_color1_read : STD_LOGIC;
    signal hls_rect_entry304_U0_color2_read : STD_LOGIC;
    signal hls_rect_entry304_U0_color3_read : STD_LOGIC;
    signal hls_rect_entry304_U0_char1_read : STD_LOGIC;
    signal hls_rect_entry304_U0_char2_read : STD_LOGIC;
    signal hls_rect_entry304_U0_char3_read : STD_LOGIC;
    signal hls_rect_entry304_U0_char4_read : STD_LOGIC;
    signal hls_rect_entry304_U0_char5_read : STD_LOGIC;
    signal hls_rect_entry304_U0_char6_read : STD_LOGIC;
    signal hls_rect_entry304_U0_xleft_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry304_U0_xleft_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_xleft_out1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry304_U0_xleft_out1_write : STD_LOGIC;
    signal hls_rect_entry304_U0_xright_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry304_U0_xright_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_ytop_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry304_U0_ytop_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_ydown_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_rect_entry304_U0_ydown_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_color1_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_color2_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_color3_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_char1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_char1_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_char2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_char2_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_char3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_char3_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_char4_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_char4_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_char5_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_char5_out_write : STD_LOGIC;
    signal hls_rect_entry304_U0_char6_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_rect_entry304_U0_char6_out_write : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_xleft_s_read : STD_LOGIC;
    signal Block_proc_U0_ch2x_out_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc_U0_ch2x_out_out_write : STD_LOGIC;
    signal Block_proc_U0_ch3x_out_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc_U0_ch3x_out_out_write : STD_LOGIC;
    signal Block_proc_U0_ch4x_out_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc_U0_ch4x_out_out_write : STD_LOGIC;
    signal Block_proc_U0_ch5x_out_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc_U0_ch5x_out_out_write : STD_LOGIC;
    signal Block_proc_U0_ch6x_out_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc_U0_ch6x_out_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_video_src_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_3_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_ap_start : STD_LOGIC;
    signal Add_Rectangle_U0_ap_done : STD_LOGIC;
    signal Add_Rectangle_U0_ap_continue : STD_LOGIC;
    signal Add_Rectangle_U0_ap_idle : STD_LOGIC;
    signal Add_Rectangle_U0_ap_ready : STD_LOGIC;
    signal Add_Rectangle_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Rectangle_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Rectangle_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Rectangle_U0_src_data_stream_3_V_read : STD_LOGIC;
    signal Add_Rectangle_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_dst_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_dst_data_stream_3_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_xleft_read : STD_LOGIC;
    signal Add_Rectangle_U0_xright_read : STD_LOGIC;
    signal Add_Rectangle_U0_ytop_read : STD_LOGIC;
    signal Add_Rectangle_U0_ydown_read : STD_LOGIC;
    signal Add_Rectangle_U0_color1_read : STD_LOGIC;
    signal Add_Rectangle_U0_color2_read : STD_LOGIC;
    signal Add_Rectangle_U0_color3_read : STD_LOGIC;
    signal Add_Rectangle_U0_xleft_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Add_Rectangle_U0_xleft_out_write : STD_LOGIC;
    signal Add_Rectangle_U0_ytop_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Add_Rectangle_U0_ytop_out_write : STD_LOGIC;
    signal Add_Rectangle_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_color1_out_write : STD_LOGIC;
    signal Add_Rectangle_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_color2_out_write : STD_LOGIC;
    signal Add_Rectangle_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_color3_out_write : STD_LOGIC;
    signal Add_Char1_U0_ap_start : STD_LOGIC;
    signal Add_Char1_U0_ap_done : STD_LOGIC;
    signal Add_Char1_U0_ap_continue : STD_LOGIC;
    signal Add_Char1_U0_ap_idle : STD_LOGIC;
    signal Add_Char1_U0_ap_ready : STD_LOGIC;
    signal Add_Char1_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Char1_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Char1_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Char1_U0_src_data_stream_3_V_read : STD_LOGIC;
    signal Add_Char1_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char1_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Char1_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char1_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Char1_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char1_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Char1_U0_dst_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char1_U0_dst_data_stream_3_V_write : STD_LOGIC;
    signal Add_Char1_U0_x_read : STD_LOGIC;
    signal Add_Char1_U0_y_read : STD_LOGIC;
    signal Add_Char1_U0_chr_read : STD_LOGIC;
    signal Add_Char1_U0_color1_read : STD_LOGIC;
    signal Add_Char1_U0_color2_read : STD_LOGIC;
    signal Add_Char1_U0_color3_read : STD_LOGIC;
    signal Add_Char1_U0_y_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Add_Char1_U0_y_out_write : STD_LOGIC;
    signal Add_Char1_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char1_U0_color1_out_write : STD_LOGIC;
    signal Add_Char1_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char1_U0_color2_out_write : STD_LOGIC;
    signal Add_Char1_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char1_U0_color3_out_write : STD_LOGIC;
    signal Add_Char2_U0_ap_start : STD_LOGIC;
    signal Add_Char2_U0_ap_done : STD_LOGIC;
    signal Add_Char2_U0_ap_continue : STD_LOGIC;
    signal Add_Char2_U0_ap_idle : STD_LOGIC;
    signal Add_Char2_U0_ap_ready : STD_LOGIC;
    signal Add_Char2_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Char2_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Char2_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Char2_U0_src_data_stream_3_V_read : STD_LOGIC;
    signal Add_Char2_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char2_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Char2_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char2_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Char2_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char2_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Char2_U0_dst_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char2_U0_dst_data_stream_3_V_write : STD_LOGIC;
    signal Add_Char2_U0_ch2x_loc_read : STD_LOGIC;
    signal Add_Char2_U0_ytop_s_read : STD_LOGIC;
    signal Add_Char2_U0_char2_read : STD_LOGIC;
    signal Add_Char2_U0_color1_read : STD_LOGIC;
    signal Add_Char2_U0_color2_read : STD_LOGIC;
    signal Add_Char2_U0_color3_read : STD_LOGIC;
    signal Add_Char2_U0_ytop_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Add_Char2_U0_ytop_out_write : STD_LOGIC;
    signal Add_Char2_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char2_U0_color1_out_write : STD_LOGIC;
    signal Add_Char2_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char2_U0_color2_out_write : STD_LOGIC;
    signal Add_Char2_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char2_U0_color3_out_write : STD_LOGIC;
    signal Add_Char3_U0_ap_start : STD_LOGIC;
    signal Add_Char3_U0_ap_done : STD_LOGIC;
    signal Add_Char3_U0_ap_continue : STD_LOGIC;
    signal Add_Char3_U0_ap_idle : STD_LOGIC;
    signal Add_Char3_U0_ap_ready : STD_LOGIC;
    signal Add_Char3_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Char3_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Char3_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Char3_U0_src_data_stream_3_V_read : STD_LOGIC;
    signal Add_Char3_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char3_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Char3_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char3_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Char3_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char3_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Char3_U0_dst_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char3_U0_dst_data_stream_3_V_write : STD_LOGIC;
    signal Add_Char3_U0_ch3x_loc_read : STD_LOGIC;
    signal Add_Char3_U0_ytop_s_read : STD_LOGIC;
    signal Add_Char3_U0_char3_read : STD_LOGIC;
    signal Add_Char3_U0_color1_read : STD_LOGIC;
    signal Add_Char3_U0_color2_read : STD_LOGIC;
    signal Add_Char3_U0_color3_read : STD_LOGIC;
    signal Add_Char3_U0_ytop_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Add_Char3_U0_ytop_out_write : STD_LOGIC;
    signal Add_Char3_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char3_U0_color1_out_write : STD_LOGIC;
    signal Add_Char3_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char3_U0_color2_out_write : STD_LOGIC;
    signal Add_Char3_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char3_U0_color3_out_write : STD_LOGIC;
    signal Add_Char4_U0_ap_start : STD_LOGIC;
    signal Add_Char4_U0_ap_done : STD_LOGIC;
    signal Add_Char4_U0_ap_continue : STD_LOGIC;
    signal Add_Char4_U0_ap_idle : STD_LOGIC;
    signal Add_Char4_U0_ap_ready : STD_LOGIC;
    signal Add_Char4_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Char4_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Char4_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Char4_U0_src_data_stream_3_V_read : STD_LOGIC;
    signal Add_Char4_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char4_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Char4_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char4_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Char4_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char4_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Char4_U0_dst_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char4_U0_dst_data_stream_3_V_write : STD_LOGIC;
    signal Add_Char4_U0_ch4x_loc_read : STD_LOGIC;
    signal Add_Char4_U0_ytop_s_read : STD_LOGIC;
    signal Add_Char4_U0_char4_read : STD_LOGIC;
    signal Add_Char4_U0_color1_read : STD_LOGIC;
    signal Add_Char4_U0_color2_read : STD_LOGIC;
    signal Add_Char4_U0_color3_read : STD_LOGIC;
    signal Add_Char4_U0_ytop_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Add_Char4_U0_ytop_out_write : STD_LOGIC;
    signal Add_Char4_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char4_U0_color1_out_write : STD_LOGIC;
    signal Add_Char4_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char4_U0_color2_out_write : STD_LOGIC;
    signal Add_Char4_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char4_U0_color3_out_write : STD_LOGIC;
    signal Add_Char5_U0_ap_start : STD_LOGIC;
    signal Add_Char5_U0_ap_done : STD_LOGIC;
    signal Add_Char5_U0_ap_continue : STD_LOGIC;
    signal Add_Char5_U0_ap_idle : STD_LOGIC;
    signal Add_Char5_U0_ap_ready : STD_LOGIC;
    signal Add_Char5_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Char5_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Char5_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Char5_U0_src_data_stream_3_V_read : STD_LOGIC;
    signal Add_Char5_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char5_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Char5_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char5_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Char5_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char5_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Char5_U0_dst_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char5_U0_dst_data_stream_3_V_write : STD_LOGIC;
    signal Add_Char5_U0_ch5x_loc_read : STD_LOGIC;
    signal Add_Char5_U0_ytop_s_read : STD_LOGIC;
    signal Add_Char5_U0_char5_read : STD_LOGIC;
    signal Add_Char5_U0_color1_read : STD_LOGIC;
    signal Add_Char5_U0_color2_read : STD_LOGIC;
    signal Add_Char5_U0_color3_read : STD_LOGIC;
    signal Add_Char5_U0_ytop_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Add_Char5_U0_ytop_out_write : STD_LOGIC;
    signal Add_Char5_U0_color1_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char5_U0_color1_out_write : STD_LOGIC;
    signal Add_Char5_U0_color2_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char5_U0_color2_out_write : STD_LOGIC;
    signal Add_Char5_U0_color3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char5_U0_color3_out_write : STD_LOGIC;
    signal Add_Char6_U0_ap_start : STD_LOGIC;
    signal Add_Char6_U0_ap_done : STD_LOGIC;
    signal Add_Char6_U0_ap_continue : STD_LOGIC;
    signal Add_Char6_U0_ap_idle : STD_LOGIC;
    signal Add_Char6_U0_ap_ready : STD_LOGIC;
    signal Add_Char6_U0_start_out : STD_LOGIC;
    signal Add_Char6_U0_start_write : STD_LOGIC;
    signal Add_Char6_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Char6_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Char6_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Char6_U0_src_data_stream_3_V_read : STD_LOGIC;
    signal Add_Char6_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char6_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Char6_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char6_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Char6_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char6_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Char6_U0_dst_data_stream_3_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Char6_U0_dst_data_stream_3_V_write : STD_LOGIC;
    signal Add_Char6_U0_ch6x_loc_read : STD_LOGIC;
    signal Add_Char6_U0_ytop_s_read : STD_LOGIC;
    signal Add_Char6_U0_char6_read : STD_LOGIC;
    signal Add_Char6_U0_color1_read : STD_LOGIC;
    signal Add_Char6_U0_color2_read : STD_LOGIC;
    signal Add_Char6_U0_color3_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_3_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_dst_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_dst_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal xleft_c1_full_n : STD_LOGIC;
    signal xleft_c1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xleft_c1_empty_n : STD_LOGIC;
    signal xright_c2_full_n : STD_LOGIC;
    signal xright_c2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xright_c2_empty_n : STD_LOGIC;
    signal ytop_c3_full_n : STD_LOGIC;
    signal ytop_c3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c3_empty_n : STD_LOGIC;
    signal ydown_c4_full_n : STD_LOGIC;
    signal ydown_c4_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ydown_c4_empty_n : STD_LOGIC;
    signal color1_c5_full_n : STD_LOGIC;
    signal color1_c5_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c5_empty_n : STD_LOGIC;
    signal color2_c6_full_n : STD_LOGIC;
    signal color2_c6_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c6_empty_n : STD_LOGIC;
    signal color3_c7_full_n : STD_LOGIC;
    signal color3_c7_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c7_empty_n : STD_LOGIC;
    signal char1_c8_full_n : STD_LOGIC;
    signal char1_c8_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char1_c8_empty_n : STD_LOGIC;
    signal char2_c9_full_n : STD_LOGIC;
    signal char2_c9_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char2_c9_empty_n : STD_LOGIC;
    signal char3_c10_full_n : STD_LOGIC;
    signal char3_c10_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char3_c10_empty_n : STD_LOGIC;
    signal char4_c11_full_n : STD_LOGIC;
    signal char4_c11_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char4_c11_empty_n : STD_LOGIC;
    signal char5_c12_full_n : STD_LOGIC;
    signal char5_c12_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char5_c12_empty_n : STD_LOGIC;
    signal char6_c13_full_n : STD_LOGIC;
    signal char6_c13_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char6_c13_empty_n : STD_LOGIC;
    signal xleft_c_full_n : STD_LOGIC;
    signal xleft_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xleft_c_empty_n : STD_LOGIC;
    signal xleft_c17_full_n : STD_LOGIC;
    signal xleft_c17_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xleft_c17_empty_n : STD_LOGIC;
    signal xright_c_full_n : STD_LOGIC;
    signal xright_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xright_c_empty_n : STD_LOGIC;
    signal ytop_c_full_n : STD_LOGIC;
    signal ytop_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c_empty_n : STD_LOGIC;
    signal ydown_c_full_n : STD_LOGIC;
    signal ydown_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ydown_c_empty_n : STD_LOGIC;
    signal color1_c_full_n : STD_LOGIC;
    signal color1_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c_empty_n : STD_LOGIC;
    signal color2_c_full_n : STD_LOGIC;
    signal color2_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c_empty_n : STD_LOGIC;
    signal color3_c_full_n : STD_LOGIC;
    signal color3_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c_empty_n : STD_LOGIC;
    signal char1_c_full_n : STD_LOGIC;
    signal char1_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char1_c_empty_n : STD_LOGIC;
    signal char2_c_full_n : STD_LOGIC;
    signal char2_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char2_c_empty_n : STD_LOGIC;
    signal char3_c_full_n : STD_LOGIC;
    signal char3_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char3_c_empty_n : STD_LOGIC;
    signal char4_c_full_n : STD_LOGIC;
    signal char4_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char4_c_empty_n : STD_LOGIC;
    signal char5_c_full_n : STD_LOGIC;
    signal char5_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char5_c_empty_n : STD_LOGIC;
    signal char6_c_full_n : STD_LOGIC;
    signal char6_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal char6_c_empty_n : STD_LOGIC;
    signal ch2x_loc_c_full_n : STD_LOGIC;
    signal ch2x_loc_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ch2x_loc_c_empty_n : STD_LOGIC;
    signal ch3x_loc_c_full_n : STD_LOGIC;
    signal ch3x_loc_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ch3x_loc_c_empty_n : STD_LOGIC;
    signal ch4x_loc_c_full_n : STD_LOGIC;
    signal ch4x_loc_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ch4x_loc_c_empty_n : STD_LOGIC;
    signal ch5x_loc_c_full_n : STD_LOGIC;
    signal ch5x_loc_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ch5x_loc_c_empty_n : STD_LOGIC;
    signal ch6x_loc_c_full_n : STD_LOGIC;
    signal ch6x_loc_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ch6x_loc_c_empty_n : STD_LOGIC;
    signal rgb_img_data_stream_s_full_n : STD_LOGIC;
    signal rgb_img_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb_img_data_stream_s_empty_n : STD_LOGIC;
    signal rgb_img_data_stream_1_full_n : STD_LOGIC;
    signal rgb_img_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb_img_data_stream_1_empty_n : STD_LOGIC;
    signal rgb_img_data_stream_2_full_n : STD_LOGIC;
    signal rgb_img_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb_img_data_stream_2_empty_n : STD_LOGIC;
    signal rgb_img_data_stream_3_full_n : STD_LOGIC;
    signal rgb_img_data_stream_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb_img_data_stream_3_empty_n : STD_LOGIC;
    signal output_img_data_stre_full_n : STD_LOGIC;
    signal output_img_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_data_stre_empty_n : STD_LOGIC;
    signal output_img_data_stre_1_full_n : STD_LOGIC;
    signal output_img_data_stre_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_data_stre_1_empty_n : STD_LOGIC;
    signal output_img_data_stre_2_full_n : STD_LOGIC;
    signal output_img_data_stre_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_data_stre_2_empty_n : STD_LOGIC;
    signal output_img_data_stre_3_full_n : STD_LOGIC;
    signal output_img_data_stre_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_data_stre_3_empty_n : STD_LOGIC;
    signal xleft_c18_full_n : STD_LOGIC;
    signal xleft_c18_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xleft_c18_empty_n : STD_LOGIC;
    signal ytop_c19_full_n : STD_LOGIC;
    signal ytop_c19_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c19_empty_n : STD_LOGIC;
    signal color1_c20_full_n : STD_LOGIC;
    signal color1_c20_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c20_empty_n : STD_LOGIC;
    signal color2_c21_full_n : STD_LOGIC;
    signal color2_c21_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c21_empty_n : STD_LOGIC;
    signal color3_c22_full_n : STD_LOGIC;
    signal color3_c22_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c22_empty_n : STD_LOGIC;
    signal letter_img_1_data_st_full_n : STD_LOGIC;
    signal letter_img_1_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_1_data_st_empty_n : STD_LOGIC;
    signal letter_img_1_data_st_1_full_n : STD_LOGIC;
    signal letter_img_1_data_st_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_1_data_st_1_empty_n : STD_LOGIC;
    signal letter_img_1_data_st_2_full_n : STD_LOGIC;
    signal letter_img_1_data_st_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_1_data_st_2_empty_n : STD_LOGIC;
    signal letter_img_1_data_st_3_full_n : STD_LOGIC;
    signal letter_img_1_data_st_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_1_data_st_3_empty_n : STD_LOGIC;
    signal ytop_c23_full_n : STD_LOGIC;
    signal ytop_c23_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c23_empty_n : STD_LOGIC;
    signal color1_c24_full_n : STD_LOGIC;
    signal color1_c24_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c24_empty_n : STD_LOGIC;
    signal color2_c25_full_n : STD_LOGIC;
    signal color2_c25_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c25_empty_n : STD_LOGIC;
    signal color3_c26_full_n : STD_LOGIC;
    signal color3_c26_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c26_empty_n : STD_LOGIC;
    signal letter_img_2_data_st_full_n : STD_LOGIC;
    signal letter_img_2_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_2_data_st_empty_n : STD_LOGIC;
    signal letter_img_2_data_st_1_full_n : STD_LOGIC;
    signal letter_img_2_data_st_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_2_data_st_1_empty_n : STD_LOGIC;
    signal letter_img_2_data_st_2_full_n : STD_LOGIC;
    signal letter_img_2_data_st_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_2_data_st_2_empty_n : STD_LOGIC;
    signal letter_img_2_data_st_3_full_n : STD_LOGIC;
    signal letter_img_2_data_st_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_2_data_st_3_empty_n : STD_LOGIC;
    signal ytop_c27_full_n : STD_LOGIC;
    signal ytop_c27_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c27_empty_n : STD_LOGIC;
    signal color1_c28_full_n : STD_LOGIC;
    signal color1_c28_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c28_empty_n : STD_LOGIC;
    signal color2_c29_full_n : STD_LOGIC;
    signal color2_c29_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c29_empty_n : STD_LOGIC;
    signal color3_c30_full_n : STD_LOGIC;
    signal color3_c30_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c30_empty_n : STD_LOGIC;
    signal letter_img_3_data_st_full_n : STD_LOGIC;
    signal letter_img_3_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_3_data_st_empty_n : STD_LOGIC;
    signal letter_img_3_data_st_1_full_n : STD_LOGIC;
    signal letter_img_3_data_st_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_3_data_st_1_empty_n : STD_LOGIC;
    signal letter_img_3_data_st_2_full_n : STD_LOGIC;
    signal letter_img_3_data_st_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_3_data_st_2_empty_n : STD_LOGIC;
    signal letter_img_3_data_st_3_full_n : STD_LOGIC;
    signal letter_img_3_data_st_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_3_data_st_3_empty_n : STD_LOGIC;
    signal ytop_c31_full_n : STD_LOGIC;
    signal ytop_c31_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c31_empty_n : STD_LOGIC;
    signal color1_c32_full_n : STD_LOGIC;
    signal color1_c32_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c32_empty_n : STD_LOGIC;
    signal color2_c33_full_n : STD_LOGIC;
    signal color2_c33_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c33_empty_n : STD_LOGIC;
    signal color3_c34_full_n : STD_LOGIC;
    signal color3_c34_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c34_empty_n : STD_LOGIC;
    signal letter_img_4_data_st_full_n : STD_LOGIC;
    signal letter_img_4_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_4_data_st_empty_n : STD_LOGIC;
    signal letter_img_4_data_st_1_full_n : STD_LOGIC;
    signal letter_img_4_data_st_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_4_data_st_1_empty_n : STD_LOGIC;
    signal letter_img_4_data_st_2_full_n : STD_LOGIC;
    signal letter_img_4_data_st_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_4_data_st_2_empty_n : STD_LOGIC;
    signal letter_img_4_data_st_3_full_n : STD_LOGIC;
    signal letter_img_4_data_st_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_4_data_st_3_empty_n : STD_LOGIC;
    signal ytop_c35_full_n : STD_LOGIC;
    signal ytop_c35_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c35_empty_n : STD_LOGIC;
    signal color1_c36_full_n : STD_LOGIC;
    signal color1_c36_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c36_empty_n : STD_LOGIC;
    signal color2_c37_full_n : STD_LOGIC;
    signal color2_c37_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c37_empty_n : STD_LOGIC;
    signal color3_c38_full_n : STD_LOGIC;
    signal color3_c38_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c38_empty_n : STD_LOGIC;
    signal letter_img_5_data_st_full_n : STD_LOGIC;
    signal letter_img_5_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_5_data_st_empty_n : STD_LOGIC;
    signal letter_img_5_data_st_1_full_n : STD_LOGIC;
    signal letter_img_5_data_st_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_5_data_st_1_empty_n : STD_LOGIC;
    signal letter_img_5_data_st_2_full_n : STD_LOGIC;
    signal letter_img_5_data_st_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_5_data_st_2_empty_n : STD_LOGIC;
    signal letter_img_5_data_st_3_full_n : STD_LOGIC;
    signal letter_img_5_data_st_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_5_data_st_3_empty_n : STD_LOGIC;
    signal ytop_c39_full_n : STD_LOGIC;
    signal ytop_c39_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_c39_empty_n : STD_LOGIC;
    signal color1_c40_full_n : STD_LOGIC;
    signal color1_c40_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color1_c40_empty_n : STD_LOGIC;
    signal color2_c41_full_n : STD_LOGIC;
    signal color2_c41_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color2_c41_empty_n : STD_LOGIC;
    signal color3_c42_full_n : STD_LOGIC;
    signal color3_c42_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal color3_c42_empty_n : STD_LOGIC;
    signal letter_img_6_data_st_full_n : STD_LOGIC;
    signal letter_img_6_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_6_data_st_empty_n : STD_LOGIC;
    signal letter_img_6_data_st_1_full_n : STD_LOGIC;
    signal letter_img_6_data_st_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_6_data_st_1_empty_n : STD_LOGIC;
    signal letter_img_6_data_st_2_full_n : STD_LOGIC;
    signal letter_img_6_data_st_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_6_data_st_2_empty_n : STD_LOGIC;
    signal letter_img_6_data_st_3_full_n : STD_LOGIC;
    signal letter_img_6_data_st_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal letter_img_6_data_st_3_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_hls_rect_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_hls_rect_entry3_U0_ap_ready : STD_LOGIC;
    signal hls_rect_entry3_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_hls_rect_entry304_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_rect_entry304_U0_full_n : STD_LOGIC;
    signal start_for_hls_rect_entry304_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_rect_entry304_U0_empty_n : STD_LOGIC;
    signal start_for_Block_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_empty_n : STD_LOGIC;
    signal start_for_Add_Char1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char1_U0_full_n : STD_LOGIC;
    signal start_for_Add_Char1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char1_U0_empty_n : STD_LOGIC;
    signal start_for_Add_Char2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char2_U0_full_n : STD_LOGIC;
    signal start_for_Add_Char2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char2_U0_empty_n : STD_LOGIC;
    signal start_for_Add_Char3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char3_U0_full_n : STD_LOGIC;
    signal start_for_Add_Char3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char3_U0_empty_n : STD_LOGIC;
    signal start_for_Add_Char4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char4_U0_full_n : STD_LOGIC;
    signal start_for_Add_Char4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char4_U0_empty_n : STD_LOGIC;
    signal start_for_Add_Char5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char5_U0_full_n : STD_LOGIC;
    signal start_for_Add_Char5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char5_U0_empty_n : STD_LOGIC;
    signal start_for_Add_Char6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char6_U0_full_n : STD_LOGIC;
    signal start_for_Add_Char6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Char6_U0_empty_n : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal start_for_Add_Rectangle_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Rectangle_U0_full_n : STD_LOGIC;
    signal start_for_Add_Rectangle_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Rectangle_U0_empty_n : STD_LOGIC;
    signal Add_Rectangle_U0_start_full_n : STD_LOGIC;
    signal Add_Rectangle_U0_start_write : STD_LOGIC;
    signal Add_Char1_U0_start_full_n : STD_LOGIC;
    signal Add_Char1_U0_start_write : STD_LOGIC;
    signal Add_Char2_U0_start_full_n : STD_LOGIC;
    signal Add_Char2_U0_start_write : STD_LOGIC;
    signal Add_Char3_U0_start_full_n : STD_LOGIC;
    signal Add_Char3_U0_start_write : STD_LOGIC;
    signal Add_Char4_U0_start_full_n : STD_LOGIC;
    signal Add_Char4_U0_start_write : STD_LOGIC;
    signal Add_Char5_U0_start_full_n : STD_LOGIC;
    signal Add_Char5_U0_start_write : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component hls_rect_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        xleft_s : IN STD_LOGIC_VECTOR (15 downto 0);
        xright_s : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_s : IN STD_LOGIC_VECTOR (15 downto 0);
        ydown_s : IN STD_LOGIC_VECTOR (15 downto 0);
        color1 : IN STD_LOGIC_VECTOR (7 downto 0);
        color2 : IN STD_LOGIC_VECTOR (7 downto 0);
        color3 : IN STD_LOGIC_VECTOR (7 downto 0);
        char1 : IN STD_LOGIC_VECTOR (7 downto 0);
        char2 : IN STD_LOGIC_VECTOR (7 downto 0);
        char3 : IN STD_LOGIC_VECTOR (7 downto 0);
        char4 : IN STD_LOGIC_VECTOR (7 downto 0);
        char5 : IN STD_LOGIC_VECTOR (7 downto 0);
        char6 : IN STD_LOGIC_VECTOR (7 downto 0);
        xleft_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xleft_out_full_n : IN STD_LOGIC;
        xleft_out_write : OUT STD_LOGIC;
        xright_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xright_out_full_n : IN STD_LOGIC;
        xright_out_write : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        ydown_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ydown_out_full_n : IN STD_LOGIC;
        ydown_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC;
        char1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char1_out_full_n : IN STD_LOGIC;
        char1_out_write : OUT STD_LOGIC;
        char2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char2_out_full_n : IN STD_LOGIC;
        char2_out_write : OUT STD_LOGIC;
        char3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char3_out_full_n : IN STD_LOGIC;
        char3_out_write : OUT STD_LOGIC;
        char4_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char4_out_full_n : IN STD_LOGIC;
        char4_out_write : OUT STD_LOGIC;
        char5_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char5_out_full_n : IN STD_LOGIC;
        char5_out_write : OUT STD_LOGIC;
        char6_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char6_out_full_n : IN STD_LOGIC;
        char6_out_write : OUT STD_LOGIC );
    end component;


    component hls_rect_entry304 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        xleft_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        xleft_s_empty_n : IN STD_LOGIC;
        xleft_s_read : OUT STD_LOGIC;
        xright_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        xright_s_empty_n : IN STD_LOGIC;
        xright_s_read : OUT STD_LOGIC;
        ytop_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_s_empty_n : IN STD_LOGIC;
        ytop_s_read : OUT STD_LOGIC;
        ydown_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ydown_s_empty_n : IN STD_LOGIC;
        ydown_s_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC;
        char1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char1_empty_n : IN STD_LOGIC;
        char1_read : OUT STD_LOGIC;
        char2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char2_empty_n : IN STD_LOGIC;
        char2_read : OUT STD_LOGIC;
        char3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char3_empty_n : IN STD_LOGIC;
        char3_read : OUT STD_LOGIC;
        char4_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char4_empty_n : IN STD_LOGIC;
        char4_read : OUT STD_LOGIC;
        char5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char5_empty_n : IN STD_LOGIC;
        char5_read : OUT STD_LOGIC;
        char6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char6_empty_n : IN STD_LOGIC;
        char6_read : OUT STD_LOGIC;
        xleft_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xleft_out_full_n : IN STD_LOGIC;
        xleft_out_write : OUT STD_LOGIC;
        xleft_out1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xleft_out1_full_n : IN STD_LOGIC;
        xleft_out1_write : OUT STD_LOGIC;
        xright_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xright_out_full_n : IN STD_LOGIC;
        xright_out_write : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        ydown_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ydown_out_full_n : IN STD_LOGIC;
        ydown_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC;
        char1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char1_out_full_n : IN STD_LOGIC;
        char1_out_write : OUT STD_LOGIC;
        char2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char2_out_full_n : IN STD_LOGIC;
        char2_out_write : OUT STD_LOGIC;
        char3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char3_out_full_n : IN STD_LOGIC;
        char3_out_write : OUT STD_LOGIC;
        char4_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char4_out_full_n : IN STD_LOGIC;
        char4_out_write : OUT STD_LOGIC;
        char5_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char5_out_full_n : IN STD_LOGIC;
        char5_out_write : OUT STD_LOGIC;
        char6_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        char6_out_full_n : IN STD_LOGIC;
        char6_out_write : OUT STD_LOGIC );
    end component;


    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xleft_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        xleft_s_empty_n : IN STD_LOGIC;
        xleft_s_read : OUT STD_LOGIC;
        ch2x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ch2x_out_out_full_n : IN STD_LOGIC;
        ch2x_out_out_write : OUT STD_LOGIC;
        ch3x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ch3x_out_out_full_n : IN STD_LOGIC;
        ch3x_out_out_write : OUT STD_LOGIC;
        ch4x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ch4x_out_out_full_n : IN STD_LOGIC;
        ch4x_out_out_write : OUT STD_LOGIC;
        ch5x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ch5x_out_out_full_n : IN STD_LOGIC;
        ch5x_out_out_write : OUT STD_LOGIC;
        ch6x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ch6x_out_out_full_n : IN STD_LOGIC;
        ch6x_out_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        video_src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        video_src_TVALID : IN STD_LOGIC;
        video_src_TREADY : OUT STD_LOGIC;
        video_src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        video_src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        video_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_3_V_full_n : IN STD_LOGIC;
        img_data_stream_3_V_write : OUT STD_LOGIC );
    end component;


    component Add_Rectangle IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_3_V_empty_n : IN STD_LOGIC;
        src_data_stream_3_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_3_V_full_n : IN STD_LOGIC;
        dst_data_stream_3_V_write : OUT STD_LOGIC;
        xleft_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        xleft_empty_n : IN STD_LOGIC;
        xleft_read : OUT STD_LOGIC;
        xright_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        xright_empty_n : IN STD_LOGIC;
        xright_read : OUT STD_LOGIC;
        ytop_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_empty_n : IN STD_LOGIC;
        ytop_read : OUT STD_LOGIC;
        ydown_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ydown_empty_n : IN STD_LOGIC;
        ydown_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC;
        xleft_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xleft_out_full_n : IN STD_LOGIC;
        xleft_out_write : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC );
    end component;


    component Add_Char1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_3_V_empty_n : IN STD_LOGIC;
        src_data_stream_3_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_3_V_full_n : IN STD_LOGIC;
        dst_data_stream_3_V_write : OUT STD_LOGIC;
        x_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        x_empty_n : IN STD_LOGIC;
        x_read : OUT STD_LOGIC;
        y_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        y_empty_n : IN STD_LOGIC;
        y_read : OUT STD_LOGIC;
        chr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        chr_empty_n : IN STD_LOGIC;
        chr_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC;
        y_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        y_out_full_n : IN STD_LOGIC;
        y_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC );
    end component;


    component Add_Char2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_3_V_empty_n : IN STD_LOGIC;
        src_data_stream_3_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_3_V_full_n : IN STD_LOGIC;
        dst_data_stream_3_V_write : OUT STD_LOGIC;
        ch2x_loc_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ch2x_loc_empty_n : IN STD_LOGIC;
        ch2x_loc_read : OUT STD_LOGIC;
        ytop_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_s_empty_n : IN STD_LOGIC;
        ytop_s_read : OUT STD_LOGIC;
        char2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char2_empty_n : IN STD_LOGIC;
        char2_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC );
    end component;


    component Add_Char3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_3_V_empty_n : IN STD_LOGIC;
        src_data_stream_3_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_3_V_full_n : IN STD_LOGIC;
        dst_data_stream_3_V_write : OUT STD_LOGIC;
        ch3x_loc_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ch3x_loc_empty_n : IN STD_LOGIC;
        ch3x_loc_read : OUT STD_LOGIC;
        ytop_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_s_empty_n : IN STD_LOGIC;
        ytop_s_read : OUT STD_LOGIC;
        char3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char3_empty_n : IN STD_LOGIC;
        char3_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC );
    end component;


    component Add_Char4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_3_V_empty_n : IN STD_LOGIC;
        src_data_stream_3_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_3_V_full_n : IN STD_LOGIC;
        dst_data_stream_3_V_write : OUT STD_LOGIC;
        ch4x_loc_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ch4x_loc_empty_n : IN STD_LOGIC;
        ch4x_loc_read : OUT STD_LOGIC;
        ytop_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_s_empty_n : IN STD_LOGIC;
        ytop_s_read : OUT STD_LOGIC;
        char4_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char4_empty_n : IN STD_LOGIC;
        char4_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC );
    end component;


    component Add_Char5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_3_V_empty_n : IN STD_LOGIC;
        src_data_stream_3_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_3_V_full_n : IN STD_LOGIC;
        dst_data_stream_3_V_write : OUT STD_LOGIC;
        ch5x_loc_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ch5x_loc_empty_n : IN STD_LOGIC;
        ch5x_loc_read : OUT STD_LOGIC;
        ytop_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_s_empty_n : IN STD_LOGIC;
        ytop_s_read : OUT STD_LOGIC;
        char5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char5_empty_n : IN STD_LOGIC;
        char5_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color1_out_full_n : IN STD_LOGIC;
        color1_out_write : OUT STD_LOGIC;
        color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2_out_full_n : IN STD_LOGIC;
        color2_out_write : OUT STD_LOGIC;
        color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3_out_full_n : IN STD_LOGIC;
        color3_out_write : OUT STD_LOGIC );
    end component;


    component Add_Char6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_3_V_empty_n : IN STD_LOGIC;
        src_data_stream_3_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_3_V_full_n : IN STD_LOGIC;
        dst_data_stream_3_V_write : OUT STD_LOGIC;
        ch6x_loc_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ch6x_loc_empty_n : IN STD_LOGIC;
        ch6x_loc_read : OUT STD_LOGIC;
        ytop_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        ytop_s_empty_n : IN STD_LOGIC;
        ytop_s_read : OUT STD_LOGIC;
        char6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        char6_empty_n : IN STD_LOGIC;
        char6_read : OUT STD_LOGIC;
        color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color1_empty_n : IN STD_LOGIC;
        color1_read : OUT STD_LOGIC;
        color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color2_empty_n : IN STD_LOGIC;
        color2_read : OUT STD_LOGIC;
        color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        color3_empty_n : IN STD_LOGIC;
        color3_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        img_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_3_V_empty_n : IN STD_LOGIC;
        img_data_stream_3_V_read : OUT STD_LOGIC;
        video_dst_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        video_dst_TVALID : OUT STD_LOGIC;
        video_dst_TREADY : IN STD_LOGIC;
        video_dst_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        video_dst_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        video_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d9_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hls_recbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Block_pcud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_ChadEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_ChaeOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_ChafYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_Chag8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_Chahbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_Chaibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_RecjbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIkbM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_rect_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        xleft_s : OUT STD_LOGIC_VECTOR (15 downto 0);
        xright_s : OUT STD_LOGIC_VECTOR (15 downto 0);
        ytop_s : OUT STD_LOGIC_VECTOR (15 downto 0);
        ydown_s : OUT STD_LOGIC_VECTOR (15 downto 0);
        color1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        color2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        color3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        char1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        char2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        char3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        char4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        char5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        char6 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    hls_rect_AXILiteS_s_axi_U : component hls_rect_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        xleft_s => xleft_s,
        xright_s => xright_s,
        ytop_s => ytop_s,
        ydown_s => ydown_s,
        color1 => color1,
        color2 => color2,
        color3 => color3,
        char1 => char1,
        char2 => char2,
        char3 => char3,
        char4 => char4,
        char5 => char5,
        char6 => char6);

    hls_rect_entry3_U0 : component hls_rect_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_rect_entry3_U0_ap_start,
        start_full_n => start_for_hls_rect_entry304_U0_full_n,
        ap_done => hls_rect_entry3_U0_ap_done,
        ap_continue => hls_rect_entry3_U0_ap_continue,
        ap_idle => hls_rect_entry3_U0_ap_idle,
        ap_ready => hls_rect_entry3_U0_ap_ready,
        start_out => hls_rect_entry3_U0_start_out,
        start_write => hls_rect_entry3_U0_start_write,
        xleft_s => xleft_s,
        xright_s => xright_s,
        ytop_s => ytop_s,
        ydown_s => ydown_s,
        color1 => color1,
        color2 => color2,
        color3 => color3,
        char1 => char1,
        char2 => char2,
        char3 => char3,
        char4 => char4,
        char5 => char5,
        char6 => char6,
        xleft_out_din => hls_rect_entry3_U0_xleft_out_din,
        xleft_out_full_n => xleft_c1_full_n,
        xleft_out_write => hls_rect_entry3_U0_xleft_out_write,
        xright_out_din => hls_rect_entry3_U0_xright_out_din,
        xright_out_full_n => xright_c2_full_n,
        xright_out_write => hls_rect_entry3_U0_xright_out_write,
        ytop_out_din => hls_rect_entry3_U0_ytop_out_din,
        ytop_out_full_n => ytop_c3_full_n,
        ytop_out_write => hls_rect_entry3_U0_ytop_out_write,
        ydown_out_din => hls_rect_entry3_U0_ydown_out_din,
        ydown_out_full_n => ydown_c4_full_n,
        ydown_out_write => hls_rect_entry3_U0_ydown_out_write,
        color1_out_din => hls_rect_entry3_U0_color1_out_din,
        color1_out_full_n => color1_c5_full_n,
        color1_out_write => hls_rect_entry3_U0_color1_out_write,
        color2_out_din => hls_rect_entry3_U0_color2_out_din,
        color2_out_full_n => color2_c6_full_n,
        color2_out_write => hls_rect_entry3_U0_color2_out_write,
        color3_out_din => hls_rect_entry3_U0_color3_out_din,
        color3_out_full_n => color3_c7_full_n,
        color3_out_write => hls_rect_entry3_U0_color3_out_write,
        char1_out_din => hls_rect_entry3_U0_char1_out_din,
        char1_out_full_n => char1_c8_full_n,
        char1_out_write => hls_rect_entry3_U0_char1_out_write,
        char2_out_din => hls_rect_entry3_U0_char2_out_din,
        char2_out_full_n => char2_c9_full_n,
        char2_out_write => hls_rect_entry3_U0_char2_out_write,
        char3_out_din => hls_rect_entry3_U0_char3_out_din,
        char3_out_full_n => char3_c10_full_n,
        char3_out_write => hls_rect_entry3_U0_char3_out_write,
        char4_out_din => hls_rect_entry3_U0_char4_out_din,
        char4_out_full_n => char4_c11_full_n,
        char4_out_write => hls_rect_entry3_U0_char4_out_write,
        char5_out_din => hls_rect_entry3_U0_char5_out_din,
        char5_out_full_n => char5_c12_full_n,
        char5_out_write => hls_rect_entry3_U0_char5_out_write,
        char6_out_din => hls_rect_entry3_U0_char6_out_din,
        char6_out_full_n => char6_c13_full_n,
        char6_out_write => hls_rect_entry3_U0_char6_out_write);

    hls_rect_entry304_U0 : component hls_rect_entry304
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_rect_entry304_U0_ap_start,
        start_full_n => hls_rect_entry304_U0_start_full_n,
        ap_done => hls_rect_entry304_U0_ap_done,
        ap_continue => hls_rect_entry304_U0_ap_continue,
        ap_idle => hls_rect_entry304_U0_ap_idle,
        ap_ready => hls_rect_entry304_U0_ap_ready,
        start_out => hls_rect_entry304_U0_start_out,
        start_write => hls_rect_entry304_U0_start_write,
        xleft_s_dout => xleft_c1_dout,
        xleft_s_empty_n => xleft_c1_empty_n,
        xleft_s_read => hls_rect_entry304_U0_xleft_s_read,
        xright_s_dout => xright_c2_dout,
        xright_s_empty_n => xright_c2_empty_n,
        xright_s_read => hls_rect_entry304_U0_xright_s_read,
        ytop_s_dout => ytop_c3_dout,
        ytop_s_empty_n => ytop_c3_empty_n,
        ytop_s_read => hls_rect_entry304_U0_ytop_s_read,
        ydown_s_dout => ydown_c4_dout,
        ydown_s_empty_n => ydown_c4_empty_n,
        ydown_s_read => hls_rect_entry304_U0_ydown_s_read,
        color1_dout => color1_c5_dout,
        color1_empty_n => color1_c5_empty_n,
        color1_read => hls_rect_entry304_U0_color1_read,
        color2_dout => color2_c6_dout,
        color2_empty_n => color2_c6_empty_n,
        color2_read => hls_rect_entry304_U0_color2_read,
        color3_dout => color3_c7_dout,
        color3_empty_n => color3_c7_empty_n,
        color3_read => hls_rect_entry304_U0_color3_read,
        char1_dout => char1_c8_dout,
        char1_empty_n => char1_c8_empty_n,
        char1_read => hls_rect_entry304_U0_char1_read,
        char2_dout => char2_c9_dout,
        char2_empty_n => char2_c9_empty_n,
        char2_read => hls_rect_entry304_U0_char2_read,
        char3_dout => char3_c10_dout,
        char3_empty_n => char3_c10_empty_n,
        char3_read => hls_rect_entry304_U0_char3_read,
        char4_dout => char4_c11_dout,
        char4_empty_n => char4_c11_empty_n,
        char4_read => hls_rect_entry304_U0_char4_read,
        char5_dout => char5_c12_dout,
        char5_empty_n => char5_c12_empty_n,
        char5_read => hls_rect_entry304_U0_char5_read,
        char6_dout => char6_c13_dout,
        char6_empty_n => char6_c13_empty_n,
        char6_read => hls_rect_entry304_U0_char6_read,
        xleft_out_din => hls_rect_entry304_U0_xleft_out_din,
        xleft_out_full_n => xleft_c_full_n,
        xleft_out_write => hls_rect_entry304_U0_xleft_out_write,
        xleft_out1_din => hls_rect_entry304_U0_xleft_out1_din,
        xleft_out1_full_n => xleft_c17_full_n,
        xleft_out1_write => hls_rect_entry304_U0_xleft_out1_write,
        xright_out_din => hls_rect_entry304_U0_xright_out_din,
        xright_out_full_n => xright_c_full_n,
        xright_out_write => hls_rect_entry304_U0_xright_out_write,
        ytop_out_din => hls_rect_entry304_U0_ytop_out_din,
        ytop_out_full_n => ytop_c_full_n,
        ytop_out_write => hls_rect_entry304_U0_ytop_out_write,
        ydown_out_din => hls_rect_entry304_U0_ydown_out_din,
        ydown_out_full_n => ydown_c_full_n,
        ydown_out_write => hls_rect_entry304_U0_ydown_out_write,
        color1_out_din => hls_rect_entry304_U0_color1_out_din,
        color1_out_full_n => color1_c_full_n,
        color1_out_write => hls_rect_entry304_U0_color1_out_write,
        color2_out_din => hls_rect_entry304_U0_color2_out_din,
        color2_out_full_n => color2_c_full_n,
        color2_out_write => hls_rect_entry304_U0_color2_out_write,
        color3_out_din => hls_rect_entry304_U0_color3_out_din,
        color3_out_full_n => color3_c_full_n,
        color3_out_write => hls_rect_entry304_U0_color3_out_write,
        char1_out_din => hls_rect_entry304_U0_char1_out_din,
        char1_out_full_n => char1_c_full_n,
        char1_out_write => hls_rect_entry304_U0_char1_out_write,
        char2_out_din => hls_rect_entry304_U0_char2_out_din,
        char2_out_full_n => char2_c_full_n,
        char2_out_write => hls_rect_entry304_U0_char2_out_write,
        char3_out_din => hls_rect_entry304_U0_char3_out_din,
        char3_out_full_n => char3_c_full_n,
        char3_out_write => hls_rect_entry304_U0_char3_out_write,
        char4_out_din => hls_rect_entry304_U0_char4_out_din,
        char4_out_full_n => char4_c_full_n,
        char4_out_write => hls_rect_entry304_U0_char4_out_write,
        char5_out_din => hls_rect_entry304_U0_char5_out_din,
        char5_out_full_n => char5_c_full_n,
        char5_out_write => hls_rect_entry304_U0_char5_out_write,
        char6_out_din => hls_rect_entry304_U0_char6_out_din,
        char6_out_full_n => char6_c_full_n,
        char6_out_write => hls_rect_entry304_U0_char6_out_write);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        xleft_s_dout => xleft_c_dout,
        xleft_s_empty_n => xleft_c_empty_n,
        xleft_s_read => Block_proc_U0_xleft_s_read,
        ch2x_out_out_din => Block_proc_U0_ch2x_out_out_din,
        ch2x_out_out_full_n => ch2x_loc_c_full_n,
        ch2x_out_out_write => Block_proc_U0_ch2x_out_out_write,
        ch3x_out_out_din => Block_proc_U0_ch3x_out_out_din,
        ch3x_out_out_full_n => ch3x_loc_c_full_n,
        ch3x_out_out_write => Block_proc_U0_ch3x_out_out_write,
        ch4x_out_out_din => Block_proc_U0_ch4x_out_out_din,
        ch4x_out_out_full_n => ch4x_loc_c_full_n,
        ch4x_out_out_write => Block_proc_U0_ch4x_out_out_write,
        ch5x_out_out_din => Block_proc_U0_ch5x_out_out_din,
        ch5x_out_out_full_n => ch5x_loc_c_full_n,
        ch5x_out_out_write => Block_proc_U0_ch5x_out_out_write,
        ch6x_out_out_din => Block_proc_U0_ch6x_out_out_din,
        ch6x_out_out_full_n => ch6x_loc_c_full_n,
        ch6x_out_out_write => Block_proc_U0_ch6x_out_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_Add_Rectangle_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        video_src_TDATA => video_src_TDATA,
        video_src_TVALID => video_src_TVALID,
        video_src_TREADY => AXIvideo2Mat_U0_video_src_TREADY,
        video_src_TKEEP => video_src_TKEEP,
        video_src_TSTRB => video_src_TSTRB,
        video_src_TUSER => video_src_TUSER,
        video_src_TLAST => video_src_TLAST,
        video_src_TID => video_src_TID,
        video_src_TDEST => video_src_TDEST,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => rgb_img_data_stream_s_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => rgb_img_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => rgb_img_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_data_stream_3_V_din => AXIvideo2Mat_U0_img_data_stream_3_V_din,
        img_data_stream_3_V_full_n => rgb_img_data_stream_3_full_n,
        img_data_stream_3_V_write => AXIvideo2Mat_U0_img_data_stream_3_V_write);

    Add_Rectangle_U0 : component Add_Rectangle
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Rectangle_U0_ap_start,
        ap_done => Add_Rectangle_U0_ap_done,
        ap_continue => Add_Rectangle_U0_ap_continue,
        ap_idle => Add_Rectangle_U0_ap_idle,
        ap_ready => Add_Rectangle_U0_ap_ready,
        src_data_stream_0_V_dout => rgb_img_data_stream_s_dout,
        src_data_stream_0_V_empty_n => rgb_img_data_stream_s_empty_n,
        src_data_stream_0_V_read => Add_Rectangle_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => rgb_img_data_stream_1_dout,
        src_data_stream_1_V_empty_n => rgb_img_data_stream_1_empty_n,
        src_data_stream_1_V_read => Add_Rectangle_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => rgb_img_data_stream_2_dout,
        src_data_stream_2_V_empty_n => rgb_img_data_stream_2_empty_n,
        src_data_stream_2_V_read => Add_Rectangle_U0_src_data_stream_2_V_read,
        src_data_stream_3_V_dout => rgb_img_data_stream_3_dout,
        src_data_stream_3_V_empty_n => rgb_img_data_stream_3_empty_n,
        src_data_stream_3_V_read => Add_Rectangle_U0_src_data_stream_3_V_read,
        dst_data_stream_0_V_din => Add_Rectangle_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => output_img_data_stre_full_n,
        dst_data_stream_0_V_write => Add_Rectangle_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Rectangle_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => output_img_data_stre_1_full_n,
        dst_data_stream_1_V_write => Add_Rectangle_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Rectangle_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => output_img_data_stre_2_full_n,
        dst_data_stream_2_V_write => Add_Rectangle_U0_dst_data_stream_2_V_write,
        dst_data_stream_3_V_din => Add_Rectangle_U0_dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n => output_img_data_stre_3_full_n,
        dst_data_stream_3_V_write => Add_Rectangle_U0_dst_data_stream_3_V_write,
        xleft_dout => xleft_c17_dout,
        xleft_empty_n => xleft_c17_empty_n,
        xleft_read => Add_Rectangle_U0_xleft_read,
        xright_dout => xright_c_dout,
        xright_empty_n => xright_c_empty_n,
        xright_read => Add_Rectangle_U0_xright_read,
        ytop_dout => ytop_c_dout,
        ytop_empty_n => ytop_c_empty_n,
        ytop_read => Add_Rectangle_U0_ytop_read,
        ydown_dout => ydown_c_dout,
        ydown_empty_n => ydown_c_empty_n,
        ydown_read => Add_Rectangle_U0_ydown_read,
        color1_dout => color1_c_dout,
        color1_empty_n => color1_c_empty_n,
        color1_read => Add_Rectangle_U0_color1_read,
        color2_dout => color2_c_dout,
        color2_empty_n => color2_c_empty_n,
        color2_read => Add_Rectangle_U0_color2_read,
        color3_dout => color3_c_dout,
        color3_empty_n => color3_c_empty_n,
        color3_read => Add_Rectangle_U0_color3_read,
        xleft_out_din => Add_Rectangle_U0_xleft_out_din,
        xleft_out_full_n => xleft_c18_full_n,
        xleft_out_write => Add_Rectangle_U0_xleft_out_write,
        ytop_out_din => Add_Rectangle_U0_ytop_out_din,
        ytop_out_full_n => ytop_c19_full_n,
        ytop_out_write => Add_Rectangle_U0_ytop_out_write,
        color1_out_din => Add_Rectangle_U0_color1_out_din,
        color1_out_full_n => color1_c20_full_n,
        color1_out_write => Add_Rectangle_U0_color1_out_write,
        color2_out_din => Add_Rectangle_U0_color2_out_din,
        color2_out_full_n => color2_c21_full_n,
        color2_out_write => Add_Rectangle_U0_color2_out_write,
        color3_out_din => Add_Rectangle_U0_color3_out_din,
        color3_out_full_n => color3_c22_full_n,
        color3_out_write => Add_Rectangle_U0_color3_out_write);

    Add_Char1_U0 : component Add_Char1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Char1_U0_ap_start,
        ap_done => Add_Char1_U0_ap_done,
        ap_continue => Add_Char1_U0_ap_continue,
        ap_idle => Add_Char1_U0_ap_idle,
        ap_ready => Add_Char1_U0_ap_ready,
        src_data_stream_0_V_dout => output_img_data_stre_dout,
        src_data_stream_0_V_empty_n => output_img_data_stre_empty_n,
        src_data_stream_0_V_read => Add_Char1_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => output_img_data_stre_1_dout,
        src_data_stream_1_V_empty_n => output_img_data_stre_1_empty_n,
        src_data_stream_1_V_read => Add_Char1_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => output_img_data_stre_2_dout,
        src_data_stream_2_V_empty_n => output_img_data_stre_2_empty_n,
        src_data_stream_2_V_read => Add_Char1_U0_src_data_stream_2_V_read,
        src_data_stream_3_V_dout => output_img_data_stre_3_dout,
        src_data_stream_3_V_empty_n => output_img_data_stre_3_empty_n,
        src_data_stream_3_V_read => Add_Char1_U0_src_data_stream_3_V_read,
        dst_data_stream_0_V_din => Add_Char1_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => letter_img_1_data_st_full_n,
        dst_data_stream_0_V_write => Add_Char1_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Char1_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => letter_img_1_data_st_1_full_n,
        dst_data_stream_1_V_write => Add_Char1_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Char1_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => letter_img_1_data_st_2_full_n,
        dst_data_stream_2_V_write => Add_Char1_U0_dst_data_stream_2_V_write,
        dst_data_stream_3_V_din => Add_Char1_U0_dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n => letter_img_1_data_st_3_full_n,
        dst_data_stream_3_V_write => Add_Char1_U0_dst_data_stream_3_V_write,
        x_dout => xleft_c18_dout,
        x_empty_n => xleft_c18_empty_n,
        x_read => Add_Char1_U0_x_read,
        y_dout => ytop_c19_dout,
        y_empty_n => ytop_c19_empty_n,
        y_read => Add_Char1_U0_y_read,
        chr_dout => char1_c_dout,
        chr_empty_n => char1_c_empty_n,
        chr_read => Add_Char1_U0_chr_read,
        color1_dout => color1_c20_dout,
        color1_empty_n => color1_c20_empty_n,
        color1_read => Add_Char1_U0_color1_read,
        color2_dout => color2_c21_dout,
        color2_empty_n => color2_c21_empty_n,
        color2_read => Add_Char1_U0_color2_read,
        color3_dout => color3_c22_dout,
        color3_empty_n => color3_c22_empty_n,
        color3_read => Add_Char1_U0_color3_read,
        y_out_din => Add_Char1_U0_y_out_din,
        y_out_full_n => ytop_c23_full_n,
        y_out_write => Add_Char1_U0_y_out_write,
        color1_out_din => Add_Char1_U0_color1_out_din,
        color1_out_full_n => color1_c24_full_n,
        color1_out_write => Add_Char1_U0_color1_out_write,
        color2_out_din => Add_Char1_U0_color2_out_din,
        color2_out_full_n => color2_c25_full_n,
        color2_out_write => Add_Char1_U0_color2_out_write,
        color3_out_din => Add_Char1_U0_color3_out_din,
        color3_out_full_n => color3_c26_full_n,
        color3_out_write => Add_Char1_U0_color3_out_write);

    Add_Char2_U0 : component Add_Char2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Char2_U0_ap_start,
        ap_done => Add_Char2_U0_ap_done,
        ap_continue => Add_Char2_U0_ap_continue,
        ap_idle => Add_Char2_U0_ap_idle,
        ap_ready => Add_Char2_U0_ap_ready,
        src_data_stream_0_V_dout => letter_img_1_data_st_dout,
        src_data_stream_0_V_empty_n => letter_img_1_data_st_empty_n,
        src_data_stream_0_V_read => Add_Char2_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => letter_img_1_data_st_1_dout,
        src_data_stream_1_V_empty_n => letter_img_1_data_st_1_empty_n,
        src_data_stream_1_V_read => Add_Char2_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => letter_img_1_data_st_2_dout,
        src_data_stream_2_V_empty_n => letter_img_1_data_st_2_empty_n,
        src_data_stream_2_V_read => Add_Char2_U0_src_data_stream_2_V_read,
        src_data_stream_3_V_dout => letter_img_1_data_st_3_dout,
        src_data_stream_3_V_empty_n => letter_img_1_data_st_3_empty_n,
        src_data_stream_3_V_read => Add_Char2_U0_src_data_stream_3_V_read,
        dst_data_stream_0_V_din => Add_Char2_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => letter_img_2_data_st_full_n,
        dst_data_stream_0_V_write => Add_Char2_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Char2_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => letter_img_2_data_st_1_full_n,
        dst_data_stream_1_V_write => Add_Char2_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Char2_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => letter_img_2_data_st_2_full_n,
        dst_data_stream_2_V_write => Add_Char2_U0_dst_data_stream_2_V_write,
        dst_data_stream_3_V_din => Add_Char2_U0_dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n => letter_img_2_data_st_3_full_n,
        dst_data_stream_3_V_write => Add_Char2_U0_dst_data_stream_3_V_write,
        ch2x_loc_dout => ch2x_loc_c_dout,
        ch2x_loc_empty_n => ch2x_loc_c_empty_n,
        ch2x_loc_read => Add_Char2_U0_ch2x_loc_read,
        ytop_s_dout => ytop_c23_dout,
        ytop_s_empty_n => ytop_c23_empty_n,
        ytop_s_read => Add_Char2_U0_ytop_s_read,
        char2_dout => char2_c_dout,
        char2_empty_n => char2_c_empty_n,
        char2_read => Add_Char2_U0_char2_read,
        color1_dout => color1_c24_dout,
        color1_empty_n => color1_c24_empty_n,
        color1_read => Add_Char2_U0_color1_read,
        color2_dout => color2_c25_dout,
        color2_empty_n => color2_c25_empty_n,
        color2_read => Add_Char2_U0_color2_read,
        color3_dout => color3_c26_dout,
        color3_empty_n => color3_c26_empty_n,
        color3_read => Add_Char2_U0_color3_read,
        ytop_out_din => Add_Char2_U0_ytop_out_din,
        ytop_out_full_n => ytop_c27_full_n,
        ytop_out_write => Add_Char2_U0_ytop_out_write,
        color1_out_din => Add_Char2_U0_color1_out_din,
        color1_out_full_n => color1_c28_full_n,
        color1_out_write => Add_Char2_U0_color1_out_write,
        color2_out_din => Add_Char2_U0_color2_out_din,
        color2_out_full_n => color2_c29_full_n,
        color2_out_write => Add_Char2_U0_color2_out_write,
        color3_out_din => Add_Char2_U0_color3_out_din,
        color3_out_full_n => color3_c30_full_n,
        color3_out_write => Add_Char2_U0_color3_out_write);

    Add_Char3_U0 : component Add_Char3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Char3_U0_ap_start,
        ap_done => Add_Char3_U0_ap_done,
        ap_continue => Add_Char3_U0_ap_continue,
        ap_idle => Add_Char3_U0_ap_idle,
        ap_ready => Add_Char3_U0_ap_ready,
        src_data_stream_0_V_dout => letter_img_2_data_st_dout,
        src_data_stream_0_V_empty_n => letter_img_2_data_st_empty_n,
        src_data_stream_0_V_read => Add_Char3_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => letter_img_2_data_st_1_dout,
        src_data_stream_1_V_empty_n => letter_img_2_data_st_1_empty_n,
        src_data_stream_1_V_read => Add_Char3_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => letter_img_2_data_st_2_dout,
        src_data_stream_2_V_empty_n => letter_img_2_data_st_2_empty_n,
        src_data_stream_2_V_read => Add_Char3_U0_src_data_stream_2_V_read,
        src_data_stream_3_V_dout => letter_img_2_data_st_3_dout,
        src_data_stream_3_V_empty_n => letter_img_2_data_st_3_empty_n,
        src_data_stream_3_V_read => Add_Char3_U0_src_data_stream_3_V_read,
        dst_data_stream_0_V_din => Add_Char3_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => letter_img_3_data_st_full_n,
        dst_data_stream_0_V_write => Add_Char3_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Char3_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => letter_img_3_data_st_1_full_n,
        dst_data_stream_1_V_write => Add_Char3_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Char3_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => letter_img_3_data_st_2_full_n,
        dst_data_stream_2_V_write => Add_Char3_U0_dst_data_stream_2_V_write,
        dst_data_stream_3_V_din => Add_Char3_U0_dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n => letter_img_3_data_st_3_full_n,
        dst_data_stream_3_V_write => Add_Char3_U0_dst_data_stream_3_V_write,
        ch3x_loc_dout => ch3x_loc_c_dout,
        ch3x_loc_empty_n => ch3x_loc_c_empty_n,
        ch3x_loc_read => Add_Char3_U0_ch3x_loc_read,
        ytop_s_dout => ytop_c27_dout,
        ytop_s_empty_n => ytop_c27_empty_n,
        ytop_s_read => Add_Char3_U0_ytop_s_read,
        char3_dout => char3_c_dout,
        char3_empty_n => char3_c_empty_n,
        char3_read => Add_Char3_U0_char3_read,
        color1_dout => color1_c28_dout,
        color1_empty_n => color1_c28_empty_n,
        color1_read => Add_Char3_U0_color1_read,
        color2_dout => color2_c29_dout,
        color2_empty_n => color2_c29_empty_n,
        color2_read => Add_Char3_U0_color2_read,
        color3_dout => color3_c30_dout,
        color3_empty_n => color3_c30_empty_n,
        color3_read => Add_Char3_U0_color3_read,
        ytop_out_din => Add_Char3_U0_ytop_out_din,
        ytop_out_full_n => ytop_c31_full_n,
        ytop_out_write => Add_Char3_U0_ytop_out_write,
        color1_out_din => Add_Char3_U0_color1_out_din,
        color1_out_full_n => color1_c32_full_n,
        color1_out_write => Add_Char3_U0_color1_out_write,
        color2_out_din => Add_Char3_U0_color2_out_din,
        color2_out_full_n => color2_c33_full_n,
        color2_out_write => Add_Char3_U0_color2_out_write,
        color3_out_din => Add_Char3_U0_color3_out_din,
        color3_out_full_n => color3_c34_full_n,
        color3_out_write => Add_Char3_U0_color3_out_write);

    Add_Char4_U0 : component Add_Char4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Char4_U0_ap_start,
        ap_done => Add_Char4_U0_ap_done,
        ap_continue => Add_Char4_U0_ap_continue,
        ap_idle => Add_Char4_U0_ap_idle,
        ap_ready => Add_Char4_U0_ap_ready,
        src_data_stream_0_V_dout => letter_img_3_data_st_dout,
        src_data_stream_0_V_empty_n => letter_img_3_data_st_empty_n,
        src_data_stream_0_V_read => Add_Char4_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => letter_img_3_data_st_1_dout,
        src_data_stream_1_V_empty_n => letter_img_3_data_st_1_empty_n,
        src_data_stream_1_V_read => Add_Char4_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => letter_img_3_data_st_2_dout,
        src_data_stream_2_V_empty_n => letter_img_3_data_st_2_empty_n,
        src_data_stream_2_V_read => Add_Char4_U0_src_data_stream_2_V_read,
        src_data_stream_3_V_dout => letter_img_3_data_st_3_dout,
        src_data_stream_3_V_empty_n => letter_img_3_data_st_3_empty_n,
        src_data_stream_3_V_read => Add_Char4_U0_src_data_stream_3_V_read,
        dst_data_stream_0_V_din => Add_Char4_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => letter_img_4_data_st_full_n,
        dst_data_stream_0_V_write => Add_Char4_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Char4_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => letter_img_4_data_st_1_full_n,
        dst_data_stream_1_V_write => Add_Char4_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Char4_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => letter_img_4_data_st_2_full_n,
        dst_data_stream_2_V_write => Add_Char4_U0_dst_data_stream_2_V_write,
        dst_data_stream_3_V_din => Add_Char4_U0_dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n => letter_img_4_data_st_3_full_n,
        dst_data_stream_3_V_write => Add_Char4_U0_dst_data_stream_3_V_write,
        ch4x_loc_dout => ch4x_loc_c_dout,
        ch4x_loc_empty_n => ch4x_loc_c_empty_n,
        ch4x_loc_read => Add_Char4_U0_ch4x_loc_read,
        ytop_s_dout => ytop_c31_dout,
        ytop_s_empty_n => ytop_c31_empty_n,
        ytop_s_read => Add_Char4_U0_ytop_s_read,
        char4_dout => char4_c_dout,
        char4_empty_n => char4_c_empty_n,
        char4_read => Add_Char4_U0_char4_read,
        color1_dout => color1_c32_dout,
        color1_empty_n => color1_c32_empty_n,
        color1_read => Add_Char4_U0_color1_read,
        color2_dout => color2_c33_dout,
        color2_empty_n => color2_c33_empty_n,
        color2_read => Add_Char4_U0_color2_read,
        color3_dout => color3_c34_dout,
        color3_empty_n => color3_c34_empty_n,
        color3_read => Add_Char4_U0_color3_read,
        ytop_out_din => Add_Char4_U0_ytop_out_din,
        ytop_out_full_n => ytop_c35_full_n,
        ytop_out_write => Add_Char4_U0_ytop_out_write,
        color1_out_din => Add_Char4_U0_color1_out_din,
        color1_out_full_n => color1_c36_full_n,
        color1_out_write => Add_Char4_U0_color1_out_write,
        color2_out_din => Add_Char4_U0_color2_out_din,
        color2_out_full_n => color2_c37_full_n,
        color2_out_write => Add_Char4_U0_color2_out_write,
        color3_out_din => Add_Char4_U0_color3_out_din,
        color3_out_full_n => color3_c38_full_n,
        color3_out_write => Add_Char4_U0_color3_out_write);

    Add_Char5_U0 : component Add_Char5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Char5_U0_ap_start,
        ap_done => Add_Char5_U0_ap_done,
        ap_continue => Add_Char5_U0_ap_continue,
        ap_idle => Add_Char5_U0_ap_idle,
        ap_ready => Add_Char5_U0_ap_ready,
        src_data_stream_0_V_dout => letter_img_4_data_st_dout,
        src_data_stream_0_V_empty_n => letter_img_4_data_st_empty_n,
        src_data_stream_0_V_read => Add_Char5_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => letter_img_4_data_st_1_dout,
        src_data_stream_1_V_empty_n => letter_img_4_data_st_1_empty_n,
        src_data_stream_1_V_read => Add_Char5_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => letter_img_4_data_st_2_dout,
        src_data_stream_2_V_empty_n => letter_img_4_data_st_2_empty_n,
        src_data_stream_2_V_read => Add_Char5_U0_src_data_stream_2_V_read,
        src_data_stream_3_V_dout => letter_img_4_data_st_3_dout,
        src_data_stream_3_V_empty_n => letter_img_4_data_st_3_empty_n,
        src_data_stream_3_V_read => Add_Char5_U0_src_data_stream_3_V_read,
        dst_data_stream_0_V_din => Add_Char5_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => letter_img_5_data_st_full_n,
        dst_data_stream_0_V_write => Add_Char5_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Char5_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => letter_img_5_data_st_1_full_n,
        dst_data_stream_1_V_write => Add_Char5_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Char5_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => letter_img_5_data_st_2_full_n,
        dst_data_stream_2_V_write => Add_Char5_U0_dst_data_stream_2_V_write,
        dst_data_stream_3_V_din => Add_Char5_U0_dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n => letter_img_5_data_st_3_full_n,
        dst_data_stream_3_V_write => Add_Char5_U0_dst_data_stream_3_V_write,
        ch5x_loc_dout => ch5x_loc_c_dout,
        ch5x_loc_empty_n => ch5x_loc_c_empty_n,
        ch5x_loc_read => Add_Char5_U0_ch5x_loc_read,
        ytop_s_dout => ytop_c35_dout,
        ytop_s_empty_n => ytop_c35_empty_n,
        ytop_s_read => Add_Char5_U0_ytop_s_read,
        char5_dout => char5_c_dout,
        char5_empty_n => char5_c_empty_n,
        char5_read => Add_Char5_U0_char5_read,
        color1_dout => color1_c36_dout,
        color1_empty_n => color1_c36_empty_n,
        color1_read => Add_Char5_U0_color1_read,
        color2_dout => color2_c37_dout,
        color2_empty_n => color2_c37_empty_n,
        color2_read => Add_Char5_U0_color2_read,
        color3_dout => color3_c38_dout,
        color3_empty_n => color3_c38_empty_n,
        color3_read => Add_Char5_U0_color3_read,
        ytop_out_din => Add_Char5_U0_ytop_out_din,
        ytop_out_full_n => ytop_c39_full_n,
        ytop_out_write => Add_Char5_U0_ytop_out_write,
        color1_out_din => Add_Char5_U0_color1_out_din,
        color1_out_full_n => color1_c40_full_n,
        color1_out_write => Add_Char5_U0_color1_out_write,
        color2_out_din => Add_Char5_U0_color2_out_din,
        color2_out_full_n => color2_c41_full_n,
        color2_out_write => Add_Char5_U0_color2_out_write,
        color3_out_din => Add_Char5_U0_color3_out_din,
        color3_out_full_n => color3_c42_full_n,
        color3_out_write => Add_Char5_U0_color3_out_write);

    Add_Char6_U0 : component Add_Char6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Char6_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => Add_Char6_U0_ap_done,
        ap_continue => Add_Char6_U0_ap_continue,
        ap_idle => Add_Char6_U0_ap_idle,
        ap_ready => Add_Char6_U0_ap_ready,
        start_out => Add_Char6_U0_start_out,
        start_write => Add_Char6_U0_start_write,
        src_data_stream_0_V_dout => letter_img_5_data_st_dout,
        src_data_stream_0_V_empty_n => letter_img_5_data_st_empty_n,
        src_data_stream_0_V_read => Add_Char6_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => letter_img_5_data_st_1_dout,
        src_data_stream_1_V_empty_n => letter_img_5_data_st_1_empty_n,
        src_data_stream_1_V_read => Add_Char6_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => letter_img_5_data_st_2_dout,
        src_data_stream_2_V_empty_n => letter_img_5_data_st_2_empty_n,
        src_data_stream_2_V_read => Add_Char6_U0_src_data_stream_2_V_read,
        src_data_stream_3_V_dout => letter_img_5_data_st_3_dout,
        src_data_stream_3_V_empty_n => letter_img_5_data_st_3_empty_n,
        src_data_stream_3_V_read => Add_Char6_U0_src_data_stream_3_V_read,
        dst_data_stream_0_V_din => Add_Char6_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => letter_img_6_data_st_full_n,
        dst_data_stream_0_V_write => Add_Char6_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Char6_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => letter_img_6_data_st_1_full_n,
        dst_data_stream_1_V_write => Add_Char6_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Char6_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => letter_img_6_data_st_2_full_n,
        dst_data_stream_2_V_write => Add_Char6_U0_dst_data_stream_2_V_write,
        dst_data_stream_3_V_din => Add_Char6_U0_dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n => letter_img_6_data_st_3_full_n,
        dst_data_stream_3_V_write => Add_Char6_U0_dst_data_stream_3_V_write,
        ch6x_loc_dout => ch6x_loc_c_dout,
        ch6x_loc_empty_n => ch6x_loc_c_empty_n,
        ch6x_loc_read => Add_Char6_U0_ch6x_loc_read,
        ytop_s_dout => ytop_c39_dout,
        ytop_s_empty_n => ytop_c39_empty_n,
        ytop_s_read => Add_Char6_U0_ytop_s_read,
        char6_dout => char6_c_dout,
        char6_empty_n => char6_c_empty_n,
        char6_read => Add_Char6_U0_char6_read,
        color1_dout => color1_c40_dout,
        color1_empty_n => color1_c40_empty_n,
        color1_read => Add_Char6_U0_color1_read,
        color2_dout => color2_c41_dout,
        color2_empty_n => color2_c41_empty_n,
        color2_read => Add_Char6_U0_color2_read,
        color3_dout => color3_c42_dout,
        color3_empty_n => color3_c42_empty_n,
        color3_read => Add_Char6_U0_color3_read);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => letter_img_6_data_st_dout,
        img_data_stream_0_V_empty_n => letter_img_6_data_st_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => letter_img_6_data_st_1_dout,
        img_data_stream_1_V_empty_n => letter_img_6_data_st_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => letter_img_6_data_st_2_dout,
        img_data_stream_2_V_empty_n => letter_img_6_data_st_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        img_data_stream_3_V_dout => letter_img_6_data_st_3_dout,
        img_data_stream_3_V_empty_n => letter_img_6_data_st_3_empty_n,
        img_data_stream_3_V_read => Mat2AXIvideo_U0_img_data_stream_3_V_read,
        video_dst_TDATA => Mat2AXIvideo_U0_video_dst_TDATA,
        video_dst_TVALID => Mat2AXIvideo_U0_video_dst_TVALID,
        video_dst_TREADY => video_dst_TREADY,
        video_dst_TKEEP => Mat2AXIvideo_U0_video_dst_TKEEP,
        video_dst_TSTRB => Mat2AXIvideo_U0_video_dst_TSTRB,
        video_dst_TUSER => Mat2AXIvideo_U0_video_dst_TUSER,
        video_dst_TLAST => Mat2AXIvideo_U0_video_dst_TLAST,
        video_dst_TID => Mat2AXIvideo_U0_video_dst_TID,
        video_dst_TDEST => Mat2AXIvideo_U0_video_dst_TDEST);

    xleft_c1_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_xleft_out_din,
        if_full_n => xleft_c1_full_n,
        if_write => hls_rect_entry3_U0_xleft_out_write,
        if_dout => xleft_c1_dout,
        if_empty_n => xleft_c1_empty_n,
        if_read => hls_rect_entry304_U0_xleft_s_read);

    xright_c2_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_xright_out_din,
        if_full_n => xright_c2_full_n,
        if_write => hls_rect_entry3_U0_xright_out_write,
        if_dout => xright_c2_dout,
        if_empty_n => xright_c2_empty_n,
        if_read => hls_rect_entry304_U0_xright_s_read);

    ytop_c3_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_ytop_out_din,
        if_full_n => ytop_c3_full_n,
        if_write => hls_rect_entry3_U0_ytop_out_write,
        if_dout => ytop_c3_dout,
        if_empty_n => ytop_c3_empty_n,
        if_read => hls_rect_entry304_U0_ytop_s_read);

    ydown_c4_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_ydown_out_din,
        if_full_n => ydown_c4_full_n,
        if_write => hls_rect_entry3_U0_ydown_out_write,
        if_dout => ydown_c4_dout,
        if_empty_n => ydown_c4_empty_n,
        if_read => hls_rect_entry304_U0_ydown_s_read);

    color1_c5_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_color1_out_din,
        if_full_n => color1_c5_full_n,
        if_write => hls_rect_entry3_U0_color1_out_write,
        if_dout => color1_c5_dout,
        if_empty_n => color1_c5_empty_n,
        if_read => hls_rect_entry304_U0_color1_read);

    color2_c6_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_color2_out_din,
        if_full_n => color2_c6_full_n,
        if_write => hls_rect_entry3_U0_color2_out_write,
        if_dout => color2_c6_dout,
        if_empty_n => color2_c6_empty_n,
        if_read => hls_rect_entry304_U0_color2_read);

    color3_c7_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_color3_out_din,
        if_full_n => color3_c7_full_n,
        if_write => hls_rect_entry3_U0_color3_out_write,
        if_dout => color3_c7_dout,
        if_empty_n => color3_c7_empty_n,
        if_read => hls_rect_entry304_U0_color3_read);

    char1_c8_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_char1_out_din,
        if_full_n => char1_c8_full_n,
        if_write => hls_rect_entry3_U0_char1_out_write,
        if_dout => char1_c8_dout,
        if_empty_n => char1_c8_empty_n,
        if_read => hls_rect_entry304_U0_char1_read);

    char2_c9_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_char2_out_din,
        if_full_n => char2_c9_full_n,
        if_write => hls_rect_entry3_U0_char2_out_write,
        if_dout => char2_c9_dout,
        if_empty_n => char2_c9_empty_n,
        if_read => hls_rect_entry304_U0_char2_read);

    char3_c10_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_char3_out_din,
        if_full_n => char3_c10_full_n,
        if_write => hls_rect_entry3_U0_char3_out_write,
        if_dout => char3_c10_dout,
        if_empty_n => char3_c10_empty_n,
        if_read => hls_rect_entry304_U0_char3_read);

    char4_c11_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_char4_out_din,
        if_full_n => char4_c11_full_n,
        if_write => hls_rect_entry3_U0_char4_out_write,
        if_dout => char4_c11_dout,
        if_empty_n => char4_c11_empty_n,
        if_read => hls_rect_entry304_U0_char4_read);

    char5_c12_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_char5_out_din,
        if_full_n => char5_c12_full_n,
        if_write => hls_rect_entry3_U0_char5_out_write,
        if_dout => char5_c12_dout,
        if_empty_n => char5_c12_empty_n,
        if_read => hls_rect_entry304_U0_char5_read);

    char6_c13_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry3_U0_char6_out_din,
        if_full_n => char6_c13_full_n,
        if_write => hls_rect_entry3_U0_char6_out_write,
        if_dout => char6_c13_dout,
        if_empty_n => char6_c13_empty_n,
        if_read => hls_rect_entry304_U0_char6_read);

    xleft_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_xleft_out_din,
        if_full_n => xleft_c_full_n,
        if_write => hls_rect_entry304_U0_xleft_out_write,
        if_dout => xleft_c_dout,
        if_empty_n => xleft_c_empty_n,
        if_read => Block_proc_U0_xleft_s_read);

    xleft_c17_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_xleft_out1_din,
        if_full_n => xleft_c17_full_n,
        if_write => hls_rect_entry304_U0_xleft_out1_write,
        if_dout => xleft_c17_dout,
        if_empty_n => xleft_c17_empty_n,
        if_read => Add_Rectangle_U0_xleft_read);

    xright_c_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_xright_out_din,
        if_full_n => xright_c_full_n,
        if_write => hls_rect_entry304_U0_xright_out_write,
        if_dout => xright_c_dout,
        if_empty_n => xright_c_empty_n,
        if_read => Add_Rectangle_U0_xright_read);

    ytop_c_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_ytop_out_din,
        if_full_n => ytop_c_full_n,
        if_write => hls_rect_entry304_U0_ytop_out_write,
        if_dout => ytop_c_dout,
        if_empty_n => ytop_c_empty_n,
        if_read => Add_Rectangle_U0_ytop_read);

    ydown_c_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_ydown_out_din,
        if_full_n => ydown_c_full_n,
        if_write => hls_rect_entry304_U0_ydown_out_write,
        if_dout => ydown_c_dout,
        if_empty_n => ydown_c_empty_n,
        if_read => Add_Rectangle_U0_ydown_read);

    color1_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_color1_out_din,
        if_full_n => color1_c_full_n,
        if_write => hls_rect_entry304_U0_color1_out_write,
        if_dout => color1_c_dout,
        if_empty_n => color1_c_empty_n,
        if_read => Add_Rectangle_U0_color1_read);

    color2_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_color2_out_din,
        if_full_n => color2_c_full_n,
        if_write => hls_rect_entry304_U0_color2_out_write,
        if_dout => color2_c_dout,
        if_empty_n => color2_c_empty_n,
        if_read => Add_Rectangle_U0_color2_read);

    color3_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_color3_out_din,
        if_full_n => color3_c_full_n,
        if_write => hls_rect_entry304_U0_color3_out_write,
        if_dout => color3_c_dout,
        if_empty_n => color3_c_empty_n,
        if_read => Add_Rectangle_U0_color3_read);

    char1_c_U : component fifo_w8_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_char1_out_din,
        if_full_n => char1_c_full_n,
        if_write => hls_rect_entry304_U0_char1_out_write,
        if_dout => char1_c_dout,
        if_empty_n => char1_c_empty_n,
        if_read => Add_Char1_U0_chr_read);

    char2_c_U : component fifo_w8_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_char2_out_din,
        if_full_n => char2_c_full_n,
        if_write => hls_rect_entry304_U0_char2_out_write,
        if_dout => char2_c_dout,
        if_empty_n => char2_c_empty_n,
        if_read => Add_Char2_U0_char2_read);

    char3_c_U : component fifo_w8_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_char3_out_din,
        if_full_n => char3_c_full_n,
        if_write => hls_rect_entry304_U0_char3_out_write,
        if_dout => char3_c_dout,
        if_empty_n => char3_c_empty_n,
        if_read => Add_Char3_U0_char3_read);

    char4_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_char4_out_din,
        if_full_n => char4_c_full_n,
        if_write => hls_rect_entry304_U0_char4_out_write,
        if_dout => char4_c_dout,
        if_empty_n => char4_c_empty_n,
        if_read => Add_Char4_U0_char4_read);

    char5_c_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_char5_out_din,
        if_full_n => char5_c_full_n,
        if_write => hls_rect_entry304_U0_char5_out_write,
        if_dout => char5_c_dout,
        if_empty_n => char5_c_empty_n,
        if_read => Add_Char5_U0_char5_read);

    char6_c_U : component fifo_w8_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_rect_entry304_U0_char6_out_din,
        if_full_n => char6_c_full_n,
        if_write => hls_rect_entry304_U0_char6_out_write,
        if_dout => char6_c_dout,
        if_empty_n => char6_c_empty_n,
        if_read => Add_Char6_U0_char6_read);

    ch2x_loc_c_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_ch2x_out_out_din,
        if_full_n => ch2x_loc_c_full_n,
        if_write => Block_proc_U0_ch2x_out_out_write,
        if_dout => ch2x_loc_c_dout,
        if_empty_n => ch2x_loc_c_empty_n,
        if_read => Add_Char2_U0_ch2x_loc_read);

    ch3x_loc_c_U : component fifo_w16_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_ch3x_out_out_din,
        if_full_n => ch3x_loc_c_full_n,
        if_write => Block_proc_U0_ch3x_out_out_write,
        if_dout => ch3x_loc_c_dout,
        if_empty_n => ch3x_loc_c_empty_n,
        if_read => Add_Char3_U0_ch3x_loc_read);

    ch4x_loc_c_U : component fifo_w16_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_ch4x_out_out_din,
        if_full_n => ch4x_loc_c_full_n,
        if_write => Block_proc_U0_ch4x_out_out_write,
        if_dout => ch4x_loc_c_dout,
        if_empty_n => ch4x_loc_c_empty_n,
        if_read => Add_Char4_U0_ch4x_loc_read);

    ch5x_loc_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_ch5x_out_out_din,
        if_full_n => ch5x_loc_c_full_n,
        if_write => Block_proc_U0_ch5x_out_out_write,
        if_dout => ch5x_loc_c_dout,
        if_empty_n => ch5x_loc_c_empty_n,
        if_read => Add_Char5_U0_ch5x_loc_read);

    ch6x_loc_c_U : component fifo_w16_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_ch6x_out_out_din,
        if_full_n => ch6x_loc_c_full_n,
        if_write => Block_proc_U0_ch6x_out_out_write,
        if_dout => ch6x_loc_c_dout,
        if_empty_n => ch6x_loc_c_empty_n,
        if_read => Add_Char6_U0_ch6x_loc_read);

    rgb_img_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => rgb_img_data_stream_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => rgb_img_data_stream_s_dout,
        if_empty_n => rgb_img_data_stream_s_empty_n,
        if_read => Add_Rectangle_U0_src_data_stream_0_V_read);

    rgb_img_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => rgb_img_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => rgb_img_data_stream_1_dout,
        if_empty_n => rgb_img_data_stream_1_empty_n,
        if_read => Add_Rectangle_U0_src_data_stream_1_V_read);

    rgb_img_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => rgb_img_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => rgb_img_data_stream_2_dout,
        if_empty_n => rgb_img_data_stream_2_empty_n,
        if_read => Add_Rectangle_U0_src_data_stream_2_V_read);

    rgb_img_data_stream_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_3_V_din,
        if_full_n => rgb_img_data_stream_3_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_3_V_write,
        if_dout => rgb_img_data_stream_3_dout,
        if_empty_n => rgb_img_data_stream_3_empty_n,
        if_read => Add_Rectangle_U0_src_data_stream_3_V_read);

    output_img_data_stre_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_dst_data_stream_0_V_din,
        if_full_n => output_img_data_stre_full_n,
        if_write => Add_Rectangle_U0_dst_data_stream_0_V_write,
        if_dout => output_img_data_stre_dout,
        if_empty_n => output_img_data_stre_empty_n,
        if_read => Add_Char1_U0_src_data_stream_0_V_read);

    output_img_data_stre_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_dst_data_stream_1_V_din,
        if_full_n => output_img_data_stre_1_full_n,
        if_write => Add_Rectangle_U0_dst_data_stream_1_V_write,
        if_dout => output_img_data_stre_1_dout,
        if_empty_n => output_img_data_stre_1_empty_n,
        if_read => Add_Char1_U0_src_data_stream_1_V_read);

    output_img_data_stre_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_dst_data_stream_2_V_din,
        if_full_n => output_img_data_stre_2_full_n,
        if_write => Add_Rectangle_U0_dst_data_stream_2_V_write,
        if_dout => output_img_data_stre_2_dout,
        if_empty_n => output_img_data_stre_2_empty_n,
        if_read => Add_Char1_U0_src_data_stream_2_V_read);

    output_img_data_stre_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_dst_data_stream_3_V_din,
        if_full_n => output_img_data_stre_3_full_n,
        if_write => Add_Rectangle_U0_dst_data_stream_3_V_write,
        if_dout => output_img_data_stre_3_dout,
        if_empty_n => output_img_data_stre_3_empty_n,
        if_read => Add_Char1_U0_src_data_stream_3_V_read);

    xleft_c18_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_xleft_out_din,
        if_full_n => xleft_c18_full_n,
        if_write => Add_Rectangle_U0_xleft_out_write,
        if_dout => xleft_c18_dout,
        if_empty_n => xleft_c18_empty_n,
        if_read => Add_Char1_U0_x_read);

    ytop_c19_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_ytop_out_din,
        if_full_n => ytop_c19_full_n,
        if_write => Add_Rectangle_U0_ytop_out_write,
        if_dout => ytop_c19_dout,
        if_empty_n => ytop_c19_empty_n,
        if_read => Add_Char1_U0_y_read);

    color1_c20_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_color1_out_din,
        if_full_n => color1_c20_full_n,
        if_write => Add_Rectangle_U0_color1_out_write,
        if_dout => color1_c20_dout,
        if_empty_n => color1_c20_empty_n,
        if_read => Add_Char1_U0_color1_read);

    color2_c21_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_color2_out_din,
        if_full_n => color2_c21_full_n,
        if_write => Add_Rectangle_U0_color2_out_write,
        if_dout => color2_c21_dout,
        if_empty_n => color2_c21_empty_n,
        if_read => Add_Char1_U0_color2_read);

    color3_c22_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_color3_out_din,
        if_full_n => color3_c22_full_n,
        if_write => Add_Rectangle_U0_color3_out_write,
        if_dout => color3_c22_dout,
        if_empty_n => color3_c22_empty_n,
        if_read => Add_Char1_U0_color3_read);

    letter_img_1_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_dst_data_stream_0_V_din,
        if_full_n => letter_img_1_data_st_full_n,
        if_write => Add_Char1_U0_dst_data_stream_0_V_write,
        if_dout => letter_img_1_data_st_dout,
        if_empty_n => letter_img_1_data_st_empty_n,
        if_read => Add_Char2_U0_src_data_stream_0_V_read);

    letter_img_1_data_st_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_dst_data_stream_1_V_din,
        if_full_n => letter_img_1_data_st_1_full_n,
        if_write => Add_Char1_U0_dst_data_stream_1_V_write,
        if_dout => letter_img_1_data_st_1_dout,
        if_empty_n => letter_img_1_data_st_1_empty_n,
        if_read => Add_Char2_U0_src_data_stream_1_V_read);

    letter_img_1_data_st_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_dst_data_stream_2_V_din,
        if_full_n => letter_img_1_data_st_2_full_n,
        if_write => Add_Char1_U0_dst_data_stream_2_V_write,
        if_dout => letter_img_1_data_st_2_dout,
        if_empty_n => letter_img_1_data_st_2_empty_n,
        if_read => Add_Char2_U0_src_data_stream_2_V_read);

    letter_img_1_data_st_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_dst_data_stream_3_V_din,
        if_full_n => letter_img_1_data_st_3_full_n,
        if_write => Add_Char1_U0_dst_data_stream_3_V_write,
        if_dout => letter_img_1_data_st_3_dout,
        if_empty_n => letter_img_1_data_st_3_empty_n,
        if_read => Add_Char2_U0_src_data_stream_3_V_read);

    ytop_c23_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_y_out_din,
        if_full_n => ytop_c23_full_n,
        if_write => Add_Char1_U0_y_out_write,
        if_dout => ytop_c23_dout,
        if_empty_n => ytop_c23_empty_n,
        if_read => Add_Char2_U0_ytop_s_read);

    color1_c24_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_color1_out_din,
        if_full_n => color1_c24_full_n,
        if_write => Add_Char1_U0_color1_out_write,
        if_dout => color1_c24_dout,
        if_empty_n => color1_c24_empty_n,
        if_read => Add_Char2_U0_color1_read);

    color2_c25_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_color2_out_din,
        if_full_n => color2_c25_full_n,
        if_write => Add_Char1_U0_color2_out_write,
        if_dout => color2_c25_dout,
        if_empty_n => color2_c25_empty_n,
        if_read => Add_Char2_U0_color2_read);

    color3_c26_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char1_U0_color3_out_din,
        if_full_n => color3_c26_full_n,
        if_write => Add_Char1_U0_color3_out_write,
        if_dout => color3_c26_dout,
        if_empty_n => color3_c26_empty_n,
        if_read => Add_Char2_U0_color3_read);

    letter_img_2_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_dst_data_stream_0_V_din,
        if_full_n => letter_img_2_data_st_full_n,
        if_write => Add_Char2_U0_dst_data_stream_0_V_write,
        if_dout => letter_img_2_data_st_dout,
        if_empty_n => letter_img_2_data_st_empty_n,
        if_read => Add_Char3_U0_src_data_stream_0_V_read);

    letter_img_2_data_st_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_dst_data_stream_1_V_din,
        if_full_n => letter_img_2_data_st_1_full_n,
        if_write => Add_Char2_U0_dst_data_stream_1_V_write,
        if_dout => letter_img_2_data_st_1_dout,
        if_empty_n => letter_img_2_data_st_1_empty_n,
        if_read => Add_Char3_U0_src_data_stream_1_V_read);

    letter_img_2_data_st_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_dst_data_stream_2_V_din,
        if_full_n => letter_img_2_data_st_2_full_n,
        if_write => Add_Char2_U0_dst_data_stream_2_V_write,
        if_dout => letter_img_2_data_st_2_dout,
        if_empty_n => letter_img_2_data_st_2_empty_n,
        if_read => Add_Char3_U0_src_data_stream_2_V_read);

    letter_img_2_data_st_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_dst_data_stream_3_V_din,
        if_full_n => letter_img_2_data_st_3_full_n,
        if_write => Add_Char2_U0_dst_data_stream_3_V_write,
        if_dout => letter_img_2_data_st_3_dout,
        if_empty_n => letter_img_2_data_st_3_empty_n,
        if_read => Add_Char3_U0_src_data_stream_3_V_read);

    ytop_c27_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_ytop_out_din,
        if_full_n => ytop_c27_full_n,
        if_write => Add_Char2_U0_ytop_out_write,
        if_dout => ytop_c27_dout,
        if_empty_n => ytop_c27_empty_n,
        if_read => Add_Char3_U0_ytop_s_read);

    color1_c28_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_color1_out_din,
        if_full_n => color1_c28_full_n,
        if_write => Add_Char2_U0_color1_out_write,
        if_dout => color1_c28_dout,
        if_empty_n => color1_c28_empty_n,
        if_read => Add_Char3_U0_color1_read);

    color2_c29_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_color2_out_din,
        if_full_n => color2_c29_full_n,
        if_write => Add_Char2_U0_color2_out_write,
        if_dout => color2_c29_dout,
        if_empty_n => color2_c29_empty_n,
        if_read => Add_Char3_U0_color2_read);

    color3_c30_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char2_U0_color3_out_din,
        if_full_n => color3_c30_full_n,
        if_write => Add_Char2_U0_color3_out_write,
        if_dout => color3_c30_dout,
        if_empty_n => color3_c30_empty_n,
        if_read => Add_Char3_U0_color3_read);

    letter_img_3_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_dst_data_stream_0_V_din,
        if_full_n => letter_img_3_data_st_full_n,
        if_write => Add_Char3_U0_dst_data_stream_0_V_write,
        if_dout => letter_img_3_data_st_dout,
        if_empty_n => letter_img_3_data_st_empty_n,
        if_read => Add_Char4_U0_src_data_stream_0_V_read);

    letter_img_3_data_st_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_dst_data_stream_1_V_din,
        if_full_n => letter_img_3_data_st_1_full_n,
        if_write => Add_Char3_U0_dst_data_stream_1_V_write,
        if_dout => letter_img_3_data_st_1_dout,
        if_empty_n => letter_img_3_data_st_1_empty_n,
        if_read => Add_Char4_U0_src_data_stream_1_V_read);

    letter_img_3_data_st_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_dst_data_stream_2_V_din,
        if_full_n => letter_img_3_data_st_2_full_n,
        if_write => Add_Char3_U0_dst_data_stream_2_V_write,
        if_dout => letter_img_3_data_st_2_dout,
        if_empty_n => letter_img_3_data_st_2_empty_n,
        if_read => Add_Char4_U0_src_data_stream_2_V_read);

    letter_img_3_data_st_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_dst_data_stream_3_V_din,
        if_full_n => letter_img_3_data_st_3_full_n,
        if_write => Add_Char3_U0_dst_data_stream_3_V_write,
        if_dout => letter_img_3_data_st_3_dout,
        if_empty_n => letter_img_3_data_st_3_empty_n,
        if_read => Add_Char4_U0_src_data_stream_3_V_read);

    ytop_c31_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_ytop_out_din,
        if_full_n => ytop_c31_full_n,
        if_write => Add_Char3_U0_ytop_out_write,
        if_dout => ytop_c31_dout,
        if_empty_n => ytop_c31_empty_n,
        if_read => Add_Char4_U0_ytop_s_read);

    color1_c32_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_color1_out_din,
        if_full_n => color1_c32_full_n,
        if_write => Add_Char3_U0_color1_out_write,
        if_dout => color1_c32_dout,
        if_empty_n => color1_c32_empty_n,
        if_read => Add_Char4_U0_color1_read);

    color2_c33_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_color2_out_din,
        if_full_n => color2_c33_full_n,
        if_write => Add_Char3_U0_color2_out_write,
        if_dout => color2_c33_dout,
        if_empty_n => color2_c33_empty_n,
        if_read => Add_Char4_U0_color2_read);

    color3_c34_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char3_U0_color3_out_din,
        if_full_n => color3_c34_full_n,
        if_write => Add_Char3_U0_color3_out_write,
        if_dout => color3_c34_dout,
        if_empty_n => color3_c34_empty_n,
        if_read => Add_Char4_U0_color3_read);

    letter_img_4_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_dst_data_stream_0_V_din,
        if_full_n => letter_img_4_data_st_full_n,
        if_write => Add_Char4_U0_dst_data_stream_0_V_write,
        if_dout => letter_img_4_data_st_dout,
        if_empty_n => letter_img_4_data_st_empty_n,
        if_read => Add_Char5_U0_src_data_stream_0_V_read);

    letter_img_4_data_st_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_dst_data_stream_1_V_din,
        if_full_n => letter_img_4_data_st_1_full_n,
        if_write => Add_Char4_U0_dst_data_stream_1_V_write,
        if_dout => letter_img_4_data_st_1_dout,
        if_empty_n => letter_img_4_data_st_1_empty_n,
        if_read => Add_Char5_U0_src_data_stream_1_V_read);

    letter_img_4_data_st_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_dst_data_stream_2_V_din,
        if_full_n => letter_img_4_data_st_2_full_n,
        if_write => Add_Char4_U0_dst_data_stream_2_V_write,
        if_dout => letter_img_4_data_st_2_dout,
        if_empty_n => letter_img_4_data_st_2_empty_n,
        if_read => Add_Char5_U0_src_data_stream_2_V_read);

    letter_img_4_data_st_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_dst_data_stream_3_V_din,
        if_full_n => letter_img_4_data_st_3_full_n,
        if_write => Add_Char4_U0_dst_data_stream_3_V_write,
        if_dout => letter_img_4_data_st_3_dout,
        if_empty_n => letter_img_4_data_st_3_empty_n,
        if_read => Add_Char5_U0_src_data_stream_3_V_read);

    ytop_c35_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_ytop_out_din,
        if_full_n => ytop_c35_full_n,
        if_write => Add_Char4_U0_ytop_out_write,
        if_dout => ytop_c35_dout,
        if_empty_n => ytop_c35_empty_n,
        if_read => Add_Char5_U0_ytop_s_read);

    color1_c36_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_color1_out_din,
        if_full_n => color1_c36_full_n,
        if_write => Add_Char4_U0_color1_out_write,
        if_dout => color1_c36_dout,
        if_empty_n => color1_c36_empty_n,
        if_read => Add_Char5_U0_color1_read);

    color2_c37_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_color2_out_din,
        if_full_n => color2_c37_full_n,
        if_write => Add_Char4_U0_color2_out_write,
        if_dout => color2_c37_dout,
        if_empty_n => color2_c37_empty_n,
        if_read => Add_Char5_U0_color2_read);

    color3_c38_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char4_U0_color3_out_din,
        if_full_n => color3_c38_full_n,
        if_write => Add_Char4_U0_color3_out_write,
        if_dout => color3_c38_dout,
        if_empty_n => color3_c38_empty_n,
        if_read => Add_Char5_U0_color3_read);

    letter_img_5_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_dst_data_stream_0_V_din,
        if_full_n => letter_img_5_data_st_full_n,
        if_write => Add_Char5_U0_dst_data_stream_0_V_write,
        if_dout => letter_img_5_data_st_dout,
        if_empty_n => letter_img_5_data_st_empty_n,
        if_read => Add_Char6_U0_src_data_stream_0_V_read);

    letter_img_5_data_st_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_dst_data_stream_1_V_din,
        if_full_n => letter_img_5_data_st_1_full_n,
        if_write => Add_Char5_U0_dst_data_stream_1_V_write,
        if_dout => letter_img_5_data_st_1_dout,
        if_empty_n => letter_img_5_data_st_1_empty_n,
        if_read => Add_Char6_U0_src_data_stream_1_V_read);

    letter_img_5_data_st_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_dst_data_stream_2_V_din,
        if_full_n => letter_img_5_data_st_2_full_n,
        if_write => Add_Char5_U0_dst_data_stream_2_V_write,
        if_dout => letter_img_5_data_st_2_dout,
        if_empty_n => letter_img_5_data_st_2_empty_n,
        if_read => Add_Char6_U0_src_data_stream_2_V_read);

    letter_img_5_data_st_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_dst_data_stream_3_V_din,
        if_full_n => letter_img_5_data_st_3_full_n,
        if_write => Add_Char5_U0_dst_data_stream_3_V_write,
        if_dout => letter_img_5_data_st_3_dout,
        if_empty_n => letter_img_5_data_st_3_empty_n,
        if_read => Add_Char6_U0_src_data_stream_3_V_read);

    ytop_c39_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_ytop_out_din,
        if_full_n => ytop_c39_full_n,
        if_write => Add_Char5_U0_ytop_out_write,
        if_dout => ytop_c39_dout,
        if_empty_n => ytop_c39_empty_n,
        if_read => Add_Char6_U0_ytop_s_read);

    color1_c40_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_color1_out_din,
        if_full_n => color1_c40_full_n,
        if_write => Add_Char5_U0_color1_out_write,
        if_dout => color1_c40_dout,
        if_empty_n => color1_c40_empty_n,
        if_read => Add_Char6_U0_color1_read);

    color2_c41_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_color2_out_din,
        if_full_n => color2_c41_full_n,
        if_write => Add_Char5_U0_color2_out_write,
        if_dout => color2_c41_dout,
        if_empty_n => color2_c41_empty_n,
        if_read => Add_Char6_U0_color2_read);

    color3_c42_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char5_U0_color3_out_din,
        if_full_n => color3_c42_full_n,
        if_write => Add_Char5_U0_color3_out_write,
        if_dout => color3_c42_dout,
        if_empty_n => color3_c42_empty_n,
        if_read => Add_Char6_U0_color3_read);

    letter_img_6_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char6_U0_dst_data_stream_0_V_din,
        if_full_n => letter_img_6_data_st_full_n,
        if_write => Add_Char6_U0_dst_data_stream_0_V_write,
        if_dout => letter_img_6_data_st_dout,
        if_empty_n => letter_img_6_data_st_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    letter_img_6_data_st_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char6_U0_dst_data_stream_1_V_din,
        if_full_n => letter_img_6_data_st_1_full_n,
        if_write => Add_Char6_U0_dst_data_stream_1_V_write,
        if_dout => letter_img_6_data_st_1_dout,
        if_empty_n => letter_img_6_data_st_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    letter_img_6_data_st_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char6_U0_dst_data_stream_2_V_din,
        if_full_n => letter_img_6_data_st_2_full_n,
        if_write => Add_Char6_U0_dst_data_stream_2_V_write,
        if_dout => letter_img_6_data_st_2_dout,
        if_empty_n => letter_img_6_data_st_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    letter_img_6_data_st_3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Char6_U0_dst_data_stream_3_V_din,
        if_full_n => letter_img_6_data_st_3_full_n,
        if_write => Add_Char6_U0_dst_data_stream_3_V_write,
        if_dout => letter_img_6_data_st_3_dout,
        if_empty_n => letter_img_6_data_st_3_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_3_V_read);

    start_for_hls_recbkb_U : component start_for_hls_recbkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_rect_entry304_U0_din,
        if_full_n => start_for_hls_rect_entry304_U0_full_n,
        if_write => hls_rect_entry3_U0_start_write,
        if_dout => start_for_hls_rect_entry304_U0_dout,
        if_empty_n => start_for_hls_rect_entry304_U0_empty_n,
        if_read => hls_rect_entry304_U0_ap_ready);

    start_for_Block_pcud_U : component start_for_Block_pcud
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_proc_U0_din,
        if_full_n => start_for_Block_proc_U0_full_n,
        if_write => hls_rect_entry304_U0_start_write,
        if_dout => start_for_Block_proc_U0_dout,
        if_empty_n => start_for_Block_proc_U0_empty_n,
        if_read => Block_proc_U0_ap_ready);

    start_for_Add_ChadEe_U : component start_for_Add_ChadEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Char1_U0_din,
        if_full_n => start_for_Add_Char1_U0_full_n,
        if_write => hls_rect_entry304_U0_start_write,
        if_dout => start_for_Add_Char1_U0_dout,
        if_empty_n => start_for_Add_Char1_U0_empty_n,
        if_read => Add_Char1_U0_ap_ready);

    start_for_Add_ChaeOg_U : component start_for_Add_ChaeOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Char2_U0_din,
        if_full_n => start_for_Add_Char2_U0_full_n,
        if_write => hls_rect_entry304_U0_start_write,
        if_dout => start_for_Add_Char2_U0_dout,
        if_empty_n => start_for_Add_Char2_U0_empty_n,
        if_read => Add_Char2_U0_ap_ready);

    start_for_Add_ChafYi_U : component start_for_Add_ChafYi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Char3_U0_din,
        if_full_n => start_for_Add_Char3_U0_full_n,
        if_write => hls_rect_entry304_U0_start_write,
        if_dout => start_for_Add_Char3_U0_dout,
        if_empty_n => start_for_Add_Char3_U0_empty_n,
        if_read => Add_Char3_U0_ap_ready);

    start_for_Add_Chag8j_U : component start_for_Add_Chag8j
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Char4_U0_din,
        if_full_n => start_for_Add_Char4_U0_full_n,
        if_write => hls_rect_entry304_U0_start_write,
        if_dout => start_for_Add_Char4_U0_dout,
        if_empty_n => start_for_Add_Char4_U0_empty_n,
        if_read => Add_Char4_U0_ap_ready);

    start_for_Add_Chahbi_U : component start_for_Add_Chahbi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Char5_U0_din,
        if_full_n => start_for_Add_Char5_U0_full_n,
        if_write => hls_rect_entry304_U0_start_write,
        if_dout => start_for_Add_Char5_U0_dout,
        if_empty_n => start_for_Add_Char5_U0_empty_n,
        if_read => Add_Char5_U0_ap_ready);

    start_for_Add_Chaibs_U : component start_for_Add_Chaibs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Char6_U0_din,
        if_full_n => start_for_Add_Char6_U0_full_n,
        if_write => hls_rect_entry304_U0_start_write,
        if_dout => start_for_Add_Char6_U0_dout,
        if_empty_n => start_for_Add_Char6_U0_empty_n,
        if_read => Add_Char6_U0_ap_ready);

    start_for_Add_RecjbC_U : component start_for_Add_RecjbC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Rectangle_U0_din,
        if_full_n => start_for_Add_Rectangle_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_Add_Rectangle_U0_dout,
        if_empty_n => start_for_Add_Rectangle_U0_empty_n,
        if_read => Add_Rectangle_U0_ap_ready);

    start_for_Mat2AXIkbM_U : component start_for_Mat2AXIkbM
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Add_Char6_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_hls_rect_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_hls_rect_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_hls_rect_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_hls_rect_entry3_U0_ap_ready <= ap_sync_hls_rect_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    hls_rect_entry3_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((hls_rect_entry3_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                hls_rect_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(hls_rect_entry3_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((hls_rect_entry3_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                hls_rect_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(hls_rect_entry3_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Add_Char1_U0_ap_continue <= ap_const_logic_1;
    Add_Char1_U0_ap_start <= start_for_Add_Char1_U0_empty_n;
    Add_Char1_U0_start_full_n <= ap_const_logic_1;
    Add_Char1_U0_start_write <= ap_const_logic_0;
    Add_Char2_U0_ap_continue <= ap_const_logic_1;
    Add_Char2_U0_ap_start <= start_for_Add_Char2_U0_empty_n;
    Add_Char2_U0_start_full_n <= ap_const_logic_1;
    Add_Char2_U0_start_write <= ap_const_logic_0;
    Add_Char3_U0_ap_continue <= ap_const_logic_1;
    Add_Char3_U0_ap_start <= start_for_Add_Char3_U0_empty_n;
    Add_Char3_U0_start_full_n <= ap_const_logic_1;
    Add_Char3_U0_start_write <= ap_const_logic_0;
    Add_Char4_U0_ap_continue <= ap_const_logic_1;
    Add_Char4_U0_ap_start <= start_for_Add_Char4_U0_empty_n;
    Add_Char4_U0_start_full_n <= ap_const_logic_1;
    Add_Char4_U0_start_write <= ap_const_logic_0;
    Add_Char5_U0_ap_continue <= ap_const_logic_1;
    Add_Char5_U0_ap_start <= start_for_Add_Char5_U0_empty_n;
    Add_Char5_U0_start_full_n <= ap_const_logic_1;
    Add_Char5_U0_start_write <= ap_const_logic_0;
    Add_Char6_U0_ap_continue <= ap_const_logic_1;
    Add_Char6_U0_ap_start <= start_for_Add_Char6_U0_empty_n;
    Add_Rectangle_U0_ap_continue <= ap_const_logic_1;
    Add_Rectangle_U0_ap_start <= start_for_Add_Rectangle_U0_empty_n;
    Add_Rectangle_U0_start_full_n <= ap_const_logic_1;
    Add_Rectangle_U0_start_write <= ap_const_logic_0;
    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= start_for_Block_proc_U0_empty_n;
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (hls_rect_entry3_U0_ap_idle and hls_rect_entry304_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Block_proc_U0_ap_idle and Add_Rectangle_U0_ap_idle and Add_Char6_U0_ap_idle and Add_Char5_U0_ap_idle and Add_Char4_U0_ap_idle and Add_Char3_U0_ap_idle and Add_Char2_U0_ap_idle and Add_Char1_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_hls_rect_entry3_U0_ap_ready <= (hls_rect_entry3_U0_ap_ready or ap_sync_reg_hls_rect_entry3_U0_ap_ready);
    ap_sync_ready <= (ap_sync_hls_rect_entry3_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    hls_rect_entry304_U0_ap_continue <= ap_const_logic_1;
    hls_rect_entry304_U0_ap_start <= start_for_hls_rect_entry304_U0_empty_n;
    hls_rect_entry304_U0_start_full_n <= (start_for_Block_proc_U0_full_n and start_for_Add_Char6_U0_full_n and start_for_Add_Char5_U0_full_n and start_for_Add_Char4_U0_full_n and start_for_Add_Char3_U0_full_n and start_for_Add_Char2_U0_full_n and start_for_Add_Char1_U0_full_n);
    hls_rect_entry3_U0_ap_continue <= ap_const_logic_1;
    hls_rect_entry3_U0_ap_start <= ((ap_sync_reg_hls_rect_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_Add_Char1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Add_Char2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Add_Char3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Add_Char4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Add_Char5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Add_Char6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Add_Rectangle_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Block_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hls_rect_entry304_U0_din <= (0=>ap_const_logic_1, others=>'-');
    video_dst_TDATA <= Mat2AXIvideo_U0_video_dst_TDATA;
    video_dst_TDEST <= Mat2AXIvideo_U0_video_dst_TDEST;
    video_dst_TID <= Mat2AXIvideo_U0_video_dst_TID;
    video_dst_TKEEP <= Mat2AXIvideo_U0_video_dst_TKEEP;
    video_dst_TLAST <= Mat2AXIvideo_U0_video_dst_TLAST;
    video_dst_TSTRB <= Mat2AXIvideo_U0_video_dst_TSTRB;
    video_dst_TUSER <= Mat2AXIvideo_U0_video_dst_TUSER;
    video_dst_TVALID <= Mat2AXIvideo_U0_video_dst_TVALID;
    video_src_TREADY <= AXIvideo2Mat_U0_video_src_TREADY;
end behav;
