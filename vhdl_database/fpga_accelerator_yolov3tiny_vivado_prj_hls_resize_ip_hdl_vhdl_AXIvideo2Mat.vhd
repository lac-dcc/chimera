-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    video_src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    video_src_TVALID : IN STD_LOGIC;
    video_src_TREADY : OUT STD_LOGIC;
    video_src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    video_src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    video_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC;
    img_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_3_V_full_n : IN STD_LOGIC;
    img_data_stream_3_V_write : OUT STD_LOGIC );
end;


architecture behav of AXIvideo2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal video_src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln73_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_eol_2_phi_fu_324_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln73_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_data_stream_2_V_blk_n : STD_LOGIC;
    signal img_data_stream_3_V_blk_n : STD_LOGIC;
    signal eol_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_2_reg_249 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_0_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_430 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_V_fu_356_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_446 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_predicate_op51_read_state5 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_V_fu_368_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_469 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_474 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_479 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal axi_last_V_3_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_0_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_data_V_3_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V_0_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_216 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_eol_phi_fu_230_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axi_data_V_1_phi_fu_241_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_eol_0_phi_fu_264_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter0_axi_last_V_2_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_289_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_p_Val2_s_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal eol_2_reg_321 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_user_V_fu_341_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal video_src_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal video_src_TVALID_int : STD_LOGIC;
    signal video_src_TREADY_int : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal video_src_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_AXI_video_strm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal video_src_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_AXI_video_strm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_apdone_blk : STD_LOGIC;
    signal video_src_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal video_src_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_apdone_blk : STD_LOGIC;
    signal video_src_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal video_src_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_condition_169 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_AXI_video_strm_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => video_src_TDATA,
        vld_in => video_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_data_V_U_ack_in,
        data_out => video_src_TDATA_int,
        vld_out => video_src_TVALID_int,
        ack_out => video_src_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_data_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => video_src_TKEEP,
        vld_in => video_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_keep_V_U_ack_in,
        data_out => video_src_TKEEP_int,
        vld_out => regslice_both_AXI_video_strm_V_keep_V_U_vld_out,
        ack_out => video_src_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => video_src_TSTRB,
        vld_in => video_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_strb_V_U_ack_in,
        data_out => video_src_TSTRB_int,
        vld_out => regslice_both_AXI_video_strm_V_strb_V_U_vld_out,
        ack_out => video_src_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => video_src_TUSER,
        vld_in => video_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_user_V_U_ack_in,
        data_out => video_src_TUSER_int,
        vld_out => regslice_both_AXI_video_strm_V_user_V_U_vld_out,
        ack_out => video_src_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_user_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => video_src_TLAST,
        vld_in => video_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_last_V_U_ack_in,
        data_out => video_src_TLAST_int,
        vld_out => regslice_both_AXI_video_strm_V_last_V_U_vld_out,
        ack_out => video_src_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_last_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => video_src_TID,
        vld_in => video_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_id_V_U_ack_in,
        data_out => video_src_TID_int,
        vld_out => regslice_both_AXI_video_strm_V_id_V_U_vld_out,
        ack_out => video_src_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_id_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => video_src_TDEST,
        vld_in => video_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_dest_V_U_ack_in,
        data_out => video_src_TDEST_int,
        vld_out => regslice_both_AXI_video_strm_V_dest_V_U_vld_out,
        ack_out => video_src_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_350_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln71_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln71_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_data_V_0_reg_206 <= tmp_data_V_reg_422;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_data_V_0_reg_206 <= axi_data_V_3_reg_309;
            end if; 
        end if;
    end process;

    axi_data_V_1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                axi_data_V_1_reg_238 <= p_Val2_s_reg_285;
            elsif (((icmp_ln71_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axi_data_V_1_reg_238 <= axi_data_V_0_reg_206;
            end if; 
        end if;
    end process;

    axi_data_V_3_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_data_V_3_reg_309 <= axi_data_V_1_reg_238;
            elsif ((not(((eol_2_reg_321 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_0))) and (eol_2_reg_321 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                axi_data_V_3_reg_309 <= video_src_TDATA_int;
            end if; 
        end if;
    end process;

    axi_last_V_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_last_V_0_reg_196 <= tmp_last_V_reg_430;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_last_V_0_reg_196 <= axi_last_V_3_reg_297;
            end if; 
        end if;
    end process;

    axi_last_V_2_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_169)) then
                if (((or_ln76_fu_377_p2 = ap_const_lv1_1) and (icmp_ln73_fu_362_p2 = ap_const_lv1_0))) then 
                    axi_last_V_2_reg_272 <= ap_phi_mux_eol_phi_fu_230_p4;
                elsif (((or_ln76_fu_377_p2 = ap_const_lv1_0) and (icmp_ln73_fu_362_p2 = ap_const_lv1_0))) then 
                    axi_last_V_2_reg_272 <= video_src_TLAST_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    axi_last_V_2_reg_272 <= ap_phi_reg_pp1_iter0_axi_last_V_2_reg_272;
                end if;
            end if; 
        end if;
    end process;

    axi_last_V_3_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_last_V_3_reg_297 <= eol_reg_227;
            elsif ((not(((eol_2_reg_321 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_0))) and (eol_2_reg_321 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                axi_last_V_3_reg_297 <= video_src_TLAST_int;
            end if; 
        end if;
    end process;

    eol_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                eol_0_reg_260 <= axi_last_V_2_reg_272;
            elsif (((icmp_ln71_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_0_reg_260 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    eol_2_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                eol_2_reg_321 <= eol_0_reg_260;
            elsif ((not(((eol_2_reg_321 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_0))) and (eol_2_reg_321 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                eol_2_reg_321 <= video_src_TLAST_int;
            end if; 
        end if;
    end process;

    eol_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                eol_reg_227 <= axi_last_V_2_reg_272;
            elsif (((icmp_ln71_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_reg_227 <= axi_last_V_0_reg_196;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_169)) then
                if (((or_ln76_fu_377_p2 = ap_const_lv1_1) and (icmp_ln73_fu_362_p2 = ap_const_lv1_0))) then 
                    p_Val2_s_reg_285 <= ap_phi_mux_axi_data_V_1_phi_fu_241_p4;
                elsif (((or_ln76_fu_377_p2 = ap_const_lv1_0) and (icmp_ln73_fu_362_p2 = ap_const_lv1_0))) then 
                    p_Val2_s_reg_285 <= video_src_TDATA_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_Val2_s_reg_285 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_285;
                end if;
            end if; 
        end if;
    end process;

    sof_1_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                sof_1_fu_146 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_fu_146 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    t_V_2_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                t_V_2_reg_249 <= j_V_fu_368_p2;
            elsif (((icmp_ln71_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_V_2_reg_249 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_reg_216 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                t_V_reg_216 <= i_V_reg_446;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_V_reg_446 <= i_V_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln73_reg_451 <= icmp_ln73_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_1_reg_474 <= ap_phi_mux_p_Val2_s_phi_fu_289_p4(23 downto 16);
                tmp_2_reg_479 <= ap_phi_mux_p_Val2_s_phi_fu_289_p4(31 downto 24);
                tmp_9_reg_469 <= ap_phi_mux_p_Val2_s_phi_fu_289_p4(15 downto 8);
                tmp_reg_464 <= tmp_fu_383_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((video_src_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_422 <= video_src_TDATA_int;
                tmp_last_V_reg_430 <= video_src_TLAST_int;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln73_fu_362_p2, ap_CS_fsm_state8, ap_phi_mux_eol_2_phi_fu_324_p4, icmp_ln71_fu_350_p2, ap_CS_fsm_state4, ap_block_pp1_stage0_subdone, eol_2_reg_321, tmp_user_V_fu_341_p1, video_src_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_user_V_fu_341_p1 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((video_src_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_user_V_fu_341_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln73_fu_362_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln73_fu_362_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((eol_2_reg_321 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_0))) and (eol_2_reg_321 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not(((eol_2_reg_321 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_phi_mux_eol_2_phi_fu_324_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, img_data_stream_3_V_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, ap_predicate_op51_read_state5, video_src_TVALID_int)
    begin
                ap_block_pp1_stage0_01001 <= (((video_src_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op51_read_state5 = ap_const_boolean_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_3_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, img_data_stream_3_V_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, ap_predicate_op51_read_state5, video_src_TVALID_int)
    begin
                ap_block_pp1_stage0_11001 <= (((video_src_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op51_read_state5 = ap_const_boolean_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_3_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, img_data_stream_3_V_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, ap_predicate_op51_read_state5, video_src_TVALID_int)
    begin
                ap_block_pp1_stage0_subdone <= (((video_src_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op51_read_state5 = ap_const_boolean_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_3_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state5_pp1_stage0_iter0_assign_proc : process(ap_predicate_op51_read_state5, video_src_TVALID_int)
    begin
                ap_block_state5_pp1_stage0_iter0 <= ((video_src_TVALID_int = ap_const_logic_0) and (ap_predicate_op51_read_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_pp1_stage0_iter1_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, img_data_stream_3_V_full_n, icmp_ln73_reg_451)
    begin
                ap_block_state6_pp1_stage0_iter1 <= (((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_3_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln73_reg_451 = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state8_assign_proc : process(eol_2_reg_321, video_src_TVALID_int)
    begin
                ap_block_state8 <= ((eol_2_reg_321 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_0));
    end process;


    ap_condition_169_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
                ap_condition_169 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001));
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln73_fu_362_p2)
    begin
        if ((icmp_ln73_fu_362_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln71_fu_350_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_350_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_data_V_1_phi_fu_241_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, axi_data_V_1_reg_238, p_Val2_s_reg_285)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_axi_data_V_1_phi_fu_241_p4 <= p_Val2_s_reg_285;
        else 
            ap_phi_mux_axi_data_V_1_phi_fu_241_p4 <= axi_data_V_1_reg_238;
        end if; 
    end process;


    ap_phi_mux_eol_0_phi_fu_264_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, eol_0_reg_260, axi_last_V_2_reg_272)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_eol_0_phi_fu_264_p4 <= axi_last_V_2_reg_272;
        else 
            ap_phi_mux_eol_0_phi_fu_264_p4 <= eol_0_reg_260;
        end if; 
    end process;

    ap_phi_mux_eol_2_phi_fu_324_p4 <= eol_2_reg_321;

    ap_phi_mux_eol_phi_fu_230_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, eol_reg_227, axi_last_V_2_reg_272)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_eol_phi_fu_230_p4 <= axi_last_V_2_reg_272;
        else 
            ap_phi_mux_eol_phi_fu_230_p4 <= eol_reg_227;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_289_p4_assign_proc : process(icmp_ln73_fu_362_p2, or_ln76_fu_377_p2, ap_phi_mux_axi_data_V_1_phi_fu_241_p4, ap_phi_reg_pp1_iter0_p_Val2_s_reg_285, video_src_TDATA_int)
    begin
        if ((icmp_ln73_fu_362_p2 = ap_const_lv1_0)) then
            if ((or_ln76_fu_377_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_289_p4 <= ap_phi_mux_axi_data_V_1_phi_fu_241_p4;
            elsif ((or_ln76_fu_377_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_289_p4 <= video_src_TDATA_int;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_289_p4 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_285;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_289_p4 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_285;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_axi_last_V_2_reg_272 <= "X";
    ap_phi_reg_pp1_iter0_p_Val2_s_reg_285 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op51_read_state5_assign_proc : process(icmp_ln73_fu_362_p2, or_ln76_fu_377_p2)
    begin
                ap_predicate_op51_read_state5 <= ((or_ln76_fu_377_p2 = ap_const_lv1_0) and (icmp_ln73_fu_362_p2 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    i_V_fu_356_p2 <= std_logic_vector(unsigned(t_V_reg_216) + unsigned(ap_const_lv10_1));
    icmp_ln71_fu_350_p2 <= "1" when (t_V_reg_216 = ap_const_lv10_2D0) else "0";
    icmp_ln73_fu_362_p2 <= "1" when (t_V_2_reg_249 = ap_const_lv11_500) else "0";

    img_data_stream_0_V_blk_n_assign_proc : process(img_data_stream_0_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            img_data_stream_0_V_blk_n <= img_data_stream_0_V_full_n;
        else 
            img_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_0_V_din <= tmp_reg_464;

    img_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_1_V_blk_n_assign_proc : process(img_data_stream_1_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            img_data_stream_1_V_blk_n <= img_data_stream_1_V_full_n;
        else 
            img_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_1_V_din <= tmp_9_reg_469;

    img_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_2_V_blk_n_assign_proc : process(img_data_stream_2_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            img_data_stream_2_V_blk_n <= img_data_stream_2_V_full_n;
        else 
            img_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_2_V_din <= tmp_1_reg_474;

    img_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_3_V_blk_n_assign_proc : process(img_data_stream_3_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            img_data_stream_3_V_blk_n <= img_data_stream_3_V_full_n;
        else 
            img_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_3_V_din <= tmp_2_reg_479;

    img_data_stream_3_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln73_reg_451, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln73_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_stream_3_V_write <= ap_const_logic_1;
        else 
            img_data_stream_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(icmp_ln71_fu_350_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_350_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_368_p2 <= std_logic_vector(unsigned(t_V_2_reg_249) + unsigned(ap_const_lv11_1));
    or_ln76_fu_377_p2 <= (sof_1_fu_146 or ap_phi_mux_eol_0_phi_fu_264_p4);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_383_p1 <= ap_phi_mux_p_Val2_s_phi_fu_289_p4(8 - 1 downto 0);
    tmp_user_V_fu_341_p1 <= video_src_TUSER_int;

    video_src_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln73_fu_362_p2, or_ln76_fu_377_p2, ap_CS_fsm_state8, eol_2_reg_321, video_src_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((or_ln76_fu_377_p2 = ap_const_lv1_0) and (icmp_ln73_fu_362_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_321 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            video_src_TDATA_blk_n <= video_src_TVALID_int;
        else 
            video_src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    video_src_TREADY_assign_proc : process(video_src_TVALID, regslice_both_AXI_video_strm_V_data_V_U_ack_in)
    begin
        if (((video_src_TVALID = ap_const_logic_1) and (regslice_both_AXI_video_strm_V_data_V_U_ack_in = ap_const_logic_1))) then 
            video_src_TREADY <= ap_const_logic_1;
        else 
            video_src_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    video_src_TREADY_int_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state8, ap_predicate_op51_read_state5, ap_block_pp1_stage0_11001, eol_2_reg_321, video_src_TVALID_int)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op51_read_state5 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((video_src_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((eol_2_reg_321 = ap_const_lv1_0) and (video_src_TVALID_int = ap_const_logic_0))) and (eol_2_reg_321 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            video_src_TREADY_int <= ap_const_logic_1;
        else 
            video_src_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
