-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_ctr_slaves_tester is

  constant IPBUS_SEL_WIDTH: positive := 5;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_ctr_slaves_tester(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Fri Aug 16 18:01:23 2019 
  constant N_SLV_CSR: integer := 0;
  constant N_SLV_TESTCTRL: integer := 1;
  constant N_SLV_CTRS_BLOCK_SMALL: integer := 2;
  constant N_SLV_CTRS_BLOCK_SMALL_RW: integer := 3;
  constant N_SLV_CTRS_BLOCK_LARGE: integer := 4;
  constant N_SLV_CTRS_BLOCK_LARGE_WIDE: integer := 5;
  constant N_SLV_CTRS_BLOCK_LARGE_WIDE_WRAPS: integer := 6;
  constant N_SLV_CTRS_BLOCK_LARGE_WIDE_READRESET: integer := 7;
  constant N_SLV_CTRS_BLOCK_LARGE_WIDE_READRESET_RW: integer := 8;
  constant N_SLV_CTRS_PORTED_SMALL: integer := 9;
  constant N_SLV_CTRS_PORTED_SMALL_RW: integer := 10;
  constant N_SLV_CTRS_PORTED_LARGE: integer := 11;
  constant N_SLV_CTRS_PORTED_LARGE_WIDE: integer := 12;
  constant N_SLV_CTRS_PORTED_LARGE_WIDE_WRAPS: integer := 13;
  constant N_SLV_CTRS_PORTED_LARGE_WIDE_READRESET: integer := 14;
  constant N_SLV_CTRS_PORTED_LARGE_WIDE_READRESET_RW: integer := 15;
  constant N_SLAVES: integer := 16;
-- END automatically generated VHDL

    
end ipbus_decode_ctr_slaves_tester;

package body ipbus_decode_ctr_slaves_tester is

  function ipbus_sel_ctr_slaves_tester(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Fri Aug 16 18:01:23 2019 
    if    std_match(addr, "-------------------0---0-000000-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CSR, IPBUS_SEL_WIDTH)); -- csr / base 0x00000000 / mask 0x0000117e
    elsif std_match(addr, "-------------------0---0-0001---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_TESTCTRL, IPBUS_SEL_WIDTH)); -- testctrl / base 0x00000008 / mask 0x00001178
    elsif std_match(addr, "-------------------1---0-000000-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_BLOCK_SMALL, IPBUS_SEL_WIDTH)); -- ctrs.block.small / base 0x00001000 / mask 0x0000117e
    elsif std_match(addr, "-------------------1---0-000001-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_BLOCK_SMALL_RW, IPBUS_SEL_WIDTH)); -- ctrs.block.small_rw / base 0x00001002 / mask 0x0000117e
    elsif std_match(addr, "-------------------1---0-0001---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_BLOCK_LARGE, IPBUS_SEL_WIDTH)); -- ctrs.block.large / base 0x00001008 / mask 0x00001178
    elsif std_match(addr, "-------------------1---0-001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_BLOCK_LARGE_WIDE, IPBUS_SEL_WIDTH)); -- ctrs.block.large_wide / base 0x00001010 / mask 0x00001170
    elsif std_match(addr, "-------------------1---0-010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_BLOCK_LARGE_WIDE_WRAPS, IPBUS_SEL_WIDTH)); -- ctrs.block.large_wide_wraps / base 0x00001020 / mask 0x00001170
    elsif std_match(addr, "-------------------1---0-011----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_BLOCK_LARGE_WIDE_READRESET, IPBUS_SEL_WIDTH)); -- ctrs.block.large_wide_readreset / base 0x00001030 / mask 0x00001170
    elsif std_match(addr, "-------------------1---0-10-----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_BLOCK_LARGE_WIDE_READRESET_RW, IPBUS_SEL_WIDTH)); -- ctrs.block.large_wide_readreset_rw / base 0x00001040 / mask 0x00001160
    elsif std_match(addr, "-------------------1---1-000000-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_PORTED_SMALL, IPBUS_SEL_WIDTH)); -- ctrs.ported.small / base 0x00001100 / mask 0x0000117e
    elsif std_match(addr, "-------------------1---1-000001-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_PORTED_SMALL_RW, IPBUS_SEL_WIDTH)); -- ctrs.ported.small_rw / base 0x00001102 / mask 0x0000117e
    elsif std_match(addr, "-------------------1---1-000010-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_PORTED_LARGE, IPBUS_SEL_WIDTH)); -- ctrs.ported.large / base 0x00001104 / mask 0x0000117e
    elsif std_match(addr, "-------------------1---1-000011-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_PORTED_LARGE_WIDE, IPBUS_SEL_WIDTH)); -- ctrs.ported.large_wide / base 0x00001106 / mask 0x0000117e
    elsif std_match(addr, "-------------------1---1-000101-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_PORTED_LARGE_WIDE_WRAPS, IPBUS_SEL_WIDTH)); -- ctrs.ported.large_wide_wraps / base 0x0000110a / mask 0x0000117e
    elsif std_match(addr, "-------------------1---1-000110-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_PORTED_LARGE_WIDE_READRESET, IPBUS_SEL_WIDTH)); -- ctrs.ported.large_wide_readreset / base 0x0000110c / mask 0x0000117e
    elsif std_match(addr, "-------------------1---1-000111-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRS_PORTED_LARGE_WIDE_READRESET_RW, IPBUS_SEL_WIDTH)); -- ctrs.ported.large_wide_readreset_rw / base 0x0000110e / mask 0x0000117e
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_ctr_slaves_tester;

end ipbus_decode_ctr_slaves_tester;

