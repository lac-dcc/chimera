-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hysteresis is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_rows_V_empty_n : IN STD_LOGIC;
    src_rows_V_read : OUT STD_LOGIC;
    src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V_empty_n : IN STD_LOGIC;
    src_cols_V_read : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    threshold_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_low_empty_n : IN STD_LOGIC;
    threshold_low_read : OUT STD_LOGIC;
    threshold_high_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_high_empty_n : IN STD_LOGIC;
    threshold_high_read : OUT STD_LOGIC );
end;


architecture behav of hysteresis is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_rows_V_blk_n : STD_LOGIC;
    signal src_cols_V_blk_n : STD_LOGIC;
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond_i_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal or_cond7_i_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_i_reg_954_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_low_blk_n : STD_LOGIC;
    signal threshold_high_blk_n : STD_LOGIC;
    signal t_V_2_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_2_reg_272_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal threshold_low_read_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal threshold_high_read_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_V_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_288_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_reg_868 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_3_fu_298_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_3_reg_873 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_i_fu_304_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_i_reg_878 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_fu_310_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_reg_883 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_24_i_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_i_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_reg_917_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_32_i_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_reg_926_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_933_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuff_val_1_addr_reg_937 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_cond6_i_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_i_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_i_reg_948_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_i_reg_948_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_i_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_i_reg_954_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_i_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_i_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal linebuff_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_ce0 : STD_LOGIC;
    signal linebuff_val_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal linebuff_val_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_ce1 : STD_LOGIC;
    signal linebuff_val_0_we1 : STD_LOGIC;
    signal linebuff_val_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_1_ce0 : STD_LOGIC;
    signal linebuff_val_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal linebuff_val_1_ce1 : STD_LOGIC;
    signal linebuff_val_1_we1 : STD_LOGIC;
    signal t_V_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_t_V_2_phi_fu_276_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_i_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp1_i_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_i_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal element_gd_i_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_0_0_win_va_fu_507_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_2_fu_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_fu_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_0_0_win_va_fu_500_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_2_fu_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_0_0_win_va_fu_493_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_2_fu_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_cast_i_fu_284_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_2_cast_i_fu_294_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_i_fu_316_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_336_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_29_cast_i_fu_363_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_21_fu_394_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp2_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_i_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_i_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_demorgan_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_i_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt1_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_i_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt2_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_i_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt3_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_i_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt4_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_i_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt5_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_i_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt6_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_i_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt7_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_i_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt8_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev7_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev8_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev6_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp12_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp14_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_demorgan_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component nonmax_suppressioocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    linebuff_val_0_U : component nonmax_suppressioocq
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_0_address0,
        ce0 => linebuff_val_0_ce0,
        q0 => linebuff_val_0_q0,
        address1 => linebuff_val_0_address1,
        ce1 => linebuff_val_0_ce1,
        we1 => linebuff_val_0_we1,
        d1 => element_gd_i_fu_148);

    linebuff_val_1_U : component nonmax_suppressioocq
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_1_address0,
        ce0 => linebuff_val_1_ce0,
        q0 => linebuff_val_1_q0,
        address1 => linebuff_val_1_addr_reg_937,
        ce1 => linebuff_val_1_ce1,
        we1 => linebuff_val_1_we1,
        d1 => linebuff_val_0_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_24_i_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_24_i_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((tmp_24_i_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_2_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_30_i_reg_917 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_2_reg_272 <= j_V_reg_921;
            elsif (((tmp_24_i_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_2_reg_272 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_reg_261 <= i_V_reg_892;
            elsif ((not(((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_V_reg_863 <= src_cols_V_dout;
                ret_V_3_reg_873 <= ret_V_3_fu_298_p2;
                ret_V_4_reg_883 <= ret_V_4_fu_310_p2;
                ret_V_reg_868 <= ret_V_fu_288_p2;
                rows_V_reg_858 <= src_rows_V_dout;
                threshold_high_read_reg_845 <= threshold_high_dout;
                threshold_low_read_reg_840 <= threshold_low_dout;
                tmp_i_reg_878 <= tmp_i_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond_i_reg_933 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                element_gd_i_fu_148 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_892 <= i_V_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_24_i_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_902 <= icmp_fu_346_p2;
                tmp_25_i_reg_897 <= tmp_25_i_fu_331_p2;
                tmp_27_i_reg_907 <= tmp_27_i_fu_352_p2;
                tmp_28_i_reg_912 <= tmp_28_i_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_V_reg_921 <= j_V_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_32_i_fu_378_p2 = ap_const_lv1_1) and (tmp_30_i_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                linebuff_val_1_addr_reg_937 <= tmp_35_i_fu_388_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_30_i_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond6_i_reg_948 <= or_cond6_i_fu_425_p2;
                or_cond7_i_reg_954 <= or_cond7_i_fu_437_p2;
                or_cond_i_reg_933 <= or_cond_i_fu_383_p2;
                tmp_32_i_reg_926 <= tmp_32_i_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond6_i_reg_948_pp0_iter1_reg <= or_cond6_i_reg_948;
                or_cond7_i_reg_954_pp0_iter1_reg <= or_cond7_i_reg_954;
                or_cond_i_reg_933_pp0_iter1_reg <= or_cond_i_reg_933;
                t_V_2_reg_272_pp0_iter1_reg <= t_V_2_reg_272;
                tmp_30_i_reg_917 <= tmp_30_i_fu_367_p2;
                tmp_30_i_reg_917_pp0_iter1_reg <= tmp_30_i_reg_917;
                tmp_32_i_reg_926_pp0_iter1_reg <= tmp_32_i_reg_926;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_cond6_i_reg_948_pp0_iter2_reg <= or_cond6_i_reg_948_pp0_iter1_reg;
                or_cond7_i_reg_954_pp0_iter2_reg <= or_cond7_i_reg_954_pp0_iter1_reg;
                sel_tmp4_reg_963 <= sel_tmp4_fu_713_p2;
                tmp_40_i_reg_958 <= tmp_40_i_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_32_i_reg_926 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp0_i_fu_144 <= linebuff_val_0_q0;
                tmp1_i_fu_140 <= linebuff_val_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_30_i_reg_917_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                win_val_0_1_2_fu_156 <= win_val_0_1_fu_152;
                win_val_0_1_fu_152 <= win_val_0_0_0_win_va_fu_507_p3;
                win_val_1_1_2_fu_164 <= win_val_1_1_fu_160;
                win_val_1_1_fu_160 <= win_val_1_0_0_win_va_fu_500_p3;
                win_val_2_1_2_fu_172 <= win_val_2_1_fu_168;
                win_val_2_1_fu_168 <= win_val_2_0_0_win_va_fu_493_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_rows_V_empty_n, src_cols_V_empty_n, threshold_low_empty_n, threshold_high_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, tmp_24_i_fu_320_p2, ap_CS_fsm_state2, tmp_30_i_fu_367_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_24_i_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_30_i_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((tmp_30_i_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_i_reg_933, ap_enable_reg_pp0_iter3, or_cond7_i_reg_954_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((or_cond7_i_reg_954_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_i_reg_933 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_i_reg_933, ap_enable_reg_pp0_iter3, or_cond7_i_reg_954_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((or_cond7_i_reg_954_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_i_reg_933 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_i_reg_933, ap_enable_reg_pp0_iter3, or_cond7_i_reg_954_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((or_cond7_i_reg_954_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_i_reg_933 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_rows_V_empty_n, src_cols_V_empty_n, threshold_low_empty_n, threshold_high_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n, or_cond_i_reg_933)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((or_cond_i_reg_933 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(dst_data_stream_V_full_n, or_cond7_i_reg_954_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((or_cond7_i_reg_954_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_30_i_fu_367_p2)
    begin
        if ((tmp_30_i_fu_367_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_24_i_fu_320_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_24_i_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t_V_2_phi_fu_276_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, t_V_2_reg_272, tmp_30_i_reg_917, j_V_reg_921)
    begin
        if (((tmp_30_i_reg_917 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_t_V_2_phi_fu_276_p4 <= j_V_reg_921;
        else 
            ap_phi_mux_t_V_2_phi_fu_276_p4 <= t_V_2_reg_272;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_24_i_fu_320_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_24_i_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, or_cond7_i_reg_954_pp0_iter2_reg)
    begin
        if (((or_cond7_i_reg_954_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        ap_const_lv8_FF when (tmp_5_fu_767_p2(0) = '1') else 
        ap_const_lv8_0;

    dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, or_cond7_i_reg_954_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond7_i_reg_954_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_325_p2 <= std_logic_vector(unsigned(t_V_reg_261) + unsigned(ap_const_lv32_1));
    icmp2_fu_404_p2 <= "1" when (tmp_21_fu_394_p4 = ap_const_lv31_0) else "0";
    icmp_fu_346_p2 <= "1" when (tmp_fu_336_p4 = ap_const_lv31_0) else "0";
    j_V_fu_372_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_2_phi_fu_276_p4) + unsigned(ap_const_lv32_1));
    lhs_V_2_cast_i_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_cols_V_dout),33));
    lhs_V_cast_i_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_rows_V_dout),33));
    linebuff_val_0_address0 <= tmp_35_i_fu_388_p1(11 - 1 downto 0);
    linebuff_val_0_address1 <= tmp_36_i_fu_461_p1(11 - 1 downto 0);

    linebuff_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            linebuff_val_0_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuff_val_0_ce1 <= ap_const_logic_1;
        else 
            linebuff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_i_reg_933_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond_i_reg_933_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuff_val_0_we1 <= ap_const_logic_1;
        else 
            linebuff_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuff_val_1_address0 <= tmp_35_i_fu_388_p1(11 - 1 downto 0);

    linebuff_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            linebuff_val_1_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuff_val_1_ce1 <= ap_const_logic_1;
        else 
            linebuff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_32_i_reg_926)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_32_i_reg_926 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuff_val_1_we1 <= ap_const_logic_1;
        else 
            linebuff_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond6_i_fu_425_p2 <= (tmp5_fu_420_p2 or tmp4_fu_415_p2);
    or_cond7_i_fu_437_p2 <= (tmp_59_i_fu_431_p2 or tmp_27_i_reg_907);
    or_cond_i_fu_383_p2 <= (tmp_32_i_fu_378_p2 and tmp_25_i_reg_897);
    ret_V_3_fu_298_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_i_fu_294_p1) + unsigned(ap_const_lv33_1));
    ret_V_4_fu_310_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_i_fu_294_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    ret_V_fu_288_p2 <= std_logic_vector(unsigned(lhs_V_cast_i_fu_284_p1) + unsigned(ap_const_lv33_1));
    rev1_fu_582_p2 <= (slt1_fu_577_p2 xor ap_const_lv1_1);
    rev2_fu_593_p2 <= (slt2_fu_588_p2 xor ap_const_lv1_1);
    rev3_fu_604_p2 <= (slt3_fu_599_p2 xor ap_const_lv1_1);
    rev4_fu_615_p2 <= (slt4_fu_610_p2 xor ap_const_lv1_1);
    rev5_fu_626_p2 <= (slt5_fu_621_p2 xor ap_const_lv1_1);
    rev6_fu_637_p2 <= (slt6_fu_632_p2 xor ap_const_lv1_1);
    rev7_fu_648_p2 <= (slt7_fu_643_p2 xor ap_const_lv1_1);
    rev8_fu_659_p2 <= (slt8_fu_654_p2 xor ap_const_lv1_1);
    rev_fu_571_p2 <= (slt_fu_566_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_713_p2 <= (tmp9_fu_683_p2 and tmp13_fu_707_p2);
    sel_tmp6_demorgan_fu_555_p2 <= (tmp_40_i_fu_518_p2 or or_cond6_i_reg_948_pp0_iter1_reg);
    sel_tmp6_fu_560_p2 <= (sel_tmp6_demorgan_fu_555_p2 xor ap_const_lv1_1);
    slt1_fu_577_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_42_i_fu_523_p1)) else "0";
    slt2_fu_588_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_44_i_fu_527_p1)) else "0";
    slt3_fu_599_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_46_i_fu_531_p1)) else "0";
    slt4_fu_610_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_48_i_fu_535_p1)) else "0";
    slt5_fu_621_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_50_i_fu_539_p1)) else "0";
    slt6_fu_632_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_52_i_fu_543_p1)) else "0";
    slt7_fu_643_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_54_i_fu_547_p1)) else "0";
    slt8_fu_654_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_56_i_fu_551_p1)) else "0";
    slt_fu_566_p2 <= "1" when (signed(threshold_high_read_reg_845) < signed(tmp_39_i_fu_514_p1)) else "0";

    src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_blk_n <= src_cols_V_empty_n;
        else 
            src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_V_empty_n, src_cols_V_empty_n, threshold_low_empty_n, threshold_high_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_V_read <= ap_const_logic_1;
        else 
            src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_cond_i_reg_933)
    begin
        if (((or_cond_i_reg_933 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond_i_reg_933, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond_i_reg_933 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_rows_V_blk_n <= src_rows_V_empty_n;
        else 
            src_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_V_empty_n, src_cols_V_empty_n, threshold_low_empty_n, threshold_high_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_rows_V_read <= ap_const_logic_1;
        else 
            src_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    threshold_high_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, threshold_high_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_high_blk_n <= threshold_high_empty_n;
        else 
            threshold_high_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_high_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_V_empty_n, src_cols_V_empty_n, threshold_low_empty_n, threshold_high_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_high_read <= ap_const_logic_1;
        else 
            threshold_high_read <= ap_const_logic_0;
        end if; 
    end process;


    threshold_low_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, threshold_low_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_low_blk_n <= threshold_low_empty_n;
        else 
            threshold_low_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_low_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_V_empty_n, src_cols_V_empty_n, threshold_low_empty_n, threshold_high_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (src_cols_V_empty_n = ap_const_logic_0) or (src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_low_read <= ap_const_logic_1;
        else 
            threshold_low_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_689_p2 <= (rev5_fu_626_p2 and rev4_fu_615_p2);
    tmp11_fu_695_p2 <= (rev8_fu_659_p2 and rev7_fu_648_p2);
    tmp12_fu_701_p2 <= (tmp11_fu_695_p2 and rev6_fu_637_p2);
    tmp13_fu_707_p2 <= (tmp12_fu_701_p2 and tmp10_fu_689_p2);
    tmp14_fu_758_p2 <= (sel_tmp4_reg_963 or or_cond6_i_reg_948_pp0_iter2_reg);
    tmp4_fu_415_p2 <= (tmp_28_i_reg_912 or icmp2_fu_404_p2);
    tmp5_fu_420_p2 <= (tmp_38_i_fu_410_p2 or icmp_reg_902);
    tmp6_fu_665_p2 <= (sel_tmp6_fu_560_p2 and rev_fu_571_p2);
    tmp7_fu_671_p2 <= (rev3_fu_604_p2 and rev2_fu_593_p2);
    tmp8_fu_677_p2 <= (tmp7_fu_671_p2 and rev1_fu_582_p2);
    tmp9_fu_683_p2 <= (tmp8_fu_677_p2 and tmp6_fu_665_p2);
    tmp_21_fu_394_p4 <= ap_phi_mux_t_V_2_phi_fu_276_p4(31 downto 1);
    tmp_24_i_fu_320_p2 <= "1" when (unsigned(tmp_cast_i_fu_316_p1) < unsigned(ret_V_reg_868)) else "0";
    tmp_25_i_fu_331_p2 <= "1" when (unsigned(t_V_reg_261) < unsigned(rows_V_reg_858)) else "0";
    tmp_27_i_fu_352_p2 <= "1" when (t_V_reg_261 = ap_const_lv32_0) else "0";
    tmp_28_i_fu_358_p2 <= "1" when (signed(tmp_cast_i_fu_316_p1) > signed(tmp_i_reg_878)) else "0";
    tmp_29_cast_i_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_2_phi_fu_276_p4),33));
    tmp_30_i_fu_367_p2 <= "1" when (unsigned(tmp_29_cast_i_fu_363_p1) < unsigned(ret_V_3_reg_873)) else "0";
    tmp_32_i_fu_378_p2 <= "1" when (unsigned(ap_phi_mux_t_V_2_phi_fu_276_p4) < unsigned(cols_V_reg_863)) else "0";
    tmp_35_i_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_2_phi_fu_276_p4),64));
    tmp_36_i_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_272_pp0_iter1_reg),64));
    tmp_38_i_fu_410_p2 <= "1" when (signed(tmp_29_cast_i_fu_363_p1) > signed(ret_V_4_reg_883)) else "0";
    tmp_39_i_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_fu_160),32));
    tmp_40_i_fu_518_p2 <= "1" when (signed(tmp_39_i_fu_514_p1) < signed(threshold_low_read_reg_840)) else "0";
    tmp_42_i_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_0_0_win_va_fu_507_p3),32));
    tmp_44_i_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_fu_152),32));
    tmp_46_i_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_2_fu_156),32));
    tmp_48_i_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_0_0_win_va_fu_500_p3),32));
    tmp_50_i_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_2_fu_164),32));
    tmp_52_i_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_0_0_win_va_fu_493_p3),32));
    tmp_54_i_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_fu_168),32));
    tmp_56_i_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_2_fu_172),32));
    tmp_59_i_fu_431_p2 <= "1" when (ap_phi_mux_t_V_2_phi_fu_276_p4 = ap_const_lv32_0) else "0";
    tmp_5_demorgan_fu_762_p2 <= (tmp_40_i_reg_958 or tmp14_fu_758_p2);
    tmp_5_fu_767_p2 <= (tmp_5_demorgan_fu_762_p2 xor ap_const_lv1_1);
    tmp_cast_i_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_261),33));
    tmp_fu_336_p4 <= t_V_reg_261(31 downto 1);
    tmp_i_fu_304_p2 <= std_logic_vector(unsigned(lhs_V_cast_i_fu_284_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    win_val_0_0_0_win_va_fu_507_p3 <= 
        element_gd_i_fu_148 when (tmp_32_i_reg_926_pp0_iter1_reg(0) = '1') else 
        win_val_0_1_fu_152;
    win_val_1_0_0_win_va_fu_500_p3 <= 
        tmp0_i_fu_144 when (tmp_32_i_reg_926_pp0_iter1_reg(0) = '1') else 
        win_val_1_1_fu_160;
    win_val_2_0_0_win_va_fu_493_p3 <= 
        tmp1_i_fu_140 when (tmp_32_i_reg_926_pp0_iter1_reg(0) = '1') else 
        win_val_2_1_fu_168;
end behav;
