-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity threshold2 is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    input_r_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of threshold2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "threshold2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=18,HLS_SYN_DSP=14,HLS_SYN_FF=11685,HLS_SYN_LUT=13742,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (15 downto 0);
    signal cols : STD_LOGIC_VECTOR (15 downto 0);
    signal max_h : STD_LOGIC_VECTOR (7 downto 0);
    signal min_h : STD_LOGIC_VECTOR (7 downto 0);
    signal max_s : STD_LOGIC_VECTOR (7 downto 0);
    signal min_s : STD_LOGIC_VECTOR (7 downto 0);
    signal max_v : STD_LOGIC_VECTOR (7 downto 0);
    signal min_v : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1247_p_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_0_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_0_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_0_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_0_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_2_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_2_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_2_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_2_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_4_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_4_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_4_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_4_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_h_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_h_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_h_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_h_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_s_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_s_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_s_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_s_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_v_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_v_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_v_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_v_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_hls_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_hls_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_hls_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_hls_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_dilate_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_dilate_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_dilate_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_dilate_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_dilate_1_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_dilate_1_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_dilate_1_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_dilate_1_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_erode_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_erode_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_img_erode_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1247_p_U0_img_erode_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_max_h_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1247_p_U0_max_h_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_min_h_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1247_p_U0_min_h_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_max_s_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1247_p_U0_max_s_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_min_s_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1247_p_U0_min_s_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_max_v_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1247_p_U0_max_v_out_write : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_min_v_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1247_p_U0_min_v_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_input_r_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal GaussianBlur_U0_ap_start : STD_LOGIC;
    signal GaussianBlur_U0_ap_done : STD_LOGIC;
    signal GaussianBlur_U0_ap_continue : STD_LOGIC;
    signal GaussianBlur_U0_ap_idle : STD_LOGIC;
    signal GaussianBlur_U0_ap_ready : STD_LOGIC;
    signal GaussianBlur_U0_p_src_rows_V_read : STD_LOGIC;
    signal GaussianBlur_U0_p_src_cols_V_read : STD_LOGIC;
    signal GaussianBlur_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal GaussianBlur_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal GaussianBlur_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal GaussianBlur_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal GaussianBlur_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal GaussianBlur_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal GaussianBlur_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal GaussianBlur_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal GaussianBlur_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal CvtColor_U0_ap_start : STD_LOGIC;
    signal CvtColor_U0_ap_done : STD_LOGIC;
    signal CvtColor_U0_ap_continue : STD_LOGIC;
    signal CvtColor_U0_ap_idle : STD_LOGIC;
    signal CvtColor_U0_ap_ready : STD_LOGIC;
    signal CvtColor_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Get_hsv_U0_ap_start : STD_LOGIC;
    signal Get_hsv_U0_ap_done : STD_LOGIC;
    signal Get_hsv_U0_ap_continue : STD_LOGIC;
    signal Get_hsv_U0_ap_idle : STD_LOGIC;
    signal Get_hsv_U0_ap_ready : STD_LOGIC;
    signal Get_hsv_U0_start_out : STD_LOGIC;
    signal Get_hsv_U0_start_write : STD_LOGIC;
    signal Get_hsv_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Get_hsv_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Get_hsv_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Get_hsv_U0_dst_rows_V_read : STD_LOGIC;
    signal Get_hsv_U0_dst_cols_V_read : STD_LOGIC;
    signal Get_hsv_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Get_hsv_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Get_hsv_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Get_hsv_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Get_hsv_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Get_hsv_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Get_hsv_U0_image_h : STD_LOGIC_VECTOR (7 downto 0);
    signal Get_hsv_U0_image_h_ap_vld : STD_LOGIC;
    signal Get_hsv_U0_image_s : STD_LOGIC_VECTOR (7 downto 0);
    signal Get_hsv_U0_image_s_ap_vld : STD_LOGIC;
    signal Get_hsv_U0_image_v : STD_LOGIC_VECTOR (7 downto 0);
    signal Get_hsv_U0_image_v_ap_vld : STD_LOGIC;
    signal Get_hsv_U0_dst_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Get_hsv_U0_dst_rows_V_out_write : STD_LOGIC;
    signal Get_hsv_U0_dst_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Get_hsv_U0_dst_cols_V_out_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Split_U0_ap_start : STD_LOGIC;
    signal Split_U0_ap_done : STD_LOGIC;
    signal Split_U0_ap_continue : STD_LOGIC;
    signal Split_U0_ap_idle : STD_LOGIC;
    signal Split_U0_ap_ready : STD_LOGIC;
    signal Split_U0_src_rows_V_read : STD_LOGIC;
    signal Split_U0_src_cols_V_read : STD_LOGIC;
    signal Split_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Split_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Split_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Split_U0_dst0_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Split_U0_dst0_data_stream_V_write : STD_LOGIC;
    signal Split_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Split_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Split_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Split_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Threshold_l227_U0_ap_start : STD_LOGIC;
    signal Threshold_l227_U0_ap_done : STD_LOGIC;
    signal Threshold_l227_U0_ap_continue : STD_LOGIC;
    signal Threshold_l227_U0_ap_idle : STD_LOGIC;
    signal Threshold_l227_U0_ap_ready : STD_LOGIC;
    signal Threshold_l227_U0_src_rows_V_read : STD_LOGIC;
    signal Threshold_l227_U0_src_cols_V_read : STD_LOGIC;
    signal Threshold_l227_U0_src_data_stream_V_read : STD_LOGIC;
    signal Threshold_l227_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Threshold_l227_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Threshold_l227_U0_thresh_max_read : STD_LOGIC;
    signal Threshold_l227_U0_thresh_min_read : STD_LOGIC;
    signal Threshold_l228_U0_ap_start : STD_LOGIC;
    signal Threshold_l228_U0_ap_done : STD_LOGIC;
    signal Threshold_l228_U0_ap_continue : STD_LOGIC;
    signal Threshold_l228_U0_ap_idle : STD_LOGIC;
    signal Threshold_l228_U0_ap_ready : STD_LOGIC;
    signal Threshold_l228_U0_src_rows_V_read : STD_LOGIC;
    signal Threshold_l228_U0_src_cols_V_read : STD_LOGIC;
    signal Threshold_l228_U0_src_data_stream_V_read : STD_LOGIC;
    signal Threshold_l228_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Threshold_l228_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Threshold_l228_U0_thresh_max_read : STD_LOGIC;
    signal Threshold_l228_U0_thresh_min_read : STD_LOGIC;
    signal Threshold_l_U0_ap_start : STD_LOGIC;
    signal Threshold_l_U0_ap_done : STD_LOGIC;
    signal Threshold_l_U0_ap_continue : STD_LOGIC;
    signal Threshold_l_U0_ap_idle : STD_LOGIC;
    signal Threshold_l_U0_ap_ready : STD_LOGIC;
    signal Threshold_l_U0_src_rows_V_read : STD_LOGIC;
    signal Threshold_l_U0_src_cols_V_read : STD_LOGIC;
    signal Threshold_l_U0_src_data_stream_V_read : STD_LOGIC;
    signal Threshold_l_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Threshold_l_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Threshold_l_U0_thresh_max_read : STD_LOGIC;
    signal Threshold_l_U0_thresh_min_read : STD_LOGIC;
    signal And_3_U0_ap_start : STD_LOGIC;
    signal And_3_U0_ap_done : STD_LOGIC;
    signal And_3_U0_ap_continue : STD_LOGIC;
    signal And_3_U0_ap_idle : STD_LOGIC;
    signal And_3_U0_ap_ready : STD_LOGIC;
    signal And_3_U0_start_out : STD_LOGIC;
    signal And_3_U0_start_write : STD_LOGIC;
    signal And_3_U0_src_1_data_stream_V_read : STD_LOGIC;
    signal And_3_U0_src_2_data_stream_V_read : STD_LOGIC;
    signal And_3_U0_src_3_data_stream_V_read : STD_LOGIC;
    signal And_3_U0_dst_rows_V_read : STD_LOGIC;
    signal And_3_U0_dst_cols_V_read : STD_LOGIC;
    signal And_3_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal And_3_U0_dst_data_stream_V_write : STD_LOGIC;
    signal And_3_U0_dst_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal And_3_U0_dst_rows_V_out_write : STD_LOGIC;
    signal And_3_U0_dst_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal And_3_U0_dst_cols_V_out_write : STD_LOGIC;
    signal Dilate229_U0_ap_start : STD_LOGIC;
    signal Dilate229_U0_ap_done : STD_LOGIC;
    signal Dilate229_U0_ap_continue : STD_LOGIC;
    signal Dilate229_U0_ap_idle : STD_LOGIC;
    signal Dilate229_U0_ap_ready : STD_LOGIC;
    signal Dilate229_U0_p_src_rows_V_read : STD_LOGIC;
    signal Dilate229_U0_p_src_cols_V_read : STD_LOGIC;
    signal Dilate229_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate229_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate229_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Dilate_U0_ap_start : STD_LOGIC;
    signal Dilate_U0_ap_done : STD_LOGIC;
    signal Dilate_U0_ap_continue : STD_LOGIC;
    signal Dilate_U0_ap_idle : STD_LOGIC;
    signal Dilate_U0_ap_ready : STD_LOGIC;
    signal Dilate_U0_p_src_rows_V_read : STD_LOGIC;
    signal Dilate_U0_p_src_cols_V_read : STD_LOGIC;
    signal Dilate_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Erode_U0_ap_start : STD_LOGIC;
    signal Erode_U0_ap_done : STD_LOGIC;
    signal Erode_U0_ap_continue : STD_LOGIC;
    signal Erode_U0_ap_idle : STD_LOGIC;
    signal Erode_U0_ap_ready : STD_LOGIC;
    signal Erode_U0_p_src_rows_V_read : STD_LOGIC;
    signal Erode_U0_p_src_cols_V_read : STD_LOGIC;
    signal Erode_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Erode_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Erode_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_U0_output_r_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal img_0_rows_V_c_full_n : STD_LOGIC;
    signal img_0_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_rows_V_c_empty_n : STD_LOGIC;
    signal img_0_cols_V_c_full_n : STD_LOGIC;
    signal img_0_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_cols_V_c_empty_n : STD_LOGIC;
    signal img_2_rows_V_c_full_n : STD_LOGIC;
    signal img_2_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_2_rows_V_c_empty_n : STD_LOGIC;
    signal img_2_cols_V_c_full_n : STD_LOGIC;
    signal img_2_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_2_cols_V_c_empty_n : STD_LOGIC;
    signal img_4_rows_V_c_full_n : STD_LOGIC;
    signal img_4_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_4_rows_V_c_empty_n : STD_LOGIC;
    signal img_4_cols_V_c_full_n : STD_LOGIC;
    signal img_4_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_4_cols_V_c_empty_n : STD_LOGIC;
    signal img_h_rows_V_c_full_n : STD_LOGIC;
    signal img_h_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_h_rows_V_c_empty_n : STD_LOGIC;
    signal img_h_cols_V_c_full_n : STD_LOGIC;
    signal img_h_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_h_cols_V_c_empty_n : STD_LOGIC;
    signal img_s_rows_V_c_full_n : STD_LOGIC;
    signal img_s_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_s_rows_V_c_empty_n : STD_LOGIC;
    signal img_s_cols_V_c_full_n : STD_LOGIC;
    signal img_s_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_s_cols_V_c_empty_n : STD_LOGIC;
    signal img_v_rows_V_c_full_n : STD_LOGIC;
    signal img_v_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_v_rows_V_c_empty_n : STD_LOGIC;
    signal img_v_cols_V_c_full_n : STD_LOGIC;
    signal img_v_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_v_cols_V_c_empty_n : STD_LOGIC;
    signal img_hls_rows_V_c_full_n : STD_LOGIC;
    signal img_hls_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_hls_rows_V_c_empty_n : STD_LOGIC;
    signal img_hls_cols_V_c_full_n : STD_LOGIC;
    signal img_hls_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_hls_cols_V_c_empty_n : STD_LOGIC;
    signal img_dilate_rows_V_c_full_n : STD_LOGIC;
    signal img_dilate_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_dilate_rows_V_c_empty_n : STD_LOGIC;
    signal img_dilate_cols_V_c_full_n : STD_LOGIC;
    signal img_dilate_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_dilate_cols_V_c_empty_n : STD_LOGIC;
    signal img_dilate_1_rows_V_s_full_n : STD_LOGIC;
    signal img_dilate_1_rows_V_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_dilate_1_rows_V_s_empty_n : STD_LOGIC;
    signal img_dilate_1_cols_V_s_full_n : STD_LOGIC;
    signal img_dilate_1_cols_V_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_dilate_1_cols_V_s_empty_n : STD_LOGIC;
    signal img_erode_rows_V_c_full_n : STD_LOGIC;
    signal img_erode_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_erode_rows_V_c_empty_n : STD_LOGIC;
    signal img_erode_cols_V_c_full_n : STD_LOGIC;
    signal img_erode_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_erode_cols_V_c_empty_n : STD_LOGIC;
    signal max_h_c_full_n : STD_LOGIC;
    signal max_h_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal max_h_c_empty_n : STD_LOGIC;
    signal min_h_c_full_n : STD_LOGIC;
    signal min_h_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal min_h_c_empty_n : STD_LOGIC;
    signal max_s_c_full_n : STD_LOGIC;
    signal max_s_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal max_s_c_empty_n : STD_LOGIC;
    signal min_s_c_full_n : STD_LOGIC;
    signal min_s_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal min_s_c_empty_n : STD_LOGIC;
    signal max_v_c_full_n : STD_LOGIC;
    signal max_v_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal max_v_c_empty_n : STD_LOGIC;
    signal min_v_c_full_n : STD_LOGIC;
    signal min_v_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal min_v_c_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal img_0_rows_V_c75_full_n : STD_LOGIC;
    signal img_0_rows_V_c75_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_rows_V_c75_empty_n : STD_LOGIC;
    signal img_0_cols_V_c76_full_n : STD_LOGIC;
    signal img_0_cols_V_c76_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_cols_V_c76_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_full_n : STD_LOGIC;
    signal img_2_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_empty_n : STD_LOGIC;
    signal img_2_data_stream_1_full_n : STD_LOGIC;
    signal img_2_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_1_empty_n : STD_LOGIC;
    signal img_2_data_stream_2_full_n : STD_LOGIC;
    signal img_2_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_2_empty_n : STD_LOGIC;
    signal img_3_data_stream_0_full_n : STD_LOGIC;
    signal img_3_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_empty_n : STD_LOGIC;
    signal img_3_data_stream_1_full_n : STD_LOGIC;
    signal img_3_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_1_empty_n : STD_LOGIC;
    signal img_3_data_stream_2_full_n : STD_LOGIC;
    signal img_3_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_2_empty_n : STD_LOGIC;
    signal img_4_data_stream_0_full_n : STD_LOGIC;
    signal img_4_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_0_empty_n : STD_LOGIC;
    signal img_4_data_stream_1_full_n : STD_LOGIC;
    signal img_4_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_1_empty_n : STD_LOGIC;
    signal img_4_data_stream_2_full_n : STD_LOGIC;
    signal img_4_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_2_empty_n : STD_LOGIC;
    signal img_4_rows_V_c77_full_n : STD_LOGIC;
    signal img_4_rows_V_c77_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_4_rows_V_c77_empty_n : STD_LOGIC;
    signal img_4_cols_V_c78_full_n : STD_LOGIC;
    signal img_4_cols_V_c78_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_4_cols_V_c78_empty_n : STD_LOGIC;
    signal img_h_data_stream_0_full_n : STD_LOGIC;
    signal img_h_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_h_data_stream_0_empty_n : STD_LOGIC;
    signal img_s_data_stream_0_full_n : STD_LOGIC;
    signal img_s_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_s_data_stream_0_empty_n : STD_LOGIC;
    signal img_v_data_stream_0_full_n : STD_LOGIC;
    signal img_v_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_v_data_stream_0_empty_n : STD_LOGIC;
    signal img_h_1_data_stream_s_full_n : STD_LOGIC;
    signal img_h_1_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_h_1_data_stream_s_empty_n : STD_LOGIC;
    signal img_s_1_data_stream_s_full_n : STD_LOGIC;
    signal img_s_1_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_s_1_data_stream_s_empty_n : STD_LOGIC;
    signal img_v_1_data_stream_s_full_n : STD_LOGIC;
    signal img_v_1_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_v_1_data_stream_s_empty_n : STD_LOGIC;
    signal img_hls_data_stream_s_full_n : STD_LOGIC;
    signal img_hls_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_hls_data_stream_s_empty_n : STD_LOGIC;
    signal img_hls_rows_V_c79_full_n : STD_LOGIC;
    signal img_hls_rows_V_c79_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_hls_rows_V_c79_empty_n : STD_LOGIC;
    signal img_hls_cols_V_c80_full_n : STD_LOGIC;
    signal img_hls_cols_V_c80_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_hls_cols_V_c80_empty_n : STD_LOGIC;
    signal img_dilate_data_stre_full_n : STD_LOGIC;
    signal img_dilate_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_dilate_data_stre_empty_n : STD_LOGIC;
    signal img_dilate_1_data_st_full_n : STD_LOGIC;
    signal img_dilate_1_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_dilate_1_data_st_empty_n : STD_LOGIC;
    signal img_erode_data_strea_full_n : STD_LOGIC;
    signal img_erode_data_strea_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_erode_data_strea_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_Mat_exit1247_p_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit1247_p_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit1247_p_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_CvtColor_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_empty_n : STD_LOGIC;
    signal start_for_Get_hsv_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Get_hsv_U0_full_n : STD_LOGIC;
    signal start_for_Get_hsv_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Get_hsv_U0_empty_n : STD_LOGIC;
    signal start_for_Threshold_l227_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_l227_U0_full_n : STD_LOGIC;
    signal start_for_Threshold_l227_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_l227_U0_empty_n : STD_LOGIC;
    signal start_for_Threshold_l228_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_l228_U0_full_n : STD_LOGIC;
    signal start_for_Threshold_l228_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_l228_U0_empty_n : STD_LOGIC;
    signal start_for_Threshold_l_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_l_U0_full_n : STD_LOGIC;
    signal start_for_Threshold_l_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_l_U0_empty_n : STD_LOGIC;
    signal start_for_And_3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_And_3_U0_full_n : STD_LOGIC;
    signal start_for_And_3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_And_3_U0_empty_n : STD_LOGIC;
    signal start_for_Dilate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_full_n : STD_LOGIC;
    signal start_for_Dilate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_empty_n : STD_LOGIC;
    signal start_for_Erode_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Erode_U0_full_n : STD_LOGIC;
    signal start_for_Erode_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Erode_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal start_for_GaussianBlur_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GaussianBlur_U0_full_n : STD_LOGIC;
    signal start_for_GaussianBlur_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GaussianBlur_U0_empty_n : STD_LOGIC;
    signal GaussianBlur_U0_start_full_n : STD_LOGIC;
    signal GaussianBlur_U0_start_write : STD_LOGIC;
    signal CvtColor_U0_start_full_n : STD_LOGIC;
    signal CvtColor_U0_start_write : STD_LOGIC;
    signal start_for_Split_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Split_U0_full_n : STD_LOGIC;
    signal start_for_Split_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Split_U0_empty_n : STD_LOGIC;
    signal Split_U0_start_full_n : STD_LOGIC;
    signal Split_U0_start_write : STD_LOGIC;
    signal Threshold_l227_U0_start_full_n : STD_LOGIC;
    signal Threshold_l227_U0_start_write : STD_LOGIC;
    signal Threshold_l228_U0_start_full_n : STD_LOGIC;
    signal Threshold_l228_U0_start_write : STD_LOGIC;
    signal Threshold_l_U0_start_full_n : STD_LOGIC;
    signal Threshold_l_U0_start_write : STD_LOGIC;
    signal start_for_Dilate229_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate229_U0_full_n : STD_LOGIC;
    signal start_for_Dilate229_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate229_U0_empty_n : STD_LOGIC;
    signal Dilate229_U0_start_full_n : STD_LOGIC;
    signal Dilate229_U0_start_write : STD_LOGIC;
    signal Dilate_U0_start_full_n : STD_LOGIC;
    signal Dilate_U0_start_write : STD_LOGIC;
    signal Erode_U0_start_full_n : STD_LOGIC;
    signal Erode_U0_start_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit1247_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (15 downto 0);
        cols : IN STD_LOGIC_VECTOR (15 downto 0);
        max_h : IN STD_LOGIC_VECTOR (7 downto 0);
        min_h : IN STD_LOGIC_VECTOR (7 downto 0);
        max_s : IN STD_LOGIC_VECTOR (7 downto 0);
        min_s : IN STD_LOGIC_VECTOR (7 downto 0);
        max_v : IN STD_LOGIC_VECTOR (7 downto 0);
        min_v : IN STD_LOGIC_VECTOR (7 downto 0);
        img_0_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_0_rows_V_out_full_n : IN STD_LOGIC;
        img_0_rows_V_out_write : OUT STD_LOGIC;
        img_0_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_0_cols_V_out_full_n : IN STD_LOGIC;
        img_0_cols_V_out_write : OUT STD_LOGIC;
        img_2_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_2_rows_V_out_full_n : IN STD_LOGIC;
        img_2_rows_V_out_write : OUT STD_LOGIC;
        img_2_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_2_cols_V_out_full_n : IN STD_LOGIC;
        img_2_cols_V_out_write : OUT STD_LOGIC;
        img_4_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_4_rows_V_out_full_n : IN STD_LOGIC;
        img_4_rows_V_out_write : OUT STD_LOGIC;
        img_4_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_4_cols_V_out_full_n : IN STD_LOGIC;
        img_4_cols_V_out_write : OUT STD_LOGIC;
        img_h_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_h_rows_V_out_full_n : IN STD_LOGIC;
        img_h_rows_V_out_write : OUT STD_LOGIC;
        img_h_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_h_cols_V_out_full_n : IN STD_LOGIC;
        img_h_cols_V_out_write : OUT STD_LOGIC;
        img_s_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_s_rows_V_out_full_n : IN STD_LOGIC;
        img_s_rows_V_out_write : OUT STD_LOGIC;
        img_s_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_s_cols_V_out_full_n : IN STD_LOGIC;
        img_s_cols_V_out_write : OUT STD_LOGIC;
        img_v_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_v_rows_V_out_full_n : IN STD_LOGIC;
        img_v_rows_V_out_write : OUT STD_LOGIC;
        img_v_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_v_cols_V_out_full_n : IN STD_LOGIC;
        img_v_cols_V_out_write : OUT STD_LOGIC;
        img_hls_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_hls_rows_V_out_full_n : IN STD_LOGIC;
        img_hls_rows_V_out_write : OUT STD_LOGIC;
        img_hls_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_hls_cols_V_out_full_n : IN STD_LOGIC;
        img_hls_cols_V_out_write : OUT STD_LOGIC;
        img_dilate_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_dilate_rows_V_out_full_n : IN STD_LOGIC;
        img_dilate_rows_V_out_write : OUT STD_LOGIC;
        img_dilate_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_dilate_cols_V_out_full_n : IN STD_LOGIC;
        img_dilate_cols_V_out_write : OUT STD_LOGIC;
        img_dilate_1_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_dilate_1_rows_V_out_full_n : IN STD_LOGIC;
        img_dilate_1_rows_V_out_write : OUT STD_LOGIC;
        img_dilate_1_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_dilate_1_cols_V_out_full_n : IN STD_LOGIC;
        img_dilate_1_cols_V_out_write : OUT STD_LOGIC;
        img_erode_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_erode_rows_V_out_full_n : IN STD_LOGIC;
        img_erode_rows_V_out_write : OUT STD_LOGIC;
        img_erode_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_erode_cols_V_out_full_n : IN STD_LOGIC;
        img_erode_cols_V_out_write : OUT STD_LOGIC;
        max_h_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_h_out_full_n : IN STD_LOGIC;
        max_h_out_write : OUT STD_LOGIC;
        min_h_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        min_h_out_full_n : IN STD_LOGIC;
        min_h_out_write : OUT STD_LOGIC;
        max_s_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_s_out_full_n : IN STD_LOGIC;
        max_s_out_write : OUT STD_LOGIC;
        min_s_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        min_s_out_full_n : IN STD_LOGIC;
        min_s_out_write : OUT STD_LOGIC;
        max_v_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_v_out_full_n : IN STD_LOGIC;
        max_v_out_write : OUT STD_LOGIC;
        min_v_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        min_v_out_full_n : IN STD_LOGIC;
        min_v_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        input_r_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        input_r_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component GaussianBlur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Get_hsv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_V_empty_n : IN STD_LOGIC;
        dst_rows_V_read : OUT STD_LOGIC;
        dst_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_V_empty_n : IN STD_LOGIC;
        dst_cols_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        image_h : OUT STD_LOGIC_VECTOR (7 downto 0);
        image_h_ap_vld : OUT STD_LOGIC;
        image_s : OUT STD_LOGIC_VECTOR (7 downto 0);
        image_s_ap_vld : OUT STD_LOGIC;
        image_v : OUT STD_LOGIC_VECTOR (7 downto 0);
        image_v_ap_vld : OUT STD_LOGIC;
        dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_V_out_full_n : IN STD_LOGIC;
        dst_rows_V_out_write : OUT STD_LOGIC;
        dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_V_out_full_n : IN STD_LOGIC;
        dst_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Split IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst0_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst0_data_stream_V_full_n : IN STD_LOGIC;
        dst0_data_stream_V_write : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Threshold_l227 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        thresh_max_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        thresh_max_empty_n : IN STD_LOGIC;
        thresh_max_read : OUT STD_LOGIC;
        thresh_min_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        thresh_min_empty_n : IN STD_LOGIC;
        thresh_min_read : OUT STD_LOGIC );
    end component;


    component Threshold_l228 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        thresh_max_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        thresh_max_empty_n : IN STD_LOGIC;
        thresh_max_read : OUT STD_LOGIC;
        thresh_min_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        thresh_min_empty_n : IN STD_LOGIC;
        thresh_min_read : OUT STD_LOGIC );
    end component;


    component Threshold_l IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        thresh_max_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        thresh_max_empty_n : IN STD_LOGIC;
        thresh_max_read : OUT STD_LOGIC;
        thresh_min_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        thresh_min_empty_n : IN STD_LOGIC;
        thresh_min_read : OUT STD_LOGIC );
    end component;


    component And_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_1_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_1_data_stream_V_empty_n : IN STD_LOGIC;
        src_1_data_stream_V_read : OUT STD_LOGIC;
        src_2_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_2_data_stream_V_empty_n : IN STD_LOGIC;
        src_2_data_stream_V_read : OUT STD_LOGIC;
        src_3_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_3_data_stream_V_empty_n : IN STD_LOGIC;
        src_3_data_stream_V_read : OUT STD_LOGIC;
        dst_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_V_empty_n : IN STD_LOGIC;
        dst_rows_V_read : OUT STD_LOGIC;
        dst_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_V_empty_n : IN STD_LOGIC;
        dst_cols_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_V_out_full_n : IN STD_LOGIC;
        dst_rows_V_out_write : OUT STD_LOGIC;
        dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_V_out_full_n : IN STD_LOGIC;
        dst_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Dilate229 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Dilate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Erode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        output_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d11_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d12_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColoyd2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Get_hsvzec IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ThreshoAem IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ThreshoBew IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ThreshoCeG IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_And_3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Erode_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIDeQ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_GaussiaEe0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Split_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate2Ffa IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component threshold2_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        h : IN STD_LOGIC_VECTOR (7 downto 0);
        h_ap_vld : IN STD_LOGIC;
        s : IN STD_LOGIC_VECTOR (7 downto 0);
        s_ap_vld : IN STD_LOGIC;
        v : IN STD_LOGIC_VECTOR (7 downto 0);
        v_ap_vld : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (15 downto 0);
        cols : OUT STD_LOGIC_VECTOR (15 downto 0);
        max_h : OUT STD_LOGIC_VECTOR (7 downto 0);
        min_h : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_s : OUT STD_LOGIC_VECTOR (7 downto 0);
        min_s : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_v : OUT STD_LOGIC_VECTOR (7 downto 0);
        min_v : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    threshold2_AXILiteS_s_axi_U : component threshold2_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        h => Get_hsv_U0_image_h,
        h_ap_vld => Get_hsv_U0_image_h_ap_vld,
        s => Get_hsv_U0_image_s,
        s_ap_vld => Get_hsv_U0_image_s_ap_vld,
        v => Get_hsv_U0_image_v,
        v_ap_vld => Get_hsv_U0_image_v_ap_vld,
        rows => rows,
        cols => cols,
        max_h => max_h,
        min_h => min_h,
        max_s => max_s,
        min_s => min_s,
        max_v => max_v,
        min_v => min_v);

    Block_Mat_exit1247_p_U0 : component Block_Mat_exit1247_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit1247_p_U0_ap_start,
        start_full_n => Block_Mat_exit1247_p_U0_start_full_n,
        ap_done => Block_Mat_exit1247_p_U0_ap_done,
        ap_continue => Block_Mat_exit1247_p_U0_ap_continue,
        ap_idle => Block_Mat_exit1247_p_U0_ap_idle,
        ap_ready => Block_Mat_exit1247_p_U0_ap_ready,
        start_out => Block_Mat_exit1247_p_U0_start_out,
        start_write => Block_Mat_exit1247_p_U0_start_write,
        rows => rows,
        cols => cols,
        max_h => max_h,
        min_h => min_h,
        max_s => max_s,
        min_s => min_s,
        max_v => max_v,
        min_v => min_v,
        img_0_rows_V_out_din => Block_Mat_exit1247_p_U0_img_0_rows_V_out_din,
        img_0_rows_V_out_full_n => img_0_rows_V_c_full_n,
        img_0_rows_V_out_write => Block_Mat_exit1247_p_U0_img_0_rows_V_out_write,
        img_0_cols_V_out_din => Block_Mat_exit1247_p_U0_img_0_cols_V_out_din,
        img_0_cols_V_out_full_n => img_0_cols_V_c_full_n,
        img_0_cols_V_out_write => Block_Mat_exit1247_p_U0_img_0_cols_V_out_write,
        img_2_rows_V_out_din => Block_Mat_exit1247_p_U0_img_2_rows_V_out_din,
        img_2_rows_V_out_full_n => img_2_rows_V_c_full_n,
        img_2_rows_V_out_write => Block_Mat_exit1247_p_U0_img_2_rows_V_out_write,
        img_2_cols_V_out_din => Block_Mat_exit1247_p_U0_img_2_cols_V_out_din,
        img_2_cols_V_out_full_n => img_2_cols_V_c_full_n,
        img_2_cols_V_out_write => Block_Mat_exit1247_p_U0_img_2_cols_V_out_write,
        img_4_rows_V_out_din => Block_Mat_exit1247_p_U0_img_4_rows_V_out_din,
        img_4_rows_V_out_full_n => img_4_rows_V_c_full_n,
        img_4_rows_V_out_write => Block_Mat_exit1247_p_U0_img_4_rows_V_out_write,
        img_4_cols_V_out_din => Block_Mat_exit1247_p_U0_img_4_cols_V_out_din,
        img_4_cols_V_out_full_n => img_4_cols_V_c_full_n,
        img_4_cols_V_out_write => Block_Mat_exit1247_p_U0_img_4_cols_V_out_write,
        img_h_rows_V_out_din => Block_Mat_exit1247_p_U0_img_h_rows_V_out_din,
        img_h_rows_V_out_full_n => img_h_rows_V_c_full_n,
        img_h_rows_V_out_write => Block_Mat_exit1247_p_U0_img_h_rows_V_out_write,
        img_h_cols_V_out_din => Block_Mat_exit1247_p_U0_img_h_cols_V_out_din,
        img_h_cols_V_out_full_n => img_h_cols_V_c_full_n,
        img_h_cols_V_out_write => Block_Mat_exit1247_p_U0_img_h_cols_V_out_write,
        img_s_rows_V_out_din => Block_Mat_exit1247_p_U0_img_s_rows_V_out_din,
        img_s_rows_V_out_full_n => img_s_rows_V_c_full_n,
        img_s_rows_V_out_write => Block_Mat_exit1247_p_U0_img_s_rows_V_out_write,
        img_s_cols_V_out_din => Block_Mat_exit1247_p_U0_img_s_cols_V_out_din,
        img_s_cols_V_out_full_n => img_s_cols_V_c_full_n,
        img_s_cols_V_out_write => Block_Mat_exit1247_p_U0_img_s_cols_V_out_write,
        img_v_rows_V_out_din => Block_Mat_exit1247_p_U0_img_v_rows_V_out_din,
        img_v_rows_V_out_full_n => img_v_rows_V_c_full_n,
        img_v_rows_V_out_write => Block_Mat_exit1247_p_U0_img_v_rows_V_out_write,
        img_v_cols_V_out_din => Block_Mat_exit1247_p_U0_img_v_cols_V_out_din,
        img_v_cols_V_out_full_n => img_v_cols_V_c_full_n,
        img_v_cols_V_out_write => Block_Mat_exit1247_p_U0_img_v_cols_V_out_write,
        img_hls_rows_V_out_din => Block_Mat_exit1247_p_U0_img_hls_rows_V_out_din,
        img_hls_rows_V_out_full_n => img_hls_rows_V_c_full_n,
        img_hls_rows_V_out_write => Block_Mat_exit1247_p_U0_img_hls_rows_V_out_write,
        img_hls_cols_V_out_din => Block_Mat_exit1247_p_U0_img_hls_cols_V_out_din,
        img_hls_cols_V_out_full_n => img_hls_cols_V_c_full_n,
        img_hls_cols_V_out_write => Block_Mat_exit1247_p_U0_img_hls_cols_V_out_write,
        img_dilate_rows_V_out_din => Block_Mat_exit1247_p_U0_img_dilate_rows_V_out_din,
        img_dilate_rows_V_out_full_n => img_dilate_rows_V_c_full_n,
        img_dilate_rows_V_out_write => Block_Mat_exit1247_p_U0_img_dilate_rows_V_out_write,
        img_dilate_cols_V_out_din => Block_Mat_exit1247_p_U0_img_dilate_cols_V_out_din,
        img_dilate_cols_V_out_full_n => img_dilate_cols_V_c_full_n,
        img_dilate_cols_V_out_write => Block_Mat_exit1247_p_U0_img_dilate_cols_V_out_write,
        img_dilate_1_rows_V_out_din => Block_Mat_exit1247_p_U0_img_dilate_1_rows_V_out_din,
        img_dilate_1_rows_V_out_full_n => img_dilate_1_rows_V_s_full_n,
        img_dilate_1_rows_V_out_write => Block_Mat_exit1247_p_U0_img_dilate_1_rows_V_out_write,
        img_dilate_1_cols_V_out_din => Block_Mat_exit1247_p_U0_img_dilate_1_cols_V_out_din,
        img_dilate_1_cols_V_out_full_n => img_dilate_1_cols_V_s_full_n,
        img_dilate_1_cols_V_out_write => Block_Mat_exit1247_p_U0_img_dilate_1_cols_V_out_write,
        img_erode_rows_V_out_din => Block_Mat_exit1247_p_U0_img_erode_rows_V_out_din,
        img_erode_rows_V_out_full_n => img_erode_rows_V_c_full_n,
        img_erode_rows_V_out_write => Block_Mat_exit1247_p_U0_img_erode_rows_V_out_write,
        img_erode_cols_V_out_din => Block_Mat_exit1247_p_U0_img_erode_cols_V_out_din,
        img_erode_cols_V_out_full_n => img_erode_cols_V_c_full_n,
        img_erode_cols_V_out_write => Block_Mat_exit1247_p_U0_img_erode_cols_V_out_write,
        max_h_out_din => Block_Mat_exit1247_p_U0_max_h_out_din,
        max_h_out_full_n => max_h_c_full_n,
        max_h_out_write => Block_Mat_exit1247_p_U0_max_h_out_write,
        min_h_out_din => Block_Mat_exit1247_p_U0_min_h_out_din,
        min_h_out_full_n => min_h_c_full_n,
        min_h_out_write => Block_Mat_exit1247_p_U0_min_h_out_write,
        max_s_out_din => Block_Mat_exit1247_p_U0_max_s_out_din,
        max_s_out_full_n => max_s_c_full_n,
        max_s_out_write => Block_Mat_exit1247_p_U0_max_s_out_write,
        min_s_out_din => Block_Mat_exit1247_p_U0_min_s_out_din,
        min_s_out_full_n => min_s_c_full_n,
        min_s_out_write => Block_Mat_exit1247_p_U0_min_s_out_write,
        max_v_out_din => Block_Mat_exit1247_p_U0_max_v_out_din,
        max_v_out_full_n => max_v_c_full_n,
        max_v_out_write => Block_Mat_exit1247_p_U0_max_v_out_write,
        min_v_out_din => Block_Mat_exit1247_p_U0_min_v_out_din,
        min_v_out_full_n => min_v_c_full_n,
        min_v_out_write => Block_Mat_exit1247_p_U0_min_v_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_GaussianBlur_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        input_r_TDATA => input_r_TDATA,
        input_r_TVALID => input_r_TVALID,
        input_r_TREADY => AXIvideo2Mat_U0_input_r_TREADY,
        input_r_TKEEP => input_r_TKEEP,
        input_r_TSTRB => input_r_TSTRB,
        input_r_TUSER => input_r_TUSER,
        input_r_TLAST => input_r_TLAST,
        input_r_TID => input_r_TID,
        input_r_TDEST => input_r_TDEST,
        img_rows_V_dout => img_0_rows_V_c_dout,
        img_rows_V_empty_n => img_0_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => img_0_cols_V_c_dout,
        img_cols_V_empty_n => img_0_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => img_0_rows_V_c75_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img_0_cols_V_c76_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    GaussianBlur_U0 : component GaussianBlur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => GaussianBlur_U0_ap_start,
        ap_done => GaussianBlur_U0_ap_done,
        ap_continue => GaussianBlur_U0_ap_continue,
        ap_idle => GaussianBlur_U0_ap_idle,
        ap_ready => GaussianBlur_U0_ap_ready,
        p_src_rows_V_dout => img_0_rows_V_c75_dout,
        p_src_rows_V_empty_n => img_0_rows_V_c75_empty_n,
        p_src_rows_V_read => GaussianBlur_U0_p_src_rows_V_read,
        p_src_cols_V_dout => img_0_cols_V_c76_dout,
        p_src_cols_V_empty_n => img_0_cols_V_c76_empty_n,
        p_src_cols_V_read => GaussianBlur_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => img_0_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => GaussianBlur_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_0_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => GaussianBlur_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_0_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => GaussianBlur_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => GaussianBlur_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_2_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => GaussianBlur_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => GaussianBlur_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_2_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => GaussianBlur_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => GaussianBlur_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_2_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => GaussianBlur_U0_p_dst_data_stream_2_V_write);

    CvtColor_U0 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_U0_ap_start,
        ap_done => CvtColor_U0_ap_done,
        ap_continue => CvtColor_U0_ap_continue,
        ap_idle => CvtColor_U0_ap_idle,
        ap_ready => CvtColor_U0_ap_ready,
        p_src_rows_V_dout => img_2_rows_V_c_dout,
        p_src_rows_V_empty_n => img_2_rows_V_c_empty_n,
        p_src_rows_V_read => CvtColor_U0_p_src_rows_V_read,
        p_src_cols_V_dout => img_2_cols_V_c_dout,
        p_src_cols_V_empty_n => img_2_cols_V_c_empty_n,
        p_src_cols_V_read => CvtColor_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => img_2_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_2_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_2_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_2_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_2_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_2_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => CvtColor_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_3_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => CvtColor_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => CvtColor_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_3_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => CvtColor_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => CvtColor_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_3_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => CvtColor_U0_p_dst_data_stream_2_V_write);

    Get_hsv_U0 : component Get_hsv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Get_hsv_U0_ap_start,
        start_full_n => start_for_Split_U0_full_n,
        ap_done => Get_hsv_U0_ap_done,
        ap_continue => Get_hsv_U0_ap_continue,
        ap_idle => Get_hsv_U0_ap_idle,
        ap_ready => Get_hsv_U0_ap_ready,
        start_out => Get_hsv_U0_start_out,
        start_write => Get_hsv_U0_start_write,
        src_data_stream_0_V_dout => img_3_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_3_data_stream_0_empty_n,
        src_data_stream_0_V_read => Get_hsv_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_3_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_3_data_stream_1_empty_n,
        src_data_stream_1_V_read => Get_hsv_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => img_3_data_stream_2_dout,
        src_data_stream_2_V_empty_n => img_3_data_stream_2_empty_n,
        src_data_stream_2_V_read => Get_hsv_U0_src_data_stream_2_V_read,
        dst_rows_V_dout => img_4_rows_V_c_dout,
        dst_rows_V_empty_n => img_4_rows_V_c_empty_n,
        dst_rows_V_read => Get_hsv_U0_dst_rows_V_read,
        dst_cols_V_dout => img_4_cols_V_c_dout,
        dst_cols_V_empty_n => img_4_cols_V_c_empty_n,
        dst_cols_V_read => Get_hsv_U0_dst_cols_V_read,
        dst_data_stream_0_V_din => Get_hsv_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => img_4_data_stream_0_full_n,
        dst_data_stream_0_V_write => Get_hsv_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Get_hsv_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => img_4_data_stream_1_full_n,
        dst_data_stream_1_V_write => Get_hsv_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Get_hsv_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => img_4_data_stream_2_full_n,
        dst_data_stream_2_V_write => Get_hsv_U0_dst_data_stream_2_V_write,
        image_h => Get_hsv_U0_image_h,
        image_h_ap_vld => Get_hsv_U0_image_h_ap_vld,
        image_s => Get_hsv_U0_image_s,
        image_s_ap_vld => Get_hsv_U0_image_s_ap_vld,
        image_v => Get_hsv_U0_image_v,
        image_v_ap_vld => Get_hsv_U0_image_v_ap_vld,
        dst_rows_V_out_din => Get_hsv_U0_dst_rows_V_out_din,
        dst_rows_V_out_full_n => img_4_rows_V_c77_full_n,
        dst_rows_V_out_write => Get_hsv_U0_dst_rows_V_out_write,
        dst_cols_V_out_din => Get_hsv_U0_dst_cols_V_out_din,
        dst_cols_V_out_full_n => img_4_cols_V_c78_full_n,
        dst_cols_V_out_write => Get_hsv_U0_dst_cols_V_out_write);

    Split_U0 : component Split
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Split_U0_ap_start,
        ap_done => Split_U0_ap_done,
        ap_continue => Split_U0_ap_continue,
        ap_idle => Split_U0_ap_idle,
        ap_ready => Split_U0_ap_ready,
        src_rows_V_dout => img_4_rows_V_c77_dout,
        src_rows_V_empty_n => img_4_rows_V_c77_empty_n,
        src_rows_V_read => Split_U0_src_rows_V_read,
        src_cols_V_dout => img_4_cols_V_c78_dout,
        src_cols_V_empty_n => img_4_cols_V_c78_empty_n,
        src_cols_V_read => Split_U0_src_cols_V_read,
        src_data_stream_0_V_dout => img_4_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_4_data_stream_0_empty_n,
        src_data_stream_0_V_read => Split_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_4_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_4_data_stream_1_empty_n,
        src_data_stream_1_V_read => Split_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => img_4_data_stream_2_dout,
        src_data_stream_2_V_empty_n => img_4_data_stream_2_empty_n,
        src_data_stream_2_V_read => Split_U0_src_data_stream_2_V_read,
        dst0_data_stream_V_din => Split_U0_dst0_data_stream_V_din,
        dst0_data_stream_V_full_n => img_h_data_stream_0_full_n,
        dst0_data_stream_V_write => Split_U0_dst0_data_stream_V_write,
        dst1_data_stream_V_din => Split_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => img_s_data_stream_0_full_n,
        dst1_data_stream_V_write => Split_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Split_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => img_v_data_stream_0_full_n,
        dst2_data_stream_V_write => Split_U0_dst2_data_stream_V_write);

    Threshold_l227_U0 : component Threshold_l227
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Threshold_l227_U0_ap_start,
        ap_done => Threshold_l227_U0_ap_done,
        ap_continue => Threshold_l227_U0_ap_continue,
        ap_idle => Threshold_l227_U0_ap_idle,
        ap_ready => Threshold_l227_U0_ap_ready,
        src_rows_V_dout => img_h_rows_V_c_dout,
        src_rows_V_empty_n => img_h_rows_V_c_empty_n,
        src_rows_V_read => Threshold_l227_U0_src_rows_V_read,
        src_cols_V_dout => img_h_cols_V_c_dout,
        src_cols_V_empty_n => img_h_cols_V_c_empty_n,
        src_cols_V_read => Threshold_l227_U0_src_cols_V_read,
        src_data_stream_V_dout => img_h_data_stream_0_dout,
        src_data_stream_V_empty_n => img_h_data_stream_0_empty_n,
        src_data_stream_V_read => Threshold_l227_U0_src_data_stream_V_read,
        dst_data_stream_V_din => Threshold_l227_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_h_1_data_stream_s_full_n,
        dst_data_stream_V_write => Threshold_l227_U0_dst_data_stream_V_write,
        thresh_max_dout => max_h_c_dout,
        thresh_max_empty_n => max_h_c_empty_n,
        thresh_max_read => Threshold_l227_U0_thresh_max_read,
        thresh_min_dout => min_h_c_dout,
        thresh_min_empty_n => min_h_c_empty_n,
        thresh_min_read => Threshold_l227_U0_thresh_min_read);

    Threshold_l228_U0 : component Threshold_l228
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Threshold_l228_U0_ap_start,
        ap_done => Threshold_l228_U0_ap_done,
        ap_continue => Threshold_l228_U0_ap_continue,
        ap_idle => Threshold_l228_U0_ap_idle,
        ap_ready => Threshold_l228_U0_ap_ready,
        src_rows_V_dout => img_s_rows_V_c_dout,
        src_rows_V_empty_n => img_s_rows_V_c_empty_n,
        src_rows_V_read => Threshold_l228_U0_src_rows_V_read,
        src_cols_V_dout => img_s_cols_V_c_dout,
        src_cols_V_empty_n => img_s_cols_V_c_empty_n,
        src_cols_V_read => Threshold_l228_U0_src_cols_V_read,
        src_data_stream_V_dout => img_s_data_stream_0_dout,
        src_data_stream_V_empty_n => img_s_data_stream_0_empty_n,
        src_data_stream_V_read => Threshold_l228_U0_src_data_stream_V_read,
        dst_data_stream_V_din => Threshold_l228_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_s_1_data_stream_s_full_n,
        dst_data_stream_V_write => Threshold_l228_U0_dst_data_stream_V_write,
        thresh_max_dout => max_s_c_dout,
        thresh_max_empty_n => max_s_c_empty_n,
        thresh_max_read => Threshold_l228_U0_thresh_max_read,
        thresh_min_dout => min_s_c_dout,
        thresh_min_empty_n => min_s_c_empty_n,
        thresh_min_read => Threshold_l228_U0_thresh_min_read);

    Threshold_l_U0 : component Threshold_l
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Threshold_l_U0_ap_start,
        ap_done => Threshold_l_U0_ap_done,
        ap_continue => Threshold_l_U0_ap_continue,
        ap_idle => Threshold_l_U0_ap_idle,
        ap_ready => Threshold_l_U0_ap_ready,
        src_rows_V_dout => img_v_rows_V_c_dout,
        src_rows_V_empty_n => img_v_rows_V_c_empty_n,
        src_rows_V_read => Threshold_l_U0_src_rows_V_read,
        src_cols_V_dout => img_v_cols_V_c_dout,
        src_cols_V_empty_n => img_v_cols_V_c_empty_n,
        src_cols_V_read => Threshold_l_U0_src_cols_V_read,
        src_data_stream_V_dout => img_v_data_stream_0_dout,
        src_data_stream_V_empty_n => img_v_data_stream_0_empty_n,
        src_data_stream_V_read => Threshold_l_U0_src_data_stream_V_read,
        dst_data_stream_V_din => Threshold_l_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_v_1_data_stream_s_full_n,
        dst_data_stream_V_write => Threshold_l_U0_dst_data_stream_V_write,
        thresh_max_dout => max_v_c_dout,
        thresh_max_empty_n => max_v_c_empty_n,
        thresh_max_read => Threshold_l_U0_thresh_max_read,
        thresh_min_dout => min_v_c_dout,
        thresh_min_empty_n => min_v_c_empty_n,
        thresh_min_read => Threshold_l_U0_thresh_min_read);

    And_3_U0 : component And_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => And_3_U0_ap_start,
        start_full_n => start_for_Dilate229_U0_full_n,
        ap_done => And_3_U0_ap_done,
        ap_continue => And_3_U0_ap_continue,
        ap_idle => And_3_U0_ap_idle,
        ap_ready => And_3_U0_ap_ready,
        start_out => And_3_U0_start_out,
        start_write => And_3_U0_start_write,
        src_1_data_stream_V_dout => img_h_1_data_stream_s_dout,
        src_1_data_stream_V_empty_n => img_h_1_data_stream_s_empty_n,
        src_1_data_stream_V_read => And_3_U0_src_1_data_stream_V_read,
        src_2_data_stream_V_dout => img_s_1_data_stream_s_dout,
        src_2_data_stream_V_empty_n => img_s_1_data_stream_s_empty_n,
        src_2_data_stream_V_read => And_3_U0_src_2_data_stream_V_read,
        src_3_data_stream_V_dout => img_v_1_data_stream_s_dout,
        src_3_data_stream_V_empty_n => img_v_1_data_stream_s_empty_n,
        src_3_data_stream_V_read => And_3_U0_src_3_data_stream_V_read,
        dst_rows_V_dout => img_hls_rows_V_c_dout,
        dst_rows_V_empty_n => img_hls_rows_V_c_empty_n,
        dst_rows_V_read => And_3_U0_dst_rows_V_read,
        dst_cols_V_dout => img_hls_cols_V_c_dout,
        dst_cols_V_empty_n => img_hls_cols_V_c_empty_n,
        dst_cols_V_read => And_3_U0_dst_cols_V_read,
        dst_data_stream_V_din => And_3_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_hls_data_stream_s_full_n,
        dst_data_stream_V_write => And_3_U0_dst_data_stream_V_write,
        dst_rows_V_out_din => And_3_U0_dst_rows_V_out_din,
        dst_rows_V_out_full_n => img_hls_rows_V_c79_full_n,
        dst_rows_V_out_write => And_3_U0_dst_rows_V_out_write,
        dst_cols_V_out_din => And_3_U0_dst_cols_V_out_din,
        dst_cols_V_out_full_n => img_hls_cols_V_c80_full_n,
        dst_cols_V_out_write => And_3_U0_dst_cols_V_out_write);

    Dilate229_U0 : component Dilate229
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate229_U0_ap_start,
        ap_done => Dilate229_U0_ap_done,
        ap_continue => Dilate229_U0_ap_continue,
        ap_idle => Dilate229_U0_ap_idle,
        ap_ready => Dilate229_U0_ap_ready,
        p_src_rows_V_dout => img_hls_rows_V_c79_dout,
        p_src_rows_V_empty_n => img_hls_rows_V_c79_empty_n,
        p_src_rows_V_read => Dilate229_U0_p_src_rows_V_read,
        p_src_cols_V_dout => img_hls_cols_V_c80_dout,
        p_src_cols_V_empty_n => img_hls_cols_V_c80_empty_n,
        p_src_cols_V_read => Dilate229_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => img_hls_data_stream_s_dout,
        p_src_data_stream_V_empty_n => img_hls_data_stream_s_empty_n,
        p_src_data_stream_V_read => Dilate229_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate229_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => img_dilate_data_stre_full_n,
        p_dst_data_stream_V_write => Dilate229_U0_p_dst_data_stream_V_write);

    Dilate_U0 : component Dilate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate_U0_ap_start,
        ap_done => Dilate_U0_ap_done,
        ap_continue => Dilate_U0_ap_continue,
        ap_idle => Dilate_U0_ap_idle,
        ap_ready => Dilate_U0_ap_ready,
        p_src_rows_V_dout => img_dilate_rows_V_c_dout,
        p_src_rows_V_empty_n => img_dilate_rows_V_c_empty_n,
        p_src_rows_V_read => Dilate_U0_p_src_rows_V_read,
        p_src_cols_V_dout => img_dilate_cols_V_c_dout,
        p_src_cols_V_empty_n => img_dilate_cols_V_c_empty_n,
        p_src_cols_V_read => Dilate_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => img_dilate_data_stre_dout,
        p_src_data_stream_V_empty_n => img_dilate_data_stre_empty_n,
        p_src_data_stream_V_read => Dilate_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => img_dilate_1_data_st_full_n,
        p_dst_data_stream_V_write => Dilate_U0_p_dst_data_stream_V_write);

    Erode_U0 : component Erode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Erode_U0_ap_start,
        ap_done => Erode_U0_ap_done,
        ap_continue => Erode_U0_ap_continue,
        ap_idle => Erode_U0_ap_idle,
        ap_ready => Erode_U0_ap_ready,
        p_src_rows_V_dout => img_dilate_1_rows_V_s_dout,
        p_src_rows_V_empty_n => img_dilate_1_rows_V_s_empty_n,
        p_src_rows_V_read => Erode_U0_p_src_rows_V_read,
        p_src_cols_V_dout => img_dilate_1_cols_V_s_dout,
        p_src_cols_V_empty_n => img_dilate_1_cols_V_s_empty_n,
        p_src_cols_V_read => Erode_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => img_dilate_1_data_st_dout,
        p_src_data_stream_V_empty_n => img_dilate_1_data_st_empty_n,
        p_src_data_stream_V_read => Erode_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Erode_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => img_erode_data_strea_full_n,
        p_dst_data_stream_V_write => Erode_U0_p_dst_data_stream_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V_dout => img_erode_rows_V_c_dout,
        img_rows_V_empty_n => img_erode_rows_V_c_empty_n,
        img_rows_V_read => Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_dout => img_erode_cols_V_c_dout,
        img_cols_V_empty_n => img_erode_cols_V_c_empty_n,
        img_cols_V_read => Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_V_dout => img_erode_data_strea_dout,
        img_data_stream_V_empty_n => img_erode_data_strea_empty_n,
        img_data_stream_V_read => Mat2AXIvideo_U0_img_data_stream_V_read,
        output_r_TDATA => Mat2AXIvideo_U0_output_r_TDATA,
        output_r_TVALID => Mat2AXIvideo_U0_output_r_TVALID,
        output_r_TREADY => output_r_TREADY,
        output_r_TKEEP => Mat2AXIvideo_U0_output_r_TKEEP,
        output_r_TSTRB => Mat2AXIvideo_U0_output_r_TSTRB,
        output_r_TUSER => Mat2AXIvideo_U0_output_r_TUSER,
        output_r_TLAST => Mat2AXIvideo_U0_output_r_TLAST,
        output_r_TID => Mat2AXIvideo_U0_output_r_TID,
        output_r_TDEST => Mat2AXIvideo_U0_output_r_TDEST);

    img_0_rows_V_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_0_rows_V_out_din,
        if_full_n => img_0_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_0_rows_V_out_write,
        if_dout => img_0_rows_V_c_dout,
        if_empty_n => img_0_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    img_0_cols_V_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_0_cols_V_out_din,
        if_full_n => img_0_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_0_cols_V_out_write,
        if_dout => img_0_cols_V_c_dout,
        if_empty_n => img_0_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    img_2_rows_V_c_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_2_rows_V_out_din,
        if_full_n => img_2_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_2_rows_V_out_write,
        if_dout => img_2_rows_V_c_dout,
        if_empty_n => img_2_rows_V_c_empty_n,
        if_read => CvtColor_U0_p_src_rows_V_read);

    img_2_cols_V_c_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_2_cols_V_out_din,
        if_full_n => img_2_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_2_cols_V_out_write,
        if_dout => img_2_cols_V_c_dout,
        if_empty_n => img_2_cols_V_c_empty_n,
        if_read => CvtColor_U0_p_src_cols_V_read);

    img_4_rows_V_c_U : component fifo_w16_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_4_rows_V_out_din,
        if_full_n => img_4_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_4_rows_V_out_write,
        if_dout => img_4_rows_V_c_dout,
        if_empty_n => img_4_rows_V_c_empty_n,
        if_read => Get_hsv_U0_dst_rows_V_read);

    img_4_cols_V_c_U : component fifo_w16_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_4_cols_V_out_din,
        if_full_n => img_4_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_4_cols_V_out_write,
        if_dout => img_4_cols_V_c_dout,
        if_empty_n => img_4_cols_V_c_empty_n,
        if_read => Get_hsv_U0_dst_cols_V_read);

    img_h_rows_V_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_h_rows_V_out_din,
        if_full_n => img_h_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_h_rows_V_out_write,
        if_dout => img_h_rows_V_c_dout,
        if_empty_n => img_h_rows_V_c_empty_n,
        if_read => Threshold_l227_U0_src_rows_V_read);

    img_h_cols_V_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_h_cols_V_out_din,
        if_full_n => img_h_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_h_cols_V_out_write,
        if_dout => img_h_cols_V_c_dout,
        if_empty_n => img_h_cols_V_c_empty_n,
        if_read => Threshold_l227_U0_src_cols_V_read);

    img_s_rows_V_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_s_rows_V_out_din,
        if_full_n => img_s_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_s_rows_V_out_write,
        if_dout => img_s_rows_V_c_dout,
        if_empty_n => img_s_rows_V_c_empty_n,
        if_read => Threshold_l228_U0_src_rows_V_read);

    img_s_cols_V_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_s_cols_V_out_din,
        if_full_n => img_s_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_s_cols_V_out_write,
        if_dout => img_s_cols_V_c_dout,
        if_empty_n => img_s_cols_V_c_empty_n,
        if_read => Threshold_l228_U0_src_cols_V_read);

    img_v_rows_V_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_v_rows_V_out_din,
        if_full_n => img_v_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_v_rows_V_out_write,
        if_dout => img_v_rows_V_c_dout,
        if_empty_n => img_v_rows_V_c_empty_n,
        if_read => Threshold_l_U0_src_rows_V_read);

    img_v_cols_V_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_v_cols_V_out_din,
        if_full_n => img_v_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_v_cols_V_out_write,
        if_dout => img_v_cols_V_c_dout,
        if_empty_n => img_v_cols_V_c_empty_n,
        if_read => Threshold_l_U0_src_cols_V_read);

    img_hls_rows_V_c_U : component fifo_w16_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_hls_rows_V_out_din,
        if_full_n => img_hls_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_hls_rows_V_out_write,
        if_dout => img_hls_rows_V_c_dout,
        if_empty_n => img_hls_rows_V_c_empty_n,
        if_read => And_3_U0_dst_rows_V_read);

    img_hls_cols_V_c_U : component fifo_w16_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_hls_cols_V_out_din,
        if_full_n => img_hls_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_hls_cols_V_out_write,
        if_dout => img_hls_cols_V_c_dout,
        if_empty_n => img_hls_cols_V_c_empty_n,
        if_read => And_3_U0_dst_cols_V_read);

    img_dilate_rows_V_c_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_dilate_rows_V_out_din,
        if_full_n => img_dilate_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_dilate_rows_V_out_write,
        if_dout => img_dilate_rows_V_c_dout,
        if_empty_n => img_dilate_rows_V_c_empty_n,
        if_read => Dilate_U0_p_src_rows_V_read);

    img_dilate_cols_V_c_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_dilate_cols_V_out_din,
        if_full_n => img_dilate_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_dilate_cols_V_out_write,
        if_dout => img_dilate_cols_V_c_dout,
        if_empty_n => img_dilate_cols_V_c_empty_n,
        if_read => Dilate_U0_p_src_cols_V_read);

    img_dilate_1_rows_V_s_U : component fifo_w16_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_dilate_1_rows_V_out_din,
        if_full_n => img_dilate_1_rows_V_s_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_dilate_1_rows_V_out_write,
        if_dout => img_dilate_1_rows_V_s_dout,
        if_empty_n => img_dilate_1_rows_V_s_empty_n,
        if_read => Erode_U0_p_src_rows_V_read);

    img_dilate_1_cols_V_s_U : component fifo_w16_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_dilate_1_cols_V_out_din,
        if_full_n => img_dilate_1_cols_V_s_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_dilate_1_cols_V_out_write,
        if_dout => img_dilate_1_cols_V_s_dout,
        if_empty_n => img_dilate_1_cols_V_s_empty_n,
        if_read => Erode_U0_p_src_cols_V_read);

    img_erode_rows_V_c_U : component fifo_w16_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_erode_rows_V_out_din,
        if_full_n => img_erode_rows_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_erode_rows_V_out_write,
        if_dout => img_erode_rows_V_c_dout,
        if_empty_n => img_erode_rows_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_rows_V_read);

    img_erode_cols_V_c_U : component fifo_w16_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_img_erode_cols_V_out_din,
        if_full_n => img_erode_cols_V_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_img_erode_cols_V_out_write,
        if_dout => img_erode_cols_V_c_dout,
        if_empty_n => img_erode_cols_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_cols_V_read);

    max_h_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_max_h_out_din,
        if_full_n => max_h_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_max_h_out_write,
        if_dout => max_h_c_dout,
        if_empty_n => max_h_c_empty_n,
        if_read => Threshold_l227_U0_thresh_max_read);

    min_h_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_min_h_out_din,
        if_full_n => min_h_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_min_h_out_write,
        if_dout => min_h_c_dout,
        if_empty_n => min_h_c_empty_n,
        if_read => Threshold_l227_U0_thresh_min_read);

    max_s_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_max_s_out_din,
        if_full_n => max_s_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_max_s_out_write,
        if_dout => max_s_c_dout,
        if_empty_n => max_s_c_empty_n,
        if_read => Threshold_l228_U0_thresh_max_read);

    min_s_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_min_s_out_din,
        if_full_n => min_s_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_min_s_out_write,
        if_dout => min_s_c_dout,
        if_empty_n => min_s_c_empty_n,
        if_read => Threshold_l228_U0_thresh_min_read);

    max_v_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_max_v_out_din,
        if_full_n => max_v_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_max_v_out_write,
        if_dout => max_v_c_dout,
        if_empty_n => max_v_c_empty_n,
        if_read => Threshold_l_U0_thresh_max_read);

    min_v_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1247_p_U0_min_v_out_din,
        if_full_n => min_v_c_full_n,
        if_write => Block_Mat_exit1247_p_U0_min_v_out_write,
        if_dout => min_v_c_dout,
        if_empty_n => min_v_c_empty_n,
        if_read => Threshold_l_U0_thresh_min_read);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => GaussianBlur_U0_p_src_data_stream_0_V_read);

    img_0_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => GaussianBlur_U0_p_src_data_stream_1_V_read);

    img_0_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => GaussianBlur_U0_p_src_data_stream_2_V_read);

    img_0_rows_V_c75_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => img_0_rows_V_c75_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => img_0_rows_V_c75_dout,
        if_empty_n => img_0_rows_V_c75_empty_n,
        if_read => GaussianBlur_U0_p_src_rows_V_read);

    img_0_cols_V_c76_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => img_0_cols_V_c76_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => img_0_cols_V_c76_dout,
        if_empty_n => img_0_cols_V_c76_empty_n,
        if_read => GaussianBlur_U0_p_src_cols_V_read);

    img_2_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => GaussianBlur_U0_p_dst_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_full_n,
        if_write => GaussianBlur_U0_p_dst_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_dout,
        if_empty_n => img_2_data_stream_0_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_0_V_read);

    img_2_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => GaussianBlur_U0_p_dst_data_stream_1_V_din,
        if_full_n => img_2_data_stream_1_full_n,
        if_write => GaussianBlur_U0_p_dst_data_stream_1_V_write,
        if_dout => img_2_data_stream_1_dout,
        if_empty_n => img_2_data_stream_1_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_1_V_read);

    img_2_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => GaussianBlur_U0_p_dst_data_stream_2_V_din,
        if_full_n => img_2_data_stream_2_full_n,
        if_write => GaussianBlur_U0_p_dst_data_stream_2_V_write,
        if_dout => img_2_data_stream_2_dout,
        if_empty_n => img_2_data_stream_2_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_2_V_read);

    img_3_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_0_V_din,
        if_full_n => img_3_data_stream_0_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_0_V_write,
        if_dout => img_3_data_stream_0_dout,
        if_empty_n => img_3_data_stream_0_empty_n,
        if_read => Get_hsv_U0_src_data_stream_0_V_read);

    img_3_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_1_V_din,
        if_full_n => img_3_data_stream_1_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_1_V_write,
        if_dout => img_3_data_stream_1_dout,
        if_empty_n => img_3_data_stream_1_empty_n,
        if_read => Get_hsv_U0_src_data_stream_1_V_read);

    img_3_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_2_V_din,
        if_full_n => img_3_data_stream_2_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_2_V_write,
        if_dout => img_3_data_stream_2_dout,
        if_empty_n => img_3_data_stream_2_empty_n,
        if_read => Get_hsv_U0_src_data_stream_2_V_read);

    img_4_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Get_hsv_U0_dst_data_stream_0_V_din,
        if_full_n => img_4_data_stream_0_full_n,
        if_write => Get_hsv_U0_dst_data_stream_0_V_write,
        if_dout => img_4_data_stream_0_dout,
        if_empty_n => img_4_data_stream_0_empty_n,
        if_read => Split_U0_src_data_stream_0_V_read);

    img_4_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Get_hsv_U0_dst_data_stream_1_V_din,
        if_full_n => img_4_data_stream_1_full_n,
        if_write => Get_hsv_U0_dst_data_stream_1_V_write,
        if_dout => img_4_data_stream_1_dout,
        if_empty_n => img_4_data_stream_1_empty_n,
        if_read => Split_U0_src_data_stream_1_V_read);

    img_4_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Get_hsv_U0_dst_data_stream_2_V_din,
        if_full_n => img_4_data_stream_2_full_n,
        if_write => Get_hsv_U0_dst_data_stream_2_V_write,
        if_dout => img_4_data_stream_2_dout,
        if_empty_n => img_4_data_stream_2_empty_n,
        if_read => Split_U0_src_data_stream_2_V_read);

    img_4_rows_V_c77_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Get_hsv_U0_dst_rows_V_out_din,
        if_full_n => img_4_rows_V_c77_full_n,
        if_write => Get_hsv_U0_dst_rows_V_out_write,
        if_dout => img_4_rows_V_c77_dout,
        if_empty_n => img_4_rows_V_c77_empty_n,
        if_read => Split_U0_src_rows_V_read);

    img_4_cols_V_c78_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Get_hsv_U0_dst_cols_V_out_din,
        if_full_n => img_4_cols_V_c78_full_n,
        if_write => Get_hsv_U0_dst_cols_V_out_write,
        if_dout => img_4_cols_V_c78_dout,
        if_empty_n => img_4_cols_V_c78_empty_n,
        if_read => Split_U0_src_cols_V_read);

    img_h_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Split_U0_dst0_data_stream_V_din,
        if_full_n => img_h_data_stream_0_full_n,
        if_write => Split_U0_dst0_data_stream_V_write,
        if_dout => img_h_data_stream_0_dout,
        if_empty_n => img_h_data_stream_0_empty_n,
        if_read => Threshold_l227_U0_src_data_stream_V_read);

    img_s_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Split_U0_dst1_data_stream_V_din,
        if_full_n => img_s_data_stream_0_full_n,
        if_write => Split_U0_dst1_data_stream_V_write,
        if_dout => img_s_data_stream_0_dout,
        if_empty_n => img_s_data_stream_0_empty_n,
        if_read => Threshold_l228_U0_src_data_stream_V_read);

    img_v_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Split_U0_dst2_data_stream_V_din,
        if_full_n => img_v_data_stream_0_full_n,
        if_write => Split_U0_dst2_data_stream_V_write,
        if_dout => img_v_data_stream_0_dout,
        if_empty_n => img_v_data_stream_0_empty_n,
        if_read => Threshold_l_U0_src_data_stream_V_read);

    img_h_1_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Threshold_l227_U0_dst_data_stream_V_din,
        if_full_n => img_h_1_data_stream_s_full_n,
        if_write => Threshold_l227_U0_dst_data_stream_V_write,
        if_dout => img_h_1_data_stream_s_dout,
        if_empty_n => img_h_1_data_stream_s_empty_n,
        if_read => And_3_U0_src_1_data_stream_V_read);

    img_s_1_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Threshold_l228_U0_dst_data_stream_V_din,
        if_full_n => img_s_1_data_stream_s_full_n,
        if_write => Threshold_l228_U0_dst_data_stream_V_write,
        if_dout => img_s_1_data_stream_s_dout,
        if_empty_n => img_s_1_data_stream_s_empty_n,
        if_read => And_3_U0_src_2_data_stream_V_read);

    img_v_1_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Threshold_l_U0_dst_data_stream_V_din,
        if_full_n => img_v_1_data_stream_s_full_n,
        if_write => Threshold_l_U0_dst_data_stream_V_write,
        if_dout => img_v_1_data_stream_s_dout,
        if_empty_n => img_v_1_data_stream_s_empty_n,
        if_read => And_3_U0_src_3_data_stream_V_read);

    img_hls_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => And_3_U0_dst_data_stream_V_din,
        if_full_n => img_hls_data_stream_s_full_n,
        if_write => And_3_U0_dst_data_stream_V_write,
        if_dout => img_hls_data_stream_s_dout,
        if_empty_n => img_hls_data_stream_s_empty_n,
        if_read => Dilate229_U0_p_src_data_stream_V_read);

    img_hls_rows_V_c79_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => And_3_U0_dst_rows_V_out_din,
        if_full_n => img_hls_rows_V_c79_full_n,
        if_write => And_3_U0_dst_rows_V_out_write,
        if_dout => img_hls_rows_V_c79_dout,
        if_empty_n => img_hls_rows_V_c79_empty_n,
        if_read => Dilate229_U0_p_src_rows_V_read);

    img_hls_cols_V_c80_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => And_3_U0_dst_cols_V_out_din,
        if_full_n => img_hls_cols_V_c80_full_n,
        if_write => And_3_U0_dst_cols_V_out_write,
        if_dout => img_hls_cols_V_c80_dout,
        if_empty_n => img_hls_cols_V_c80_empty_n,
        if_read => Dilate229_U0_p_src_cols_V_read);

    img_dilate_data_stre_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate229_U0_p_dst_data_stream_V_din,
        if_full_n => img_dilate_data_stre_full_n,
        if_write => Dilate229_U0_p_dst_data_stream_V_write,
        if_dout => img_dilate_data_stre_dout,
        if_empty_n => img_dilate_data_stre_empty_n,
        if_read => Dilate_U0_p_src_data_stream_V_read);

    img_dilate_1_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate_U0_p_dst_data_stream_V_din,
        if_full_n => img_dilate_1_data_st_full_n,
        if_write => Dilate_U0_p_dst_data_stream_V_write,
        if_dout => img_dilate_1_data_st_dout,
        if_empty_n => img_dilate_1_data_st_empty_n,
        if_read => Erode_U0_p_src_data_stream_V_read);

    img_erode_data_strea_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Erode_U0_p_dst_data_stream_V_din,
        if_full_n => img_erode_data_strea_full_n,
        if_write => Erode_U0_p_dst_data_stream_V_write,
        if_dout => img_erode_data_strea_dout,
        if_empty_n => img_erode_data_strea_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_V_read);

    start_for_CvtColoyd2_U : component start_for_CvtColoyd2
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_U0_din,
        if_full_n => start_for_CvtColor_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_CvtColor_U0_dout,
        if_empty_n => start_for_CvtColor_U0_empty_n,
        if_read => CvtColor_U0_ap_ready);

    start_for_Get_hsvzec_U : component start_for_Get_hsvzec
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Get_hsv_U0_din,
        if_full_n => start_for_Get_hsv_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_Get_hsv_U0_dout,
        if_empty_n => start_for_Get_hsv_U0_empty_n,
        if_read => Get_hsv_U0_ap_ready);

    start_for_ThreshoAem_U : component start_for_ThreshoAem
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Threshold_l227_U0_din,
        if_full_n => start_for_Threshold_l227_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_Threshold_l227_U0_dout,
        if_empty_n => start_for_Threshold_l227_U0_empty_n,
        if_read => Threshold_l227_U0_ap_ready);

    start_for_ThreshoBew_U : component start_for_ThreshoBew
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Threshold_l228_U0_din,
        if_full_n => start_for_Threshold_l228_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_Threshold_l228_U0_dout,
        if_empty_n => start_for_Threshold_l228_U0_empty_n,
        if_read => Threshold_l228_U0_ap_ready);

    start_for_ThreshoCeG_U : component start_for_ThreshoCeG
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Threshold_l_U0_din,
        if_full_n => start_for_Threshold_l_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_Threshold_l_U0_dout,
        if_empty_n => start_for_Threshold_l_U0_empty_n,
        if_read => Threshold_l_U0_ap_ready);

    start_for_And_3_U0_U : component start_for_And_3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_And_3_U0_din,
        if_full_n => start_for_And_3_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_And_3_U0_dout,
        if_empty_n => start_for_And_3_U0_empty_n,
        if_read => And_3_U0_ap_ready);

    start_for_Dilate_U0_U : component start_for_Dilate_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate_U0_din,
        if_full_n => start_for_Dilate_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_Dilate_U0_dout,
        if_empty_n => start_for_Dilate_U0_empty_n,
        if_read => Dilate_U0_ap_ready);

    start_for_Erode_U0_U : component start_for_Erode_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Erode_U0_din,
        if_full_n => start_for_Erode_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_Erode_U0_dout,
        if_empty_n => start_for_Erode_U0_empty_n,
        if_read => Erode_U0_ap_ready);

    start_for_Mat2AXIDeQ_U : component start_for_Mat2AXIDeQ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Block_Mat_exit1247_p_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);

    start_for_GaussiaEe0_U : component start_for_GaussiaEe0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_GaussianBlur_U0_din,
        if_full_n => start_for_GaussianBlur_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_GaussianBlur_U0_dout,
        if_empty_n => start_for_GaussianBlur_U0_empty_n,
        if_read => GaussianBlur_U0_ap_ready);

    start_for_Split_U0_U : component start_for_Split_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Split_U0_din,
        if_full_n => start_for_Split_U0_full_n,
        if_write => Get_hsv_U0_start_write,
        if_dout => start_for_Split_U0_dout,
        if_empty_n => start_for_Split_U0_empty_n,
        if_read => Split_U0_ap_ready);

    start_for_Dilate2Ffa_U : component start_for_Dilate2Ffa
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate229_U0_din,
        if_full_n => start_for_Dilate229_U0_full_n,
        if_write => And_3_U0_start_write,
        if_dout => start_for_Dilate229_U0_dout,
        if_empty_n => start_for_Dilate229_U0_empty_n,
        if_read => Dilate229_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_Mat_exit1247_p_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit1247_p_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit1247_p_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit1247_p_U0_ap_ready <= ap_sync_Block_Mat_exit1247_p_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_Mat_exit1247_p_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit1247_p_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit1247_p_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit1247_p_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_Mat_exit1247_p_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_Mat_exit1247_p_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit1247_p_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    And_3_U0_ap_continue <= ap_const_logic_1;
    And_3_U0_ap_start <= start_for_And_3_U0_empty_n;
    Block_Mat_exit1247_p_U0_ap_continue <= ap_const_logic_1;
    Block_Mat_exit1247_p_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit1247_p_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit1247_p_U0_start_full_n <= (start_for_Threshold_l_U0_full_n and start_for_Threshold_l228_U0_full_n and start_for_Threshold_l227_U0_full_n and start_for_Mat2AXIvideo_U0_full_n and start_for_Get_hsv_U0_full_n and start_for_Erode_U0_full_n and start_for_Dilate_U0_full_n and start_for_CvtColor_U0_full_n and start_for_And_3_U0_full_n);
    CvtColor_U0_ap_continue <= ap_const_logic_1;
    CvtColor_U0_ap_start <= start_for_CvtColor_U0_empty_n;
    CvtColor_U0_start_full_n <= ap_const_logic_1;
    CvtColor_U0_start_write <= ap_const_logic_0;
    Dilate229_U0_ap_continue <= ap_const_logic_1;
    Dilate229_U0_ap_start <= start_for_Dilate229_U0_empty_n;
    Dilate229_U0_start_full_n <= ap_const_logic_1;
    Dilate229_U0_start_write <= ap_const_logic_0;
    Dilate_U0_ap_continue <= ap_const_logic_1;
    Dilate_U0_ap_start <= start_for_Dilate_U0_empty_n;
    Dilate_U0_start_full_n <= ap_const_logic_1;
    Dilate_U0_start_write <= ap_const_logic_0;
    Erode_U0_ap_continue <= ap_const_logic_1;
    Erode_U0_ap_start <= start_for_Erode_U0_empty_n;
    Erode_U0_start_full_n <= ap_const_logic_1;
    Erode_U0_start_write <= ap_const_logic_0;
    GaussianBlur_U0_ap_continue <= ap_const_logic_1;
    GaussianBlur_U0_ap_start <= start_for_GaussianBlur_U0_empty_n;
    GaussianBlur_U0_start_full_n <= ap_const_logic_1;
    GaussianBlur_U0_start_write <= ap_const_logic_0;
    Get_hsv_U0_ap_continue <= ap_sync_done;
    Get_hsv_U0_ap_start <= start_for_Get_hsv_U0_empty_n;
    Mat2AXIvideo_U0_ap_continue <= ap_sync_done;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    Split_U0_ap_continue <= ap_const_logic_1;
    Split_U0_ap_start <= start_for_Split_U0_empty_n;
    Split_U0_start_full_n <= ap_const_logic_1;
    Split_U0_start_write <= ap_const_logic_0;
    Threshold_l227_U0_ap_continue <= ap_const_logic_1;
    Threshold_l227_U0_ap_start <= start_for_Threshold_l227_U0_empty_n;
    Threshold_l227_U0_start_full_n <= ap_const_logic_1;
    Threshold_l227_U0_start_write <= ap_const_logic_0;
    Threshold_l228_U0_ap_continue <= ap_const_logic_1;
    Threshold_l228_U0_ap_start <= start_for_Threshold_l228_U0_empty_n;
    Threshold_l228_U0_start_full_n <= ap_const_logic_1;
    Threshold_l228_U0_start_write <= ap_const_logic_0;
    Threshold_l_U0_ap_continue <= ap_const_logic_1;
    Threshold_l_U0_ap_start <= start_for_Threshold_l_U0_empty_n;
    Threshold_l_U0_start_full_n <= ap_const_logic_1;
    Threshold_l_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (Threshold_l_U0_ap_idle and Threshold_l228_U0_ap_idle and Threshold_l227_U0_ap_idle and Split_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Get_hsv_U0_ap_idle and GaussianBlur_U0_ap_idle and Erode_U0_ap_idle and Dilate_U0_ap_idle and Dilate229_U0_ap_idle and CvtColor_U0_ap_idle and Block_Mat_exit1247_p_U0_ap_idle and And_3_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_Block_Mat_exit1247_p_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit1247_p_U0_ap_ready or Block_Mat_exit1247_p_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (Mat2AXIvideo_U0_ap_done and Get_hsv_U0_ap_done);
    ap_sync_ready <= (ap_sync_Block_Mat_exit1247_p_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    input_r_TREADY <= AXIvideo2Mat_U0_input_r_TREADY;
    output_r_TDATA <= Mat2AXIvideo_U0_output_r_TDATA;
    output_r_TDEST <= Mat2AXIvideo_U0_output_r_TDEST;
    output_r_TID <= Mat2AXIvideo_U0_output_r_TID;
    output_r_TKEEP <= Mat2AXIvideo_U0_output_r_TKEEP;
    output_r_TLAST <= Mat2AXIvideo_U0_output_r_TLAST;
    output_r_TSTRB <= Mat2AXIvideo_U0_output_r_TSTRB;
    output_r_TUSER <= Mat2AXIvideo_U0_output_r_TUSER;
    output_r_TVALID <= Mat2AXIvideo_U0_output_r_TVALID;
    start_for_And_3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_CvtColor_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate229_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Erode_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_GaussianBlur_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Get_hsv_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Split_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Threshold_l227_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Threshold_l228_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Threshold_l_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
