-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Downsample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_3_V_empty_n : IN STD_LOGIC;
    src_data_stream_3_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_3_V_full_n : IN STD_LOGIC;
    dst_data_stream_3_V_write : OUT STD_LOGIC );
end;


architecture behav of Downsample is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_65 : STD_LOGIC_VECTOR (9 downto 0) := "0001100101";
    constant ap_const_lv10_26A : STD_LOGIC_VECTOR (9 downto 0) := "1001101010";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_DD : STD_LOGIC_VECTOR (10 downto 0) := "00011011101";
    constant ap_const_lv11_422 : STD_LOGIC_VECTOR (10 downto 0) := "10000100010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal src_data_stream_3_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal and_ln26_2_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_3_V_blk_n : STD_LOGIC;
    signal j_0_reg_241 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln20_fu_252_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln20_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln20_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_339 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln26_1_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_1_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op53_write_state4 : BOOLEAN;
    signal ap_predicate_op54_write_state4 : BOOLEAN;
    signal ap_predicate_op55_write_state4 : BOOLEAN;
    signal ap_predicate_op56_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_296_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln26_2_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_0_reg_230 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln26_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_2_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_3_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_fu_286_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln20_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_256_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_256_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_230 <= i_reg_339;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_230 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln22_fu_290_p2 = ap_const_lv1_0))) then 
                j_0_reg_241 <= j_fu_296_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_256_p2 = ap_const_lv1_0))) then 
                j_0_reg_241 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_256_p2 = ap_const_lv1_0))) then
                and_ln26_1_reg_344 <= and_ln26_1_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln22_fu_290_p2 = ap_const_lv1_0))) then
                and_ln26_2_reg_358 <= and_ln26_2_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln26_2_fu_320_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln22_fu_290_p2 = ap_const_lv1_0))) then
                and_ln27_reg_362 <= and_ln27_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_339 <= i_fu_262_p2;
                trunc_ln20_reg_330 <= trunc_ln20_fu_252_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln20_fu_256_p2, icmp_ln22_fu_290_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln20_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln22_fu_290_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln22_fu_290_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln26_1_fu_280_p2 <= (icmp_ln26_fu_268_p2 and icmp_ln26_1_fu_274_p2);
    and_ln26_2_fu_320_p2 <= (and_ln26_fu_314_p2 and and_ln26_1_reg_344);
    and_ln26_fu_314_p2 <= (icmp_ln26_3_fu_308_p2 and icmp_ln26_2_fu_302_p2);
    and_ln27_fu_325_p2 <= (trunc_ln22_fu_286_p1 and trunc_ln20_reg_330);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, ap_predicate_op53_write_state4, ap_predicate_op54_write_state4, ap_predicate_op55_write_state4, ap_predicate_op56_write_state4)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((src_data_stream_3_V_empty_n = ap_const_logic_0) or (src_data_stream_2_V_empty_n = ap_const_logic_0) or (src_data_stream_1_V_empty_n = ap_const_logic_0) or (src_data_stream_0_V_empty_n = ap_const_logic_0) or ((dst_data_stream_3_V_full_n = ap_const_logic_0) and (ap_predicate_op56_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_predicate_op55_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_predicate_op54_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_predicate_op53_write_state4 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, ap_predicate_op53_write_state4, ap_predicate_op54_write_state4, ap_predicate_op55_write_state4, ap_predicate_op56_write_state4)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((src_data_stream_3_V_empty_n = ap_const_logic_0) or (src_data_stream_2_V_empty_n = ap_const_logic_0) or (src_data_stream_1_V_empty_n = ap_const_logic_0) or (src_data_stream_0_V_empty_n = ap_const_logic_0) or ((dst_data_stream_3_V_full_n = ap_const_logic_0) and (ap_predicate_op56_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_predicate_op55_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_predicate_op54_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_predicate_op53_write_state4 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, ap_predicate_op53_write_state4, ap_predicate_op54_write_state4, ap_predicate_op55_write_state4, ap_predicate_op56_write_state4)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((src_data_stream_3_V_empty_n = ap_const_logic_0) or (src_data_stream_2_V_empty_n = ap_const_logic_0) or (src_data_stream_1_V_empty_n = ap_const_logic_0) or (src_data_stream_0_V_empty_n = ap_const_logic_0) or ((dst_data_stream_3_V_full_n = ap_const_logic_0) and (ap_predicate_op56_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_predicate_op55_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_predicate_op54_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_predicate_op53_write_state4 = ap_const_boolean_1))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_predicate_op53_write_state4, ap_predicate_op54_write_state4, ap_predicate_op55_write_state4, ap_predicate_op56_write_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((src_data_stream_3_V_empty_n = ap_const_logic_0) or (src_data_stream_2_V_empty_n = ap_const_logic_0) or (src_data_stream_1_V_empty_n = ap_const_logic_0) or (src_data_stream_0_V_empty_n = ap_const_logic_0) or ((dst_data_stream_3_V_full_n = ap_const_logic_0) and (ap_predicate_op56_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_predicate_op55_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_predicate_op54_write_state4 = ap_const_boolean_1)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_predicate_op53_write_state4 = ap_const_boolean_1)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln22_fu_290_p2)
    begin
        if ((icmp_ln22_fu_290_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln20_fu_256_p2)
    begin
        if (((icmp_ln20_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op53_write_state4_assign_proc : process(and_ln26_2_reg_358, and_ln27_reg_362)
    begin
                ap_predicate_op53_write_state4 <= ((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358));
    end process;


    ap_predicate_op54_write_state4_assign_proc : process(and_ln26_2_reg_358, and_ln27_reg_362)
    begin
                ap_predicate_op54_write_state4 <= ((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358));
    end process;


    ap_predicate_op55_write_state4_assign_proc : process(and_ln26_2_reg_358, and_ln27_reg_362)
    begin
                ap_predicate_op55_write_state4 <= ((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358));
    end process;


    ap_predicate_op56_write_state4_assign_proc : process(and_ln26_2_reg_358, and_ln27_reg_362)
    begin
                ap_predicate_op56_write_state4 <= ((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358));
    end process;

    ap_ready <= internal_ap_ready;

    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln26_2_reg_358, and_ln27_reg_362)
    begin
        if (((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= src_data_stream_0_V_dout;

    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op53_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op53_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln26_2_reg_358, and_ln27_reg_362)
    begin
        if (((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= src_data_stream_1_V_dout;

    dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op54_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op54_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln26_2_reg_358, and_ln27_reg_362)
    begin
        if (((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= src_data_stream_2_V_dout;

    dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op55_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op55_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_3_V_blk_n_assign_proc : process(dst_data_stream_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln26_2_reg_358, and_ln27_reg_362)
    begin
        if (((ap_const_lv1_1 = and_ln27_reg_362) and (ap_const_lv1_1 = and_ln26_2_reg_358) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_data_stream_3_V_blk_n <= dst_data_stream_3_V_full_n;
        else 
            dst_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_3_V_din <= src_data_stream_3_V_dout;

    dst_data_stream_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op56_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op56_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_3_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_262_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_0_reg_230));
    icmp_ln20_fu_256_p2 <= "1" when (i_0_reg_230 = ap_const_lv10_2D0) else "0";
    icmp_ln22_fu_290_p2 <= "1" when (j_0_reg_241 = ap_const_lv11_500) else "0";
    icmp_ln26_1_fu_274_p2 <= "1" when (unsigned(i_0_reg_230) < unsigned(ap_const_lv10_26A)) else "0";
    icmp_ln26_2_fu_302_p2 <= "1" when (unsigned(j_0_reg_241) > unsigned(ap_const_lv11_DD)) else "0";
    icmp_ln26_3_fu_308_p2 <= "1" when (unsigned(j_0_reg_241) < unsigned(ap_const_lv11_422)) else "0";
    icmp_ln26_fu_268_p2 <= "1" when (unsigned(i_0_reg_230) > unsigned(ap_const_lv10_65)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln20_fu_256_p2)
    begin
        if (((icmp_ln20_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_296_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(j_0_reg_241));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_3_V_blk_n_assign_proc : process(src_data_stream_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_3_V_blk_n <= src_data_stream_3_V_empty_n;
        else 
            src_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_3_V_read <= ap_const_logic_1;
        else 
            src_data_stream_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln20_fu_252_p1 <= i_0_reg_230(1 - 1 downto 0);
    trunc_ln22_fu_286_p1 <= j_0_reg_241(1 - 1 downto 0);
end behav;
