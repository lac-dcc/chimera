-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gcd is
generic (
    C_S_AXI_GCD_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_GCD_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_gcd_bus_AWVALID : IN STD_LOGIC;
    s_axi_gcd_bus_AWREADY : OUT STD_LOGIC;
    s_axi_gcd_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_GCD_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_gcd_bus_WVALID : IN STD_LOGIC;
    s_axi_gcd_bus_WREADY : OUT STD_LOGIC;
    s_axi_gcd_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_GCD_BUS_DATA_WIDTH-1 downto 0);
    s_axi_gcd_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_GCD_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_gcd_bus_ARVALID : IN STD_LOGIC;
    s_axi_gcd_bus_ARREADY : OUT STD_LOGIC;
    s_axi_gcd_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_GCD_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_gcd_bus_RVALID : OUT STD_LOGIC;
    s_axi_gcd_bus_RREADY : IN STD_LOGIC;
    s_axi_gcd_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_GCD_BUS_DATA_WIDTH-1 downto 0);
    s_axi_gcd_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_gcd_bus_BVALID : OUT STD_LOGIC;
    s_axi_gcd_bus_BREADY : IN STD_LOGIC;
    s_axi_gcd_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of gcd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gcd,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.429000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=203,HLS_SYN_LUT=285,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (15 downto 0);
    signal b : STD_LOGIC_VECTOR (15 downto 0);
    signal pResult_ap_vld : STD_LOGIC;
    signal b_read_reg_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_read_reg_107 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_115 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_fu_78_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_assign_reg_121 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_assign_fu_84_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_assign_reg_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_assign_1_fu_90_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_assign_1_fu_96_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_reg_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal result_reg_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component gcd_gcd_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (15 downto 0);
        b : OUT STD_LOGIC_VECTOR (15 downto 0);
        pResult : IN STD_LOGIC_VECTOR (15 downto 0);
        pResult_ap_vld : IN STD_LOGIC );
    end component;



begin
    gcd_gcd_bus_s_axi_U : component gcd_gcd_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_GCD_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_GCD_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_gcd_bus_AWVALID,
        AWREADY => s_axi_gcd_bus_AWREADY,
        AWADDR => s_axi_gcd_bus_AWADDR,
        WVALID => s_axi_gcd_bus_WVALID,
        WREADY => s_axi_gcd_bus_WREADY,
        WDATA => s_axi_gcd_bus_WDATA,
        WSTRB => s_axi_gcd_bus_WSTRB,
        ARVALID => s_axi_gcd_bus_ARVALID,
        ARREADY => s_axi_gcd_bus_ARREADY,
        ARADDR => s_axi_gcd_bus_ARADDR,
        RVALID => s_axi_gcd_bus_RVALID,
        RREADY => s_axi_gcd_bus_RREADY,
        RDATA => s_axi_gcd_bus_RDATA,
        RRESP => s_axi_gcd_bus_RRESP,
        BVALID => s_axi_gcd_bus_BVALID,
        BREADY => s_axi_gcd_bus_BREADY,
        BRESP => s_axi_gcd_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        b => b,
        pResult => p_s_reg_45,
        pResult_ap_vld => pResult_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_s_reg_45_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_s_reg_45 <= b_assign_1_fu_90_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_s_reg_45 <= b_read_reg_102;
            end if; 
        end if;
    end process;

    result_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                result_reg_56 <= a_assign_1_fu_96_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                result_reg_56 <= a_read_reg_107;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_66_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                a_assign_reg_121 <= a_assign_fu_78_p2;
                b_assign_reg_126 <= b_assign_fu_84_p2;
                tmp_3_reg_115 <= tmp_3_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                a_read_reg_107 <= a;
                b_read_reg_102 <= b;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_2_fu_66_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    a_assign_1_fu_96_p3 <= 
        a_assign_reg_121 when (tmp_3_reg_115(0) = '1') else 
        result_reg_56;
    a_assign_fu_78_p2 <= std_logic_vector(unsigned(result_reg_56) - unsigned(p_s_reg_45));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state3, tmp_2_fu_66_p2)
    begin
        if (((tmp_2_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp_2_fu_66_p2)
    begin
        if (((tmp_2_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_assign_1_fu_90_p3 <= 
        p_s_reg_45 when (tmp_3_reg_115(0) = '1') else 
        b_assign_reg_126;
    b_assign_fu_84_p2 <= std_logic_vector(unsigned(p_s_reg_45) - unsigned(result_reg_56));

    pResult_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_2_fu_66_p2)
    begin
        if (((tmp_2_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            pResult_ap_vld <= ap_const_logic_1;
        else 
            pResult_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_66_p2 <= "1" when (result_reg_56 = p_s_reg_45) else "0";
    tmp_3_fu_72_p2 <= "1" when (signed(result_reg_56) > signed(p_s_reg_45)) else "0";
end behav;
