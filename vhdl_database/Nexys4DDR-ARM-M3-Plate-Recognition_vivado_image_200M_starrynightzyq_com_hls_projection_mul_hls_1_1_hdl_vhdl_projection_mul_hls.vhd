-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity projection_mul_hls is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    input_r_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    bound_min_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bound_min_ce0 : OUT STD_LOGIC;
    bound_min_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_min_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_min_we0 : OUT STD_LOGIC;
    bound_max_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bound_max_ce0 : OUT STD_LOGIC;
    bound_max_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_max_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_max_we0 : OUT STD_LOGIC;
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of projection_mul_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "projection_mul_hls,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.905750,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1826,HLS_SYN_LUT=3599,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_v : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_0_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_0_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_0_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_0_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_1_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_1_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_1_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_1_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_2_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_2_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_2_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_2_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_original_0_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_original_0_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_original_0_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_original_0_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_original_1_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_original_1_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_img_original_1_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_img_original_1_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_Vdist_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_Vdist_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_threshold_v_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1614_p_U0_threshold_v_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_input_r_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal Not_U0_ap_start : STD_LOGIC;
    signal Not_U0_ap_done : STD_LOGIC;
    signal Not_U0_ap_continue : STD_LOGIC;
    signal Not_U0_ap_idle : STD_LOGIC;
    signal Not_U0_ap_ready : STD_LOGIC;
    signal Not_U0_src_rows_V_read : STD_LOGIC;
    signal Not_U0_src_cols_V_read : STD_LOGIC;
    signal Not_U0_src_data_stream_V_read : STD_LOGIC;
    signal Not_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Not_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal U8toBin_U0_ap_start : STD_LOGIC;
    signal U8toBin_U0_ap_done : STD_LOGIC;
    signal U8toBin_U0_ap_continue : STD_LOGIC;
    signal U8toBin_U0_ap_idle : STD_LOGIC;
    signal U8toBin_U0_ap_ready : STD_LOGIC;
    signal U8toBin_U0_src_rows_V_read : STD_LOGIC;
    signal U8toBin_U0_src_cols_V_read : STD_LOGIC;
    signal U8toBin_U0_src_data_stream_V_read : STD_LOGIC;
    signal U8toBin_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal U8toBin_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Reduce_my_U0_ap_start : STD_LOGIC;
    signal Reduce_my_U0_ap_done : STD_LOGIC;
    signal Reduce_my_U0_ap_continue : STD_LOGIC;
    signal Reduce_my_U0_ap_idle : STD_LOGIC;
    signal Reduce_my_U0_ap_ready : STD_LOGIC;
    signal Reduce_my_U0_src_rows_V_read : STD_LOGIC;
    signal Reduce_my_U0_src_cols_V_read : STD_LOGIC;
    signal Reduce_my_U0_src_data_stream_V_read : STD_LOGIC;
    signal Reduce_my_U0_Vdst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Reduce_my_U0_Vdst_data_stream_V_write : STD_LOGIC;
    signal find_boundary_U0_ap_start : STD_LOGIC;
    signal find_boundary_U0_ap_done : STD_LOGIC;
    signal find_boundary_U0_ap_continue : STD_LOGIC;
    signal find_boundary_U0_ap_idle : STD_LOGIC;
    signal find_boundary_U0_ap_ready : STD_LOGIC;
    signal find_boundary_U0_src_cols_V_read : STD_LOGIC;
    signal find_boundary_U0_src_data_stream_V_read : STD_LOGIC;
    signal find_boundary_U0_threshold_v_read : STD_LOGIC;
    signal find_boundary_U0_bound_min_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal find_boundary_U0_bound_min_ce0 : STD_LOGIC;
    signal find_boundary_U0_bound_min_we0 : STD_LOGIC;
    signal find_boundary_U0_bound_min_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal find_boundary_U0_bound_max_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal find_boundary_U0_bound_max_ce0 : STD_LOGIC;
    signal find_boundary_U0_bound_max_we0 : STD_LOGIC;
    signal find_boundary_U0_bound_max_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_U0_output_r_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal img_0_rows_V_c_full_n : STD_LOGIC;
    signal img_0_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_rows_V_c_empty_n : STD_LOGIC;
    signal img_0_cols_V_c_full_n : STD_LOGIC;
    signal img_0_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_cols_V_c_empty_n : STD_LOGIC;
    signal img_1_rows_V_c_full_n : STD_LOGIC;
    signal img_1_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_rows_V_c_empty_n : STD_LOGIC;
    signal img_1_cols_V_c_full_n : STD_LOGIC;
    signal img_1_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_cols_V_c_empty_n : STD_LOGIC;
    signal img_2_rows_V_c_full_n : STD_LOGIC;
    signal img_2_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_2_rows_V_c_empty_n : STD_LOGIC;
    signal img_2_cols_V_c_full_n : STD_LOGIC;
    signal img_2_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_2_cols_V_c_empty_n : STD_LOGIC;
    signal img_original_0_rows_s_full_n : STD_LOGIC;
    signal img_original_0_rows_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_original_0_rows_s_empty_n : STD_LOGIC;
    signal img_original_0_cols_s_full_n : STD_LOGIC;
    signal img_original_0_cols_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_original_0_cols_s_empty_n : STD_LOGIC;
    signal img_original_1_rows_s_full_n : STD_LOGIC;
    signal img_original_1_rows_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_original_1_rows_s_empty_n : STD_LOGIC;
    signal img_original_1_cols_s_full_n : STD_LOGIC;
    signal img_original_1_cols_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_original_1_cols_s_empty_n : STD_LOGIC;
    signal Vdist_cols_V_c_full_n : STD_LOGIC;
    signal Vdist_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Vdist_cols_V_c_empty_n : STD_LOGIC;
    signal threshold_v_c_full_n : STD_LOGIC;
    signal threshold_v_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_v_c_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_rows_V_c31_full_n : STD_LOGIC;
    signal img_0_rows_V_c31_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_rows_V_c31_empty_n : STD_LOGIC;
    signal img_0_cols_V_c32_full_n : STD_LOGIC;
    signal img_0_cols_V_c32_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_cols_V_c32_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal img_original_0_data_s_full_n : STD_LOGIC;
    signal img_original_0_data_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_original_0_data_s_empty_n : STD_LOGIC;
    signal img_original_1_data_s_full_n : STD_LOGIC;
    signal img_original_1_data_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_original_1_data_s_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_full_n : STD_LOGIC;
    signal img_2_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_empty_n : STD_LOGIC;
    signal Vdist_data_stream_0_full_n : STD_LOGIC;
    signal Vdist_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal Vdist_data_stream_0_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_Mat_exit1614_p_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit1614_p_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit1614_p_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_U8toBin_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_U8toBin_U0_full_n : STD_LOGIC;
    signal start_for_U8toBin_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_U8toBin_U0_empty_n : STD_LOGIC;
    signal start_for_Reduce_my_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Reduce_my_U0_full_n : STD_LOGIC;
    signal start_for_Reduce_my_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Reduce_my_U0_empty_n : STD_LOGIC;
    signal start_for_find_boundary_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_find_boundary_U0_full_n : STD_LOGIC;
    signal start_for_find_boundary_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_find_boundary_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal start_for_Not_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Not_U0_full_n : STD_LOGIC;
    signal start_for_Not_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Not_U0_empty_n : STD_LOGIC;
    signal Not_U0_start_full_n : STD_LOGIC;
    signal Not_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_start_full_n : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal U8toBin_U0_start_full_n : STD_LOGIC;
    signal U8toBin_U0_start_write : STD_LOGIC;
    signal Reduce_my_U0_start_full_n : STD_LOGIC;
    signal Reduce_my_U0_start_write : STD_LOGIC;
    signal find_boundary_U0_start_full_n : STD_LOGIC;
    signal find_boundary_U0_start_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit1614_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        threshold_v : IN STD_LOGIC_VECTOR (31 downto 0);
        img_0_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_0_rows_V_out_full_n : IN STD_LOGIC;
        img_0_rows_V_out_write : OUT STD_LOGIC;
        img_0_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_0_cols_V_out_full_n : IN STD_LOGIC;
        img_0_cols_V_out_write : OUT STD_LOGIC;
        img_1_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_1_rows_V_out_full_n : IN STD_LOGIC;
        img_1_rows_V_out_write : OUT STD_LOGIC;
        img_1_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_1_cols_V_out_full_n : IN STD_LOGIC;
        img_1_cols_V_out_write : OUT STD_LOGIC;
        img_2_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_2_rows_V_out_full_n : IN STD_LOGIC;
        img_2_rows_V_out_write : OUT STD_LOGIC;
        img_2_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_2_cols_V_out_full_n : IN STD_LOGIC;
        img_2_cols_V_out_write : OUT STD_LOGIC;
        img_original_0_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_original_0_rows_V_out_full_n : IN STD_LOGIC;
        img_original_0_rows_V_out_write : OUT STD_LOGIC;
        img_original_0_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_original_0_cols_V_out_full_n : IN STD_LOGIC;
        img_original_0_cols_V_out_write : OUT STD_LOGIC;
        img_original_1_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_original_1_rows_V_out_full_n : IN STD_LOGIC;
        img_original_1_rows_V_out_write : OUT STD_LOGIC;
        img_original_1_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_original_1_cols_V_out_full_n : IN STD_LOGIC;
        img_original_1_cols_V_out_write : OUT STD_LOGIC;
        Vdist_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Vdist_cols_V_out_full_n : IN STD_LOGIC;
        Vdist_cols_V_out_write : OUT STD_LOGIC;
        threshold_v_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold_v_out_full_n : IN STD_LOGIC;
        threshold_v_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        input_r_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Not_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component U8toBin IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Reduce_my IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        Vdst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        Vdst_data_stream_V_full_n : IN STD_LOGIC;
        Vdst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component find_boundary IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        threshold_v_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        threshold_v_empty_n : IN STD_LOGIC;
        threshold_v_read : OUT STD_LOGIC;
        bound_min_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bound_min_ce0 : OUT STD_LOGIC;
        bound_min_we0 : OUT STD_LOGIC;
        bound_min_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bound_max_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bound_max_ce0 : OUT STD_LOGIC;
        bound_max_we0 : OUT STD_LOGIC;
        bound_max_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        output_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Duplicacud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_U8toBindEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Reduce_eOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_find_bofYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIg8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Not_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component projection_mul_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold_v : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    projection_mul_hls_AXILiteS_s_axi_U : component projection_mul_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rows => rows,
        cols => cols,
        threshold_v => threshold_v);

    Block_Mat_exit1614_p_U0 : component Block_Mat_exit1614_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit1614_p_U0_ap_start,
        start_full_n => Block_Mat_exit1614_p_U0_start_full_n,
        ap_done => Block_Mat_exit1614_p_U0_ap_done,
        ap_continue => Block_Mat_exit1614_p_U0_ap_continue,
        ap_idle => Block_Mat_exit1614_p_U0_ap_idle,
        ap_ready => Block_Mat_exit1614_p_U0_ap_ready,
        start_out => Block_Mat_exit1614_p_U0_start_out,
        start_write => Block_Mat_exit1614_p_U0_start_write,
        rows => rows,
        cols => cols,
        threshold_v => threshold_v,
        img_0_rows_V_out_din => Block_Mat_exit1614_p_U0_img_0_rows_V_out_din,
        img_0_rows_V_out_full_n => img_0_rows_V_c_full_n,
        img_0_rows_V_out_write => Block_Mat_exit1614_p_U0_img_0_rows_V_out_write,
        img_0_cols_V_out_din => Block_Mat_exit1614_p_U0_img_0_cols_V_out_din,
        img_0_cols_V_out_full_n => img_0_cols_V_c_full_n,
        img_0_cols_V_out_write => Block_Mat_exit1614_p_U0_img_0_cols_V_out_write,
        img_1_rows_V_out_din => Block_Mat_exit1614_p_U0_img_1_rows_V_out_din,
        img_1_rows_V_out_full_n => img_1_rows_V_c_full_n,
        img_1_rows_V_out_write => Block_Mat_exit1614_p_U0_img_1_rows_V_out_write,
        img_1_cols_V_out_din => Block_Mat_exit1614_p_U0_img_1_cols_V_out_din,
        img_1_cols_V_out_full_n => img_1_cols_V_c_full_n,
        img_1_cols_V_out_write => Block_Mat_exit1614_p_U0_img_1_cols_V_out_write,
        img_2_rows_V_out_din => Block_Mat_exit1614_p_U0_img_2_rows_V_out_din,
        img_2_rows_V_out_full_n => img_2_rows_V_c_full_n,
        img_2_rows_V_out_write => Block_Mat_exit1614_p_U0_img_2_rows_V_out_write,
        img_2_cols_V_out_din => Block_Mat_exit1614_p_U0_img_2_cols_V_out_din,
        img_2_cols_V_out_full_n => img_2_cols_V_c_full_n,
        img_2_cols_V_out_write => Block_Mat_exit1614_p_U0_img_2_cols_V_out_write,
        img_original_0_rows_V_out_din => Block_Mat_exit1614_p_U0_img_original_0_rows_V_out_din,
        img_original_0_rows_V_out_full_n => img_original_0_rows_s_full_n,
        img_original_0_rows_V_out_write => Block_Mat_exit1614_p_U0_img_original_0_rows_V_out_write,
        img_original_0_cols_V_out_din => Block_Mat_exit1614_p_U0_img_original_0_cols_V_out_din,
        img_original_0_cols_V_out_full_n => img_original_0_cols_s_full_n,
        img_original_0_cols_V_out_write => Block_Mat_exit1614_p_U0_img_original_0_cols_V_out_write,
        img_original_1_rows_V_out_din => Block_Mat_exit1614_p_U0_img_original_1_rows_V_out_din,
        img_original_1_rows_V_out_full_n => img_original_1_rows_s_full_n,
        img_original_1_rows_V_out_write => Block_Mat_exit1614_p_U0_img_original_1_rows_V_out_write,
        img_original_1_cols_V_out_din => Block_Mat_exit1614_p_U0_img_original_1_cols_V_out_din,
        img_original_1_cols_V_out_full_n => img_original_1_cols_s_full_n,
        img_original_1_cols_V_out_write => Block_Mat_exit1614_p_U0_img_original_1_cols_V_out_write,
        Vdist_cols_V_out_din => Block_Mat_exit1614_p_U0_Vdist_cols_V_out_din,
        Vdist_cols_V_out_full_n => Vdist_cols_V_c_full_n,
        Vdist_cols_V_out_write => Block_Mat_exit1614_p_U0_Vdist_cols_V_out_write,
        threshold_v_out_din => Block_Mat_exit1614_p_U0_threshold_v_out_din,
        threshold_v_out_full_n => threshold_v_c_full_n,
        threshold_v_out_write => Block_Mat_exit1614_p_U0_threshold_v_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_Not_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        input_r_TDATA => input_r_TDATA,
        input_r_TVALID => input_r_TVALID,
        input_r_TREADY => AXIvideo2Mat_U0_input_r_TREADY,
        input_r_TKEEP => input_r_TKEEP,
        input_r_TSTRB => input_r_TSTRB,
        input_r_TUSER => input_r_TUSER,
        input_r_TLAST => input_r_TLAST,
        input_r_TID => input_r_TID,
        input_r_TDEST => input_r_TDEST,
        img_rows_V_dout => img_0_rows_V_c_dout,
        img_rows_V_empty_n => img_0_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => img_0_cols_V_c_dout,
        img_cols_V_empty_n => img_0_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_V_din => AXIvideo2Mat_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => img_0_data_stream_0_full_n,
        img_data_stream_V_write => AXIvideo2Mat_U0_img_data_stream_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => img_0_rows_V_c31_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img_0_cols_V_c32_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    Not_U0 : component Not_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Not_U0_ap_start,
        ap_done => Not_U0_ap_done,
        ap_continue => Not_U0_ap_continue,
        ap_idle => Not_U0_ap_idle,
        ap_ready => Not_U0_ap_ready,
        src_rows_V_dout => img_0_rows_V_c31_dout,
        src_rows_V_empty_n => img_0_rows_V_c31_empty_n,
        src_rows_V_read => Not_U0_src_rows_V_read,
        src_cols_V_dout => img_0_cols_V_c32_dout,
        src_cols_V_empty_n => img_0_cols_V_c32_empty_n,
        src_cols_V_read => Not_U0_src_cols_V_read,
        src_data_stream_V_dout => img_0_data_stream_0_dout,
        src_data_stream_V_empty_n => img_0_data_stream_0_empty_n,
        src_data_stream_V_read => Not_U0_src_data_stream_V_read,
        dst_data_stream_V_din => Not_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_1_data_stream_0_full_n,
        dst_data_stream_V_write => Not_U0_dst_data_stream_V_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate_U0_ap_start,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        src_rows_V_dout => img_1_rows_V_c_dout,
        src_rows_V_empty_n => img_1_rows_V_c_empty_n,
        src_rows_V_read => Duplicate_U0_src_rows_V_read,
        src_cols_V_dout => img_1_cols_V_c_dout,
        src_cols_V_empty_n => img_1_cols_V_c_empty_n,
        src_cols_V_read => Duplicate_U0_src_cols_V_read,
        src_data_stream_V_dout => img_1_data_stream_0_dout,
        src_data_stream_V_empty_n => img_1_data_stream_0_empty_n,
        src_data_stream_V_read => Duplicate_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => img_original_0_data_s_full_n,
        dst1_data_stream_V_write => Duplicate_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => img_original_1_data_s_full_n,
        dst2_data_stream_V_write => Duplicate_U0_dst2_data_stream_V_write);

    U8toBin_U0 : component U8toBin
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => U8toBin_U0_ap_start,
        ap_done => U8toBin_U0_ap_done,
        ap_continue => U8toBin_U0_ap_continue,
        ap_idle => U8toBin_U0_ap_idle,
        ap_ready => U8toBin_U0_ap_ready,
        src_rows_V_dout => img_original_0_rows_s_dout,
        src_rows_V_empty_n => img_original_0_rows_s_empty_n,
        src_rows_V_read => U8toBin_U0_src_rows_V_read,
        src_cols_V_dout => img_original_0_cols_s_dout,
        src_cols_V_empty_n => img_original_0_cols_s_empty_n,
        src_cols_V_read => U8toBin_U0_src_cols_V_read,
        src_data_stream_V_dout => img_original_0_data_s_dout,
        src_data_stream_V_empty_n => img_original_0_data_s_empty_n,
        src_data_stream_V_read => U8toBin_U0_src_data_stream_V_read,
        dst_data_stream_V_din => U8toBin_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_2_data_stream_0_full_n,
        dst_data_stream_V_write => U8toBin_U0_dst_data_stream_V_write);

    Reduce_my_U0 : component Reduce_my
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Reduce_my_U0_ap_start,
        ap_done => Reduce_my_U0_ap_done,
        ap_continue => Reduce_my_U0_ap_continue,
        ap_idle => Reduce_my_U0_ap_idle,
        ap_ready => Reduce_my_U0_ap_ready,
        src_rows_V_dout => img_2_rows_V_c_dout,
        src_rows_V_empty_n => img_2_rows_V_c_empty_n,
        src_rows_V_read => Reduce_my_U0_src_rows_V_read,
        src_cols_V_dout => img_2_cols_V_c_dout,
        src_cols_V_empty_n => img_2_cols_V_c_empty_n,
        src_cols_V_read => Reduce_my_U0_src_cols_V_read,
        src_data_stream_V_dout => img_2_data_stream_0_dout,
        src_data_stream_V_empty_n => img_2_data_stream_0_empty_n,
        src_data_stream_V_read => Reduce_my_U0_src_data_stream_V_read,
        Vdst_data_stream_V_din => Reduce_my_U0_Vdst_data_stream_V_din,
        Vdst_data_stream_V_full_n => Vdist_data_stream_0_full_n,
        Vdst_data_stream_V_write => Reduce_my_U0_Vdst_data_stream_V_write);

    find_boundary_U0 : component find_boundary
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => find_boundary_U0_ap_start,
        ap_done => find_boundary_U0_ap_done,
        ap_continue => find_boundary_U0_ap_continue,
        ap_idle => find_boundary_U0_ap_idle,
        ap_ready => find_boundary_U0_ap_ready,
        src_cols_V_dout => Vdist_cols_V_c_dout,
        src_cols_V_empty_n => Vdist_cols_V_c_empty_n,
        src_cols_V_read => find_boundary_U0_src_cols_V_read,
        src_data_stream_V_dout => Vdist_data_stream_0_dout,
        src_data_stream_V_empty_n => Vdist_data_stream_0_empty_n,
        src_data_stream_V_read => find_boundary_U0_src_data_stream_V_read,
        threshold_v_dout => threshold_v_c_dout,
        threshold_v_empty_n => threshold_v_c_empty_n,
        threshold_v_read => find_boundary_U0_threshold_v_read,
        bound_min_address0 => find_boundary_U0_bound_min_address0,
        bound_min_ce0 => find_boundary_U0_bound_min_ce0,
        bound_min_we0 => find_boundary_U0_bound_min_we0,
        bound_min_d0 => find_boundary_U0_bound_min_d0,
        bound_max_address0 => find_boundary_U0_bound_max_address0,
        bound_max_ce0 => find_boundary_U0_bound_max_ce0,
        bound_max_we0 => find_boundary_U0_bound_max_we0,
        bound_max_d0 => find_boundary_U0_bound_max_d0);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V_dout => img_original_1_rows_s_dout,
        img_rows_V_empty_n => img_original_1_rows_s_empty_n,
        img_rows_V_read => Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_dout => img_original_1_cols_s_dout,
        img_cols_V_empty_n => img_original_1_cols_s_empty_n,
        img_cols_V_read => Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_V_dout => img_original_1_data_s_dout,
        img_data_stream_V_empty_n => img_original_1_data_s_empty_n,
        img_data_stream_V_read => Mat2AXIvideo_U0_img_data_stream_V_read,
        output_r_TDATA => Mat2AXIvideo_U0_output_r_TDATA,
        output_r_TVALID => Mat2AXIvideo_U0_output_r_TVALID,
        output_r_TREADY => output_r_TREADY,
        output_r_TKEEP => Mat2AXIvideo_U0_output_r_TKEEP,
        output_r_TSTRB => Mat2AXIvideo_U0_output_r_TSTRB,
        output_r_TUSER => Mat2AXIvideo_U0_output_r_TUSER,
        output_r_TLAST => Mat2AXIvideo_U0_output_r_TLAST,
        output_r_TID => Mat2AXIvideo_U0_output_r_TID,
        output_r_TDEST => Mat2AXIvideo_U0_output_r_TDEST);

    img_0_rows_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_0_rows_V_out_din,
        if_full_n => img_0_rows_V_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_0_rows_V_out_write,
        if_dout => img_0_rows_V_c_dout,
        if_empty_n => img_0_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    img_0_cols_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_0_cols_V_out_din,
        if_full_n => img_0_cols_V_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_0_cols_V_out_write,
        if_dout => img_0_cols_V_c_dout,
        if_empty_n => img_0_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    img_1_rows_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_1_rows_V_out_din,
        if_full_n => img_1_rows_V_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_1_rows_V_out_write,
        if_dout => img_1_rows_V_c_dout,
        if_empty_n => img_1_rows_V_c_empty_n,
        if_read => Duplicate_U0_src_rows_V_read);

    img_1_cols_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_1_cols_V_out_din,
        if_full_n => img_1_cols_V_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_1_cols_V_out_write,
        if_dout => img_1_cols_V_c_dout,
        if_empty_n => img_1_cols_V_c_empty_n,
        if_read => Duplicate_U0_src_cols_V_read);

    img_2_rows_V_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_2_rows_V_out_din,
        if_full_n => img_2_rows_V_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_2_rows_V_out_write,
        if_dout => img_2_rows_V_c_dout,
        if_empty_n => img_2_rows_V_c_empty_n,
        if_read => Reduce_my_U0_src_rows_V_read);

    img_2_cols_V_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_2_cols_V_out_din,
        if_full_n => img_2_cols_V_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_2_cols_V_out_write,
        if_dout => img_2_cols_V_c_dout,
        if_empty_n => img_2_cols_V_c_empty_n,
        if_read => Reduce_my_U0_src_cols_V_read);

    img_original_0_rows_s_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_original_0_rows_V_out_din,
        if_full_n => img_original_0_rows_s_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_original_0_rows_V_out_write,
        if_dout => img_original_0_rows_s_dout,
        if_empty_n => img_original_0_rows_s_empty_n,
        if_read => U8toBin_U0_src_rows_V_read);

    img_original_0_cols_s_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_original_0_cols_V_out_din,
        if_full_n => img_original_0_cols_s_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_original_0_cols_V_out_write,
        if_dout => img_original_0_cols_s_dout,
        if_empty_n => img_original_0_cols_s_empty_n,
        if_read => U8toBin_U0_src_cols_V_read);

    img_original_1_rows_s_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_original_1_rows_V_out_din,
        if_full_n => img_original_1_rows_s_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_original_1_rows_V_out_write,
        if_dout => img_original_1_rows_s_dout,
        if_empty_n => img_original_1_rows_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_rows_V_read);

    img_original_1_cols_s_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_img_original_1_cols_V_out_din,
        if_full_n => img_original_1_cols_s_full_n,
        if_write => Block_Mat_exit1614_p_U0_img_original_1_cols_V_out_write,
        if_dout => img_original_1_cols_s_dout,
        if_empty_n => img_original_1_cols_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_cols_V_read);

    Vdist_cols_V_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_Vdist_cols_V_out_din,
        if_full_n => Vdist_cols_V_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_Vdist_cols_V_out_write,
        if_dout => Vdist_cols_V_c_dout,
        if_empty_n => Vdist_cols_V_c_empty_n,
        if_read => find_boundary_U0_src_cols_V_read);

    threshold_v_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit1614_p_U0_threshold_v_out_din,
        if_full_n => threshold_v_c_full_n,
        if_write => Block_Mat_exit1614_p_U0_threshold_v_out_write,
        if_dout => threshold_v_c_dout,
        if_empty_n => threshold_v_c_empty_n,
        if_read => find_boundary_U0_threshold_v_read);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => Not_U0_src_data_stream_V_read);

    img_0_rows_V_c31_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => img_0_rows_V_c31_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => img_0_rows_V_c31_dout,
        if_empty_n => img_0_rows_V_c31_empty_n,
        if_read => Not_U0_src_rows_V_read);

    img_0_cols_V_c32_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => img_0_cols_V_c32_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => img_0_cols_V_c32_dout,
        if_empty_n => img_0_cols_V_c32_empty_n,
        if_read => Not_U0_src_cols_V_read);

    img_1_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Not_U0_dst_data_stream_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => Not_U0_dst_data_stream_V_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => Duplicate_U0_src_data_stream_V_read);

    img_original_0_data_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_V_din,
        if_full_n => img_original_0_data_s_full_n,
        if_write => Duplicate_U0_dst1_data_stream_V_write,
        if_dout => img_original_0_data_s_dout,
        if_empty_n => img_original_0_data_s_empty_n,
        if_read => U8toBin_U0_src_data_stream_V_read);

    img_original_1_data_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_V_din,
        if_full_n => img_original_1_data_s_full_n,
        if_write => Duplicate_U0_dst2_data_stream_V_write,
        if_dout => img_original_1_data_s_dout,
        if_empty_n => img_original_1_data_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_V_read);

    img_2_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => U8toBin_U0_dst_data_stream_V_din,
        if_full_n => img_2_data_stream_0_full_n,
        if_write => U8toBin_U0_dst_data_stream_V_write,
        if_dout => img_2_data_stream_0_dout,
        if_empty_n => img_2_data_stream_0_empty_n,
        if_read => Reduce_my_U0_src_data_stream_V_read);

    Vdist_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Reduce_my_U0_Vdst_data_stream_V_din,
        if_full_n => Vdist_data_stream_0_full_n,
        if_write => Reduce_my_U0_Vdst_data_stream_V_write,
        if_dout => Vdist_data_stream_0_dout,
        if_empty_n => Vdist_data_stream_0_empty_n,
        if_read => find_boundary_U0_src_data_stream_V_read);

    start_for_Duplicacud_U : component start_for_Duplicacud
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => Block_Mat_exit1614_p_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_U8toBindEe_U : component start_for_U8toBindEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_U8toBin_U0_din,
        if_full_n => start_for_U8toBin_U0_full_n,
        if_write => Block_Mat_exit1614_p_U0_start_write,
        if_dout => start_for_U8toBin_U0_dout,
        if_empty_n => start_for_U8toBin_U0_empty_n,
        if_read => U8toBin_U0_ap_ready);

    start_for_Reduce_eOg_U : component start_for_Reduce_eOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Reduce_my_U0_din,
        if_full_n => start_for_Reduce_my_U0_full_n,
        if_write => Block_Mat_exit1614_p_U0_start_write,
        if_dout => start_for_Reduce_my_U0_dout,
        if_empty_n => start_for_Reduce_my_U0_empty_n,
        if_read => Reduce_my_U0_ap_ready);

    start_for_find_bofYi_U : component start_for_find_bofYi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_find_boundary_U0_din,
        if_full_n => start_for_find_boundary_U0_full_n,
        if_write => Block_Mat_exit1614_p_U0_start_write,
        if_dout => start_for_find_boundary_U0_dout,
        if_empty_n => start_for_find_boundary_U0_empty_n,
        if_read => find_boundary_U0_ap_ready);

    start_for_Mat2AXIg8j_U : component start_for_Mat2AXIg8j
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Block_Mat_exit1614_p_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);

    start_for_Not_U0_U : component start_for_Not_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Not_U0_din,
        if_full_n => start_for_Not_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_Not_U0_dout,
        if_empty_n => start_for_Not_U0_empty_n,
        if_read => Not_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_Mat_exit1614_p_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit1614_p_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit1614_p_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit1614_p_U0_ap_ready <= ap_sync_Block_Mat_exit1614_p_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_Mat_exit1614_p_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit1614_p_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit1614_p_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit1614_p_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_Mat_exit1614_p_U0_ap_ready))) then 
                Block_Mat_exit1614_p_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit1614_p_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit1614_p_U0_ap_continue <= ap_const_logic_1;
    Block_Mat_exit1614_p_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit1614_p_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit1614_p_U0_start_full_n <= (start_for_find_boundary_U0_full_n and start_for_U8toBin_U0_full_n and start_for_Reduce_my_U0_full_n and start_for_Mat2AXIvideo_U0_full_n and start_for_Duplicate_U0_full_n);
    Duplicate_U0_ap_continue <= ap_const_logic_1;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Duplicate_U0_start_full_n <= ap_const_logic_1;
    Duplicate_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_sync_done;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    Not_U0_ap_continue <= ap_const_logic_1;
    Not_U0_ap_start <= start_for_Not_U0_empty_n;
    Not_U0_start_full_n <= ap_const_logic_1;
    Not_U0_start_write <= ap_const_logic_0;
    Reduce_my_U0_ap_continue <= ap_const_logic_1;
    Reduce_my_U0_ap_start <= start_for_Reduce_my_U0_empty_n;
    Reduce_my_U0_start_full_n <= ap_const_logic_1;
    Reduce_my_U0_start_write <= ap_const_logic_0;
    U8toBin_U0_ap_continue <= ap_const_logic_1;
    U8toBin_U0_ap_start <= start_for_U8toBin_U0_empty_n;
    U8toBin_U0_start_full_n <= ap_const_logic_1;
    U8toBin_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (find_boundary_U0_ap_idle and U8toBin_U0_ap_idle and Reduce_my_U0_ap_idle and Not_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Duplicate_U0_ap_idle and Block_Mat_exit1614_p_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_Block_Mat_exit1614_p_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit1614_p_U0_ap_ready or Block_Mat_exit1614_p_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (find_boundary_U0_ap_done and Mat2AXIvideo_U0_ap_done);
    ap_sync_ready <= (ap_sync_Block_Mat_exit1614_p_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    bound_max_address0 <= find_boundary_U0_bound_max_address0;
    bound_max_ce0 <= find_boundary_U0_bound_max_ce0;
    bound_max_d0 <= find_boundary_U0_bound_max_d0;
    bound_max_we0 <= find_boundary_U0_bound_max_we0;
    bound_min_address0 <= find_boundary_U0_bound_min_address0;
    bound_min_ce0 <= find_boundary_U0_bound_min_ce0;
    bound_min_d0 <= find_boundary_U0_bound_min_d0;
    bound_min_we0 <= find_boundary_U0_bound_min_we0;
    find_boundary_U0_ap_continue <= ap_sync_done;
    find_boundary_U0_ap_start <= start_for_find_boundary_U0_empty_n;
    find_boundary_U0_start_full_n <= ap_const_logic_1;
    find_boundary_U0_start_write <= ap_const_logic_0;
    input_r_TREADY <= AXIvideo2Mat_U0_input_r_TREADY;
    output_r_TDATA <= Mat2AXIvideo_U0_output_r_TDATA;
    output_r_TDEST <= Mat2AXIvideo_U0_output_r_TDEST;
    output_r_TID <= Mat2AXIvideo_U0_output_r_TID;
    output_r_TKEEP <= Mat2AXIvideo_U0_output_r_TKEEP;
    output_r_TLAST <= Mat2AXIvideo_U0_output_r_TLAST;
    output_r_TSTRB <= Mat2AXIvideo_U0_output_r_TSTRB;
    output_r_TUSER <= Mat2AXIvideo_U0_output_r_TUSER;
    output_r_TVALID <= Mat2AXIvideo_U0_output_r_TVALID;
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Not_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Reduce_my_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_U8toBin_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_find_boundary_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
