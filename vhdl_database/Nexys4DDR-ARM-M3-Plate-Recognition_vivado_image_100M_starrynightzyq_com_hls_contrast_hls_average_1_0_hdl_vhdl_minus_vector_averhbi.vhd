-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity minus_vector_averhbi_rom is 
    generic(
             DWIDTH     : integer := 1; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 784
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of minus_vector_averhbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 57=> "0", 58 to 82=> "1", 83 to 84=> "0", 85 to 111=> "1", 112 => "0", 113 to 139=> "1", 140 => "0", 
    141 to 167=> "1", 168 => "0", 169 to 178=> "1", 179 to 189=> "0", 190 to 194=> "1", 195 to 196=> "0", 197 to 205=> "1", 
    206 to 223=> "0", 224 to 233=> "1", 234 to 252=> "0", 253 to 261=> "1", 262 to 279=> "0", 280 to 299=> "1", 300 to 307=> "0", 
    308 to 330=> "1", 331 to 335=> "0", 336 to 360=> "1", 361 to 364=> "0", 365 to 390=> "1", 391 to 393=> "0", 394 to 419=> "1", 
    420 to 425=> "0", 426 => "1", 427 => "0", 428 to 430=> "1", 431 to 438=> "0", 439 to 447=> "1", 448 to 467=> "0", 
    468 to 475=> "1", 476 to 495=> "0", 496 to 503=> "1", 504 to 524=> "0", 525 to 536=> "1", 537 to 550=> "0", 551 to 567=> "1", 
    568 to 578=> "0", 579 to 596=> "1", 597 to 605=> "0", 606 to 625=> "1", 626 to 630=> "0", 631 to 643=> "1", 644 => "0", 
    645 to 669=> "1", 670 to 675=> "0", 676 to 696=> "1", 697 to 705=> "0", 706 to 722=> "1", 723 to 734=> "0", 735 to 747=> "1", 
    748 to 783=> "0" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity minus_vector_averhbi is
    generic (
        DataWidth : INTEGER := 1;
        AddressRange : INTEGER := 784;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of minus_vector_averhbi is
    component minus_vector_averhbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    minus_vector_averhbi_rom_U :  component minus_vector_averhbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


