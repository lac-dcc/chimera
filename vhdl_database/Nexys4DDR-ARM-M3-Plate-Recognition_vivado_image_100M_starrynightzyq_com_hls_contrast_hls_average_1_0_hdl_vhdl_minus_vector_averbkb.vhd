-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity minus_vector_averbkb_rom is 
    generic(
             DWIDTH     : integer := 1; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 784
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of minus_vector_averbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 10=> "0", 11 to 15=> "1", 16 to 33=> "0", 34 to 48=> "1", 49 to 58=> "0", 59 to 79=> "1", 80 to 85=> "0", 
    86 to 108=> "1", 109 to 112=> "0", 113 to 119=> "1", 120 to 130=> "0", 131 to 138=> "1", 139 => "0", 140 to 146=> "1", 
    147 to 159=> "0", 160 to 166=> "1", 167 => "0", 168 to 173=> "1", 174 to 188=> "0", 189 to 201=> "1", 202 to 217=> "0", 
    218 to 229=> "1", 230 to 245=> "0", 246 to 257=> "1", 258 to 273=> "0", 274 to 285=> "1", 286 to 301=> "0", 302 to 313=> "1", 
    314 to 329=> "0", 330 to 341=> "1", 342 to 357=> "0", 358 to 369=> "1", 370 to 385=> "0", 386 to 397=> "1", 398 to 413=> "0", 
    414 to 425=> "1", 426 to 441=> "0", 442 to 453=> "1", 454 to 469=> "0", 470 to 481=> "1", 482 to 497=> "0", 498 to 509=> "1", 
    510 to 525=> "0", 526 to 537=> "1", 538 to 553=> "0", 554 to 565=> "1", 566 to 581=> "0", 582 to 593=> "1", 594 to 609=> "0", 
    610 to 622=> "1", 623 to 636=> "0", 637 to 642=> "1", 643 => "0", 644 to 651=> "1", 652 to 662=> "0", 663 to 670=> "1", 
    671 to 672=> "0", 673 to 683=> "1", 684 to 687=> "0", 688 to 697=> "1", 698 to 702=> "0", 703 to 723=> "1", 724 to 732=> "0", 
    733 to 749=> "1", 750 to 764=> "0", 765 to 774=> "1", 775 to 783=> "0" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity minus_vector_averbkb is
    generic (
        DataWidth : INTEGER := 1;
        AddressRange : INTEGER := 784;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of minus_vector_averbkb is
    component minus_vector_averbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    minus_vector_averbkb_rom_U :  component minus_vector_averbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


