-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity minus_vector_averlbW_rom is 
    generic(
             DWIDTH     : integer := 1; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 784
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of minus_vector_averlbW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 11=> "0", 12 to 16=> "1", 17 to 34=> "0", 35 to 49=> "1", 50 to 59=> "0", 60 to 79=> "1", 80 to 85=> "0", 
    86 to 109=> "1", 110 to 112=> "0", 113 to 121=> "1", 122 to 129=> "0", 130 to 138=> "1", 139 to 140=> "0", 141 to 147=> "1", 
    148 to 159=> "0", 160 to 166=> "1", 167 => "0", 168 to 174=> "1", 175 to 188=> "0", 189 to 202=> "1", 203 to 216=> "0", 
    217 to 230=> "1", 231 to 244=> "0", 245 to 258=> "1", 259 to 272=> "0", 273 to 287=> "1", 288 to 299=> "0", 300 to 307=> "1", 
    308 => "0", 309 to 316=> "1", 317 to 326=> "0", 327 to 334=> "1", 335 to 337=> "0", 338 to 349=> "1", 350 => "0", 
    351 to 362=> "1", 363 to 366=> "0", 367 to 389=> "1", 390 to 397=> "0", 398 to 417=> "1", 418 to 428=> "0", 429 to 444=> "1", 
    445 to 464=> "0", 465 to 472=> "1", 473 to 491=> "0", 492 to 499=> "1", 500 to 518=> "0", 519 to 527=> "1", 528 to 545=> "0", 
    546 to 553=> "1", 554 to 572=> "0", 573 to 580=> "1", 581 to 598=> "0", 599 to 607=> "1", 608 to 625=> "0", 626 to 634=> "1", 
    635 to 651=> "0", 652 to 660=> "1", 661 to 678=> "0", 679 to 687=> "1", 688 to 704=> "0", 705 to 713=> "1", 714 to 732=> "0", 
    733 to 739=> "1", 740 to 762=> "0", 763 to 765=> "1", 766 to 783=> "0" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity minus_vector_averlbW is
    generic (
        DataWidth : INTEGER := 1;
        AddressRange : INTEGER := 784;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of minus_vector_averlbW is
    component minus_vector_averlbW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    minus_vector_averlbW_rom_U :  component minus_vector_averlbW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


