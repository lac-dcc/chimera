-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xleft_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    xleft_s_empty_n : IN STD_LOGIC;
    xleft_s_read : OUT STD_LOGIC;
    ch2x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ch2x_out_out_full_n : IN STD_LOGIC;
    ch2x_out_out_write : OUT STD_LOGIC;
    ch3x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ch3x_out_out_full_n : IN STD_LOGIC;
    ch3x_out_out_write : OUT STD_LOGIC;
    ch4x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ch4x_out_out_full_n : IN STD_LOGIC;
    ch4x_out_out_write : OUT STD_LOGIC;
    ch5x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ch5x_out_out_full_n : IN STD_LOGIC;
    ch5x_out_out_write : OUT STD_LOGIC;
    ch6x_out_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ch6x_out_out_full_n : IN STD_LOGIC;
    ch6x_out_out_write : OUT STD_LOGIC );
end;


architecture behav of Block_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_20 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_const_lv16_40 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_const_lv16_60 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv16_A0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xleft_s_blk_n : STD_LOGIC;
    signal ch2x_out_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ch3x_out_out_blk_n : STD_LOGIC;
    signal ch4x_out_out_blk_n : STD_LOGIC;
    signal ch5x_out_out_blk_n : STD_LOGIC;
    signal ch6x_out_out_blk_n : STD_LOGIC;
    signal xleft_read_reg_179 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (xleft_s_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                xleft_read_reg_179 <= xleft_s_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, xleft_s_empty_n, ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (xleft_s_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, xleft_s_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (xleft_s_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n)
    begin
                ap_block_state2 <= ((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ch2x_out_out_blk_n_assign_proc : process(ch2x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ch2x_out_out_blk_n <= ch2x_out_out_full_n;
        else 
            ch2x_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch2x_out_out_din <= std_logic_vector(unsigned(xleft_read_reg_179) + unsigned(ap_const_lv16_20));

    ch2x_out_out_write_assign_proc : process(ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ch2x_out_out_write <= ap_const_logic_1;
        else 
            ch2x_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ch3x_out_out_blk_n_assign_proc : process(ch3x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ch3x_out_out_blk_n <= ch3x_out_out_full_n;
        else 
            ch3x_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch3x_out_out_din <= std_logic_vector(unsigned(xleft_read_reg_179) + unsigned(ap_const_lv16_40));

    ch3x_out_out_write_assign_proc : process(ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ch3x_out_out_write <= ap_const_logic_1;
        else 
            ch3x_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ch4x_out_out_blk_n_assign_proc : process(ch4x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ch4x_out_out_blk_n <= ch4x_out_out_full_n;
        else 
            ch4x_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch4x_out_out_din <= std_logic_vector(unsigned(xleft_read_reg_179) + unsigned(ap_const_lv16_60));

    ch4x_out_out_write_assign_proc : process(ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ch4x_out_out_write <= ap_const_logic_1;
        else 
            ch4x_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ch5x_out_out_blk_n_assign_proc : process(ch5x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ch5x_out_out_blk_n <= ch5x_out_out_full_n;
        else 
            ch5x_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch5x_out_out_din <= std_logic_vector(unsigned(xleft_read_reg_179) + unsigned(ap_const_lv16_80));

    ch5x_out_out_write_assign_proc : process(ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ch5x_out_out_write <= ap_const_logic_1;
        else 
            ch5x_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ch6x_out_out_blk_n_assign_proc : process(ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ch6x_out_out_blk_n <= ch6x_out_out_full_n;
        else 
            ch6x_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch6x_out_out_din <= std_logic_vector(unsigned(xleft_read_reg_179) + unsigned(ap_const_lv16_A0));

    ch6x_out_out_write_assign_proc : process(ch2x_out_out_full_n, ch3x_out_out_full_n, ch4x_out_out_full_n, ch5x_out_out_full_n, ch6x_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ch6x_out_out_full_n = ap_const_logic_0) or (ch5x_out_out_full_n = ap_const_logic_0) or (ch4x_out_out_full_n = ap_const_logic_0) or (ch3x_out_out_full_n = ap_const_logic_0) or (ch2x_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ch6x_out_out_write <= ap_const_logic_1;
        else 
            ch6x_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    xleft_s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_s_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_s_blk_n <= xleft_s_empty_n;
        else 
            xleft_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xleft_s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_s_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (xleft_s_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_s_read <= ap_const_logic_1;
        else 
            xleft_s_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
