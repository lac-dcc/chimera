-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axis2xfMat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_src_data_V_full_n : IN STD_LOGIC;
    p_src_data_V_write : OUT STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_rows : IN STD_LOGIC_VECTOR (8 downto 0);
    src_cols : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of axis2xfMat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal src_data_V_0_vld_in : STD_LOGIC;
    signal src_data_V_0_vld_out : STD_LOGIC;
    signal src_data_V_0_ack_in : STD_LOGIC;
    signal src_data_V_0_ack_out : STD_LOGIC;
    signal src_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal src_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal src_data_V_0_sel_rd : STD_LOGIC := '0';
    signal src_data_V_0_sel_wr : STD_LOGIC := '0';
    signal src_data_V_0_sel : STD_LOGIC;
    signal src_data_V_0_load_A : STD_LOGIC;
    signal src_data_V_0_load_B : STD_LOGIC;
    signal src_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_data_V_0_state_cmp_full : STD_LOGIC;
    signal p_src_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_151 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_TDATA_blk_n : STD_LOGIC;
    signal j_i_reg_99 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond1_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_115_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_146 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_126_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_i_reg_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((exitcond1_fu_110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    src_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_data_V_0_ack_out = ap_const_logic_1) and (src_data_V_0_vld_out = ap_const_logic_1))) then 
                                        src_data_V_0_sel_rd <= not(src_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_data_V_0_ack_in = ap_const_logic_1) and (src_data_V_0_vld_in = ap_const_logic_1))) then 
                                        src_data_V_0_sel_wr <= not(src_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_data_V_0_state = ap_const_lv2_2) and (src_data_V_0_vld_in = ap_const_logic_0)) or ((src_data_V_0_state = ap_const_lv2_3) and (src_data_V_0_vld_in = ap_const_logic_0) and (src_data_V_0_ack_out = ap_const_logic_1)))) then 
                    src_data_V_0_state <= ap_const_lv2_2;
                elsif ((((src_data_V_0_state = ap_const_lv2_1) and (src_data_V_0_ack_out = ap_const_logic_0)) or ((src_data_V_0_state = ap_const_lv2_3) and (src_data_V_0_ack_out = ap_const_logic_0) and (src_data_V_0_vld_in = ap_const_logic_1)))) then 
                    src_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_data_V_0_vld_in = ap_const_logic_0) and (src_data_V_0_ack_out = ap_const_logic_1))) and not(((src_data_V_0_ack_out = ap_const_logic_0) and (src_data_V_0_vld_in = ap_const_logic_1))) and (src_data_V_0_state = ap_const_lv2_3)) or ((src_data_V_0_state = ap_const_lv2_1) and (src_data_V_0_ack_out = ap_const_logic_1)) or ((src_data_V_0_state = ap_const_lv2_2) and (src_data_V_0_vld_in = ap_const_logic_1)))) then 
                    src_data_V_0_state <= ap_const_lv2_3;
                else 
                    src_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_88 <= i_reg_146;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_88 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_reg_99 <= ap_const_lv10_0;
            elsif (((exitcond_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_i_reg_99 <= j_fu_126_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_151 <= exitcond_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_146 <= i_fu_115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_data_V_0_load_A = ap_const_logic_1)) then
                src_data_V_0_payload_A <= src_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_data_V_0_load_B = ap_const_logic_1)) then
                src_data_V_0_payload_B <= src_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, exitcond1_fu_110_p2, ap_CS_fsm_state2, exitcond_fu_121_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_fu_121_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_fu_121_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_V_full_n, src_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond_reg_151)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_151 = ap_const_lv1_0) and (p_src_data_V_full_n = ap_const_logic_0)) or ((exitcond_reg_151 = ap_const_lv1_0) and (src_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_V_full_n, src_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond_reg_151)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_151 = ap_const_lv1_0) and (p_src_data_V_full_n = ap_const_logic_0)) or ((exitcond_reg_151 = ap_const_lv1_0) and (src_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_V_full_n, src_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond_reg_151)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_151 = ap_const_lv1_0) and (p_src_data_V_full_n = ap_const_logic_0)) or ((exitcond_reg_151 = ap_const_lv1_0) and (src_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_V_full_n, src_data_V_0_vld_out, exitcond_reg_151)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_reg_151 = ap_const_lv1_0) and (p_src_data_V_full_n = ap_const_logic_0)) or ((exitcond_reg_151 = ap_const_lv1_0) and (src_data_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_121_p2)
    begin
        if ((exitcond_fu_121_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_110_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond1_fu_110_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_110_p2 <= "1" when (i_i_reg_88 = src_rows) else "0";
    exitcond_fu_121_p2 <= "1" when (j_i_reg_99 = src_cols) else "0";
    i_fu_115_p2 <= std_logic_vector(unsigned(i_i_reg_88) + unsigned(ap_const_lv9_1));
    j_fu_126_p2 <= std_logic_vector(unsigned(j_i_reg_99) + unsigned(ap_const_lv10_1));

    p_src_data_V_blk_n_assign_proc : process(p_src_data_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_151)
    begin
        if (((exitcond_reg_151 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_src_data_V_blk_n <= p_src_data_V_full_n;
        else 
            p_src_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_src_data_V_din <= src_data_V_0_data_out;

    p_src_data_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_151, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_151 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_V_write <= ap_const_logic_1;
        else 
            p_src_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    src_TDATA_blk_n_assign_proc : process(src_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_151)
    begin
        if (((exitcond_reg_151 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_TDATA_blk_n <= src_data_V_0_state(0);
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_TREADY <= src_data_V_0_state(1);
    src_data_V_0_ack_in <= src_data_V_0_state(1);

    src_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_151, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_151 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_V_0_ack_out <= ap_const_logic_1;
        else 
            src_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_data_V_0_data_out_assign_proc : process(src_data_V_0_payload_A, src_data_V_0_payload_B, src_data_V_0_sel)
    begin
        if ((src_data_V_0_sel = ap_const_logic_1)) then 
            src_data_V_0_data_out <= src_data_V_0_payload_B;
        else 
            src_data_V_0_data_out <= src_data_V_0_payload_A;
        end if; 
    end process;

    src_data_V_0_load_A <= (src_data_V_0_state_cmp_full and not(src_data_V_0_sel_wr));
    src_data_V_0_load_B <= (src_data_V_0_state_cmp_full and src_data_V_0_sel_wr);
    src_data_V_0_sel <= src_data_V_0_sel_rd;
    src_data_V_0_state_cmp_full <= '0' when (src_data_V_0_state = ap_const_lv2_1) else '1';
    src_data_V_0_vld_in <= src_TVALID;
    src_data_V_0_vld_out <= src_data_V_0_state(0);
end behav;
