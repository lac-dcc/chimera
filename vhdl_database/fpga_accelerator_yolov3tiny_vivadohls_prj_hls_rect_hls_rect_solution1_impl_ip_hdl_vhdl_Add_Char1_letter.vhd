-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Add_Char1_letter_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 864
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Add_Char1_letter_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 11=> "1111111111111111", 12 => "1111000000000111", 13 => "1110000010000111", 
    14 => "1110011111111111", 15 to 16=> "1100011111111111", 17 => "1100000000011111", 
    18 => "1100000000000111", 19 => "1100011111000011", 20 => "1100011111100011", 
    21 => "1100011111110011", 22 => "1100000111100011", 23 => "1100000000000011", 
    24 => "1100010000000111", 25 to 37=> "1111111111111111", 38 to 43=> "1111111111100011", 
    44 => "1111000000100011", 45 => "1110000000000011", 46 => "1100011110000011", 
    47 to 52=> "1100111111100011", 53 => "1100011111100011", 54 => "1110001111100011", 
    55 => "1111000000000011", 56 => "1111100000000111", 57 to 75=> "1111111111111111", 
    76 => "1110000000111111", 77 => "1110000000001111", 78 => "1111111110000111", 
    79 => "1111111111000111", 80 to 84=> "1111111111100011", 85 => "1111111111000111", 
    86 => "1111111110000111", 87 => "1110000000001111", 88 => "1110000000111111", 
    89 to 101=> "1111111111111111", 102 to 107=> "1100011111111111", 108 => "1100000000011111", 
    109 => "1100000000000111", 110 => "1100011111100111", 111 => "1100011111100011", 
    112 to 116=> "1100011111110011", 117 => "1100001111100011", 118 => "1100000111100011", 
    119 => "1100010000000111", 120 => "1100011000001111", 121 to 139=> "1111111111111111", 
    140 => "1111000000011111", 141 => "1110000110000111", 142 => "1100011111100111", 
    143 => "1100011111100011", 144 => "1100111111110011", 145 to 146=> "1100000000000011", 
    147 to 148=> "1111111111110011", 149 => "1111111111100011", 150 => "1111111111000111", 
    151 => "1100000000000111", 152 => "1100000000011111", 153 to 165=> "1111111111111111", 
    166 => "1000000111111111", 167 => "1000000001111111", 168 => "1111110000111111", 
    169 => "1111111000111111", 170 to 173=> "1111111100111111", 174 to 175=> "1100000000000001", 
    176 to 184=> "1111111100111111", 185 to 203=> "1111111111111111", 204 => "1000000000001111", 
    205 => "1000000111000111", 206 => "1110001111100111", 207 to 208=> "1110011111100011", 
    209 => "1110001111100011", 210 => "1110000111000111", 211 => "1111000000000111", 
    212 => "1111111000100011", 213 => "1111111111110011", 214 => "1111111111100011", 
    215 => "1110000000000111", 216 => "1100000000000111", 217 => "1000111111110011", 
    218 => "1000111111110001", 219 => "1100111111110001", 220 => "1100001111000011", 
    221 => "1110000000000111", 222 => "1111111001111111", 223 to 229=> "1111111111111111", 
    230 to 235=> "1111111111100011", 236 => "1111000000100011", 237 => "1110000000000011", 
    238 => "1110011111000011", 239 to 248=> "1100011111100011", 249 to 261=> "1111111111111111", 
    262 => "1111111001111111", 263 to 264=> "1111110000111111", 265 => "1111111001111111", 
    266 to 267=> "1111111111111111", 268 to 269=> "1111110000000111", 270 to 278=> "1111110001111111", 
    279 to 280=> "1100000000000011", 281 to 293=> "1111111111111111", 294 => "1111100111111111", 
    295 to 297=> "1111000111111111", 298 to 299=> "1111111111111111", 300 to 301=> "1111000000000011", 
    302 to 314=> "1111000111111111", 315 => "1111100111111111", 316 => "1111100001100011", 
    317 => "1111110000000011", 318 => "1111111110011111", 319 to 325=> "1111111111111111", 
    326 to 331=> "1111111111100111", 332 => "1100011111100111", 333 => "1110001111100111", 
    334 => "1111000111100111", 335 => "1111100001100111", 336 => "1111110000100111", 
    337 => "1111111100000111", 338 => "1111111000100111", 339 => "1111110001100111", 
    340 => "1111100001100111", 341 => "1111000011100111", 342 => "1110000111100111", 
    343 => "1100001111100111", 344 => "1000011111100111", 345 to 357=> "1111111111111111", 
    358 to 359=> "1111110000000111", 360 to 374=> "1111110001111111", 375 to 376=> "1100000000000011", 
    377 to 395=> "1111111111111111", 396 => "1100001100001001", 397 => "1100100000001001", 
    398 => "1000110001100001", 399 => "1000110001110001", 400 to 408=> "1000111001110001", 
    409 to 427=> "1111111111111111", 428 => "1111000000110011", 429 => "1110000000000011", 
    430 => "1110011111000011", 431 to 440=> "1100011111100011", 441 to 459=> "1111111111111111", 
    460 => "1111000000001111", 461 => "1110000000000111", 462 => "1100011111100011", 
    463 to 464=> "1100111111110011", 465 to 467=> "1000111111110001", 468 => "1100111111110011", 
    469 => "1100011111100011", 470 => "1110001111100011", 471 => "1110000000000111", 
    472 => "1111100000001111", 473 to 491=> "1111111111111111", 492 => "1111000000100011", 
    493 => "1110000000000011", 494 => "1100011110000011", 495 to 500=> "1100111111100011", 
    501 => "1100011111100011", 502 => "1110001111100011", 503 => "1111000000000011", 
    504 => "1111100000000011", 505 to 509=> "1111111111100011", 510 to 523=> "1111111111111111", 
    524 => "1100000000011111", 525 => "1100000100000111", 526 => "1100011111100111", 
    527 => "1100011111100011", 528 to 532=> "1100011111110011", 533 => "1100001111100011", 
    534 => "1100000111100011", 535 => "1100010000000111", 536 => "1100011000001111", 
    537 to 541=> "1100011111111111", 542 to 555=> "1111111111111111", 556 => "1110000001100111", 
    557 => "1100000000100111", 558 => "1100111110000111", 559 => "1100111111000111", 
    560 => "1000111111100111", 561 to 568=> "1111111111100111", 569 to 587=> "1111111111111111", 
    588 => "1110000000001111", 589 => "1110001110000111", 590 to 591=> "1111111111100111", 
    592 => "1111111111000111", 593 => "1111111000001111", 594 => "1111000000011111", 
    595 => "1110000011111111", 596 => "1110001111111111", 597 => "1100011111111111", 
    598 => "1110011111111111", 599 => "1110000000000111", 600 => "1111100000000111", 
    601 to 615=> "1111111111111111", 616 to 619=> "1111111110011111", 620 to 621=> "1100000000000001", 
    622 to 629=> "1111111110011111", 630 => "1111111100011111", 631 => "1100000000111111", 
    632 => "1100000001111111", 633 to 651=> "1111111111111111", 652 to 660=> "1100011111100011", 
    661 => "1100001111100011", 662 => "1100000111100111", 663 => "1100000000000111", 
    664 => "1100011000001111", 665 to 683=> "1111111111111111", 684 => "1000111111110001", 
    685 => "1100111111110011", 686 => "1100011111100011", 687 => "1110011111100111", 
    688 => "1110001111000111", 689 => "1111001111000111", 690 => "1111001111001111", 
    691 => "1111000110001111", 692 => "1111100110011111", 693 => "1111100000011111", 
    694 => "1111110000011111", 695 to 696=> "1111110000111111", 697 to 715=> "1111111111111111", 
    716 to 718=> "1001111111111001", 719 => "1001111001111001", 720 => "1000111001110001", 
    721 => "1000110000110001", 722 => "1100110000110011", 723 => "1100100010110011", 
    724 to 725=> "1100100110010011", 726 => "1100000111000011", 727 => "1100001111000011", 
    728 => "1110001111000111", 729 to 747=> "1111111111111111", 748 => "1100011111100011", 
    749 => "1110011111000111", 750 => "1110001111000111", 751 => "1111000110001111", 
    752 => "1111100000011111", 753 to 755=> "1111110000111111", 756 => "1111100000011111", 
    757 => "1111000110001111", 758 => "1110001111000111", 759 => "1100011111100011", 
    760 => "1000011111100001", 761 to 779=> "1111111111111111", 780 => "1000111111110001", 
    781 => "1100111111110011", 782 => "1100011111100011", 783 => "1110011111100111", 
    784 to 785=> "1110001111000111", 786 => "1111001110001111", 787 => "1111000110001111", 
    788 => "1111100110011111", 789 => "1111100000011111", 790 => "1111100000111111", 
    791 to 792=> "1111110000111111", 793 to 794=> "1111111000111111", 795 => "1111111100011111", 
    796 => "1111111110000001", 797 => "1111111111000001", 798 to 811=> "1111111111111111", 
    812 to 813=> "1110000000000111", 814 => "1110001111111111", 815 => "1111000111111111", 
    816 => "1111100011111111", 817 => "1111110001111111", 818 => "1111111000111111", 
    819 => "1111111100111111", 820 => "1111111100011111", 821 => "1111111110001111", 
    822 => "1111111111000111", 823 to 824=> "1100000000000011", 825 to 831=> "1111111111111111", 
    832 to 863=> "0000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Add_Char1_letter is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 864;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Add_Char1_letter is
    component Add_Char1_letter_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Add_Char1_letter_rom_U :  component Add_Char1_letter_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


