-------------------------------------------------------------------------------- 
-- Copyright (c) 2002 Xilinx, Inc. 
-- All Rights Reserved 
-------------------------------------------------------------------------------- 
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /   Vendor: Xilinx 
-- \   \   \/    Author: John F. Snow, Advanced Product Division, Xilinx, Inc.
--  \   \        Filename: $RCSfile: vidgen_pal.vhd,rcs $
--  /   /        Date Last Modified:  $Date: 2010-03-12 09:15:34-07 $
-- /___/   /\    Date Created: January 7, 2002 
-- \   \  /  \ 
--  \___\/\___\ 
-- 
--
-- Revision History: 
-- $Log: vidgen_pal.vhd,rcs $
-- Revision 1.2  2010-03-12 09:15:34-07  jsnow
-- Changed all BRAM inits to be passed in-line for compatibility
-- with ISE 12.1.
--
-- Revision 1.1  2004-12-14 09:59:09-07  jsnow
-- Comment changes only.
--
-- Revision 1.0  2004-10-19 08:17:23-06  jsnow
-- Clock enable inputs are functional now.
--
-------------------------------------------------------------------------------- 
--   
--   XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" 
--   AS A COURTESY TO YOU, SOLELY FOR USE IN DEVELOPING PROGRAMS AND 
--   SOLUTIONS FOR XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE, 
--   OR INFORMATION AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, 
--   APPLICATION OR STANDARD, XILINX IS MAKING NO REPRESENTATION 
--   THAT THIS IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT, 
--   AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE 
--   FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY 
--   WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE 
--   IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR 
--   REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF 
--   INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
--   FOR A PARTICULAR PURPOSE. 
--
-------------------------------------------------------------------------------- 
-- 
-- This digital video test pattern generator is Block SelectRAM-based and is
-- designed to work with the RAM initialization files generated by the cbgen
-- utility.
-- 
-- This module uses three different block RAMS, one for vertical state machine, 
-- one for the horizontal state machine, and one for the video component 
-- generator. Since the block RAMs are dual-port in nature, two  independent 
-- pattern generators can be built using little more logic than is required to 
-- build one pattern generator. This module provides inputs and outputs for 
-- two pattern generators called the A and B pattern generators.
-- 
-- Each pattern generator has its own clock input, clock enable input, and 
-- pattern select input. Normally, the clock enable inputs (ce_a and ce_b) would
-- be tied high, but they can be controlled if the clock inputs are some 
-- multiple of the rate at which the pattern generator is to be cycled.
-- 
-- Note that since the video component generator block RAM is used in 9-bit wide
-- mode, the actual video component values generated by the pattern generator 
-- are really only 9-bit values. The least significant bit out of the RAM is 
-- used for the two LSBs of the video value coming out of the module. This 
-- results in LS bit errors in some video values (when compared to the SMPTE 
-- standard), but does results in correct values for all TRS symbols and for the
-- RP 178 test patterns. The code will support video output paths of 10 bits or
-- less. For wider paths, the code will need to be modified -- probably to 
-- use to block RAMs for the CROM to make it wider. The constant VID_MAX is set
-- to a value of 10 to indicate that the maximum video width for this code is
-- ten bits.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
use ieee.numeric_std.all;

library UNISIM;
use UNISIM.vcomponents.all;

entity vidgen_pal is
    generic (
        VID_WIDTH : integer := 10                                   -- width of video output
    );
    port (
        -- signals for pattern generator A
        clk_a:      in  std_logic;                                 -- clock input
        rst_a:      in  std_logic;                                 -- async reset input
        ce_a:       in  std_logic;                                 -- clock enable input
        pattern_a:  in  std_logic;                                 -- pattern select
        q_a:        out std_ulogic_vector(VID_WIDTH - 1 downto 0);  -- video output
        h_sync_a:   out std_logic;                                 -- h sync out
        v_sync_a:   out std_logic;                                 -- v sync out
        field_a:    out std_logic;                                 -- field out

        -- signals for pattern generator B 
        clk_b:      in  std_logic;                                 -- clock input
        rst_b:      in  std_logic;                                 -- async reset input
        ce_b:       in  std_logic;                                 -- clock enable input
        pattern_b:  in  std_logic;                                 -- pattern select
        q_b:        out std_ulogic_vector(VID_WIDTH - 1 downto 0);  -- video output
        h_sync_b:   out std_logic;                                 -- h sync out
        v_sync_b:   out std_logic;                                 -- v sync out
        field_b:    out std_logic                                  -- field out
);
end vidgen_pal;

architecture synth of vidgen_pal is


-------------------------------------------------------------------------------
-- Constant definitions
--

constant VID_MAX :      integer := 10;              -- Max video width the code is setup to handle
constant HRGN_WIDTH :   integer := 4;               -- Width of h_region
constant VRGN_WIDTH :   integer := 4;               -- Width of v_region
constant HROM_WIDTH :   integer := 16;              -- Width of hrom
constant HROM_P_WIDTH : integer := 2;               -- Width of hrom parity
constant VROM_WIDTH :   integer := 16;              -- Width of vrom
constant VROM_P_WIDTH : integer := 2;               -- Width of vrom parity
constant CROM_WIDTH :   integer := 8;               -- Width of crom
constant CROM_P_WIDTH : integer := 1;               -- Width of crom parity
constant CROM_ADR_WIDTH:integer := 11;              -- Width of crom address 
constant VSTATE_WIDTH : integer := 10;              -- Width of v_state
constant HSTATE_WIDTH : integer := 10;              -- Width of h_state

constant VID_MSB :      integer := VID_WIDTH - 1;   -- MS bit # of video
constant VID_MAX_MSB :  integer := VID_MAX - 1;
constant HRGN_MSB :     integer := HRGN_WIDTH - 1;  -- MS bit # of h_region
constant VRGN_MSB :     integer := VRGN_WIDTH - 1;  -- MS bit # of v_region
constant HROM_MSB :     integer := HROM_WIDTH - 1;  -- MS bit # of hrom
constant HROM_P_MSB :   integer := HROM_P_WIDTH - 1;-- MS bit # of hrom parity
constant VROM_MSB :     integer := VROM_WIDTH - 1;  -- MS bit # of vrom 
constant VROM_P_MSB :   integer := VROM_P_WIDTH - 1;-- MS bit # of vrom parity
constant CROM_MSB :     integer := CROM_WIDTH - 1;  -- MS bit # of crom
constant CROM_P_MSB :   integer := CROM_P_WIDTH - 1;-- MS bit # of crom parity
constant CROM_MSBP :    integer := CROM_WIDTH;      -- Bit position in crom where parity bit is inserted
constant CROM_ADR_MSB : integer := CROM_ADR_WIDTH - 1;-- MS bit # of crom address
constant VSTATE_MSB :   integer := VSTATE_WIDTH - 1;-- MS bit # of v_state
constant HSTATE_MSB :   integer := HSTATE_WIDTH - 1;-- MS bit # of h_state


-------------------------------------------------------------------------------
-- Signal definitions
--

-- internal signals for pattern generator A
signal samples_a :  std_logic_vector(1 downto 0);           -- horizontal sample counter
signal h_enable_a : std_logic;                             -- h enable output of h state machine
signal hen_a :      std_logic;                             -- clock enable for h state machine
signal v_enable_a : std_logic;                             -- v clock enable output of h state machine
signal ven_a :      std_logic;                             -- clock enable for v state machine     
signal h_state_a :  std_logic_vector(HSTATE_MSB downto 0);  -- h state machine present state
signal v_state_a :  std_logic_vector(VSTATE_MSB downto 0);  -- v state machine present state
signal h_region_a : std_logic_vector(HRGN_MSB downto 0);    -- h region value
signal v_region_a : std_logic_vector(VRGN_MSB downto 0);    -- v region value
signal h_a :        std_logic;                             -- h bit from h state machine
signal v_a :        std_logic;                             -- v bit from v state machine
signal f_a :        std_logic;                             -- field bit from v state machine
signal hrom_a :     std_logic_vector(HROM_MSB downto 0);    -- hrom output
signal hromp_a :    std_logic_vector(HROM_P_MSB downto 0); -- hrom parity bits
signal vrom_a :     std_logic_vector(VROM_MSB downto 0);    -- vrom output
signal vromp_a :    std_logic_vector(VROM_P_MSB downto 0);  -- vrom parity bits
signal crom_a :     std_logic_vector(CROM_MSB + CROM_P_WIDTH downto 0);-- crom output
signal crom_adr_a : std_logic_vector(CROM_ADR_MSB downto 0);-- crom address
signal q_a_temp :   std_logic_vector(VID_MAX_MSB downto 0);-- temporary 10-bit wide output

-- internal signals for pattern generator B
signal samples_b :  std_logic_vector(1 downto 0);           -- horizontal sample counter
signal h_enable_b : std_logic;                             -- h enable output of h state machine
signal hen_b :      std_logic;                             -- clock enable for h state machine
signal v_enable_b : std_logic;                             -- v enable output of h state machine
signal ven_b :      std_logic;                             -- clock enable for v state machine
signal h_state_b :  std_logic_vector(HSTATE_MSB downto 0); -- h state machine present state
signal v_state_b :  std_logic_vector(VSTATE_MSB downto 0);  -- v state machine present state
signal h_region_b : std_logic_vector(HRGN_MSB downto 0);    -- h region value
signal v_region_b : std_logic_vector(VRGN_MSB downto 0);    -- v region value
signal h_b :        std_logic;                             -- h bit from h state machine
signal v_b :        std_logic;                             -- v bit from v state machine
signal f_b :        std_logic;                             -- field bit from v state machine
signal hrom_b :     std_logic_vector(HROM_MSB downto 0);    -- hrom output
signal hromp_b :    std_logic_vector(HROM_P_MSB downto 0);  -- hrom parity bits
signal vrom_b :     std_logic_vector(VROM_MSB downto 0);    -- vrom output
signal vromp_b :    std_logic_vector(VROM_P_MSB downto 0);  -- vrom parity bits
signal crom_b :     std_logic_vector(CROM_MSB + CROM_P_WIDTH downto 0);-- crom output
signal crom_adr_b : std_logic_vector(CROM_ADR_MSB downto 0);-- crom address
signal q_b_temp :   std_logic_vector(VID_MAX_MSB downto 0);-- temporary 10-bit wide output

signal hrom_zeros : std_logic_vector(HROM_MSB downto 0);    -- zeros for unused hrom write ports
signal hromp_zeros: std_logic_vector(HROM_P_MSB downto 0);  -- zeros for unused hrom parity write ports
signal vrom_zeros : std_logic_vector(VROM_MSB downto 0);    -- zeros for unused vrom write ports
signal vromp_zeros: std_logic_vector(VROM_P_MSB downto 0);  -- zeros for unused vrom parity write ports
signal crom_zeros : std_logic_vector(CROM_MSB downto 0);    -- zeros for unused crom write ports
signal cromp_zeros: std_logic_vector(CROM_P_MSB downto 0);  -- zeros for unused crom parity write ports
signal VCC :        std_logic;
signal GND :        std_logic;


begin
        
    VCC         <= '1';
    GND         <= '0';
    hrom_zeros  <= (others => '0');
    hromp_zeros <= (others => '0');
    vrom_zeros  <= (others => '0');
    vromp_zeros <= (others => '0');
    crom_zeros  <= (others => '0');
    cromp_zeros <= (others => '0');
            
    --
    -- Horizontal state machine
    --
    -- The horizontal state machine changes states every four samples.  During each 
    -- horizontal state, four video component values are generated in the following 
    -- pattern: Cb Y Cr Y. 
    --
    -- The horizontal state machine generates a 10-bit current state value which
    -- is wrapped around to the address inputs of the ROM. Note that for standard
    -- definition 4:3 aspect ratio video, 9 horizontal state bits are sufficient, 
    -- but using ten allows for support of 16:9 aspect ratio video.
    --
    -- The horizontal state machine also generates a 4-bit horizontal region 
    -- (h_region_x) value that indicates to the VIDROM which horizontal region is 
    -- currently active. The state machine generates a h bit that is clocked into a 
    -- flip-flop to generate the h_sync output of the module. Also generated is a 
    -- v_enable bit which enables the vertical state machine to advance to the next 
    -- vertical state.
    --

    hen_a <= ce_a and h_enable_a;
    hen_b <= ce_b and h_enable_b;

    HROM : RAMB16_S18_S18
        --
        -- Initialize HROM for simulation
        -- Created from file PAL_EG1_RP178.txt on Fri 27 Aug 2004 14:54
        -- Number of patterns = 2, number of hregion bits = 4, number of vregion bits = 4
        --
        generic map (
            WRITE_MODE_A => "READ_FIRST",
            WRITE_MODE_B => "READ_FIRST",
            INIT_A       => X"23167",
            INIT_B       => X"23167",
            SRVAL_A      => X"23167",
            SRVAL_B      => X"23167",
            INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INITP_02 => X"5555555555556000000000000000000000000000000000000000000000000000",
            INITP_03 => X"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA155555555555555555555555",
            INITP_04 => X"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            INITP_05 => X"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            INITP_06 => X"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            INITP_07 => X"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            INIT_00 => X"0010000F000E000D000C000B000A000900080007000600050004000300020001",
            INIT_01 => X"0020001F001E001D001C001B001A001900180017001600150014001300120011",
            INIT_02 => X"0030002F002E002D002C002B002A002900280027002600250024002300220021",
            INIT_03 => X"0440043F043E043D043C043B043A043904380437043604350434003300320031",
            INIT_04 => X"0850084F084E084D084C084B084A084908480847084608450844084308420841",
            INIT_05 => X"0860085F085E085D085C085B085A085908580857085608550854085308520851",
            INIT_06 => X"0C700C6F0C6E0C6D0C6C0C6B0C6A0C690C680867086608650864086308620861",
            INIT_07 => X"0C800C7F0C7E0C7D0C7C0C7B0C7A0C790C780C770C760C750C740C730C720C71",
            INIT_08 => X"1090108F108E108D108C108B108A108910881087108610851084108310820C81",
            INIT_09 => X"14A0149F149E149D149C109B109A109910981097109610951094109310921091",
            INIT_0A => X"14B014AF14AE14AD14AC14AB14AA14A914A814A714A614A514A414A314A214A1",
            INIT_0B => X"14C014BF14BE14BD14BC14BB14BA14B914B814B714B614B514B414B314B214B1",
            INIT_0C => X"1CD018CF18CE18CD18CC18CB18CA18C918C818C718C618C518C418C314C214C1",
            INIT_0D => X"1CE01CDF1CDE1CDD1CDC1CDB1CDA1CD91CD81CD71CD61CD51CD41CD31CD21CD1",
            INIT_0E => X"1CF01CEF1CEE1CED1CEC1CEB1CEA1CE91CE81CE71CE61CE51CE41CE31CE21CE1",
            INIT_0F => X"1D001CFF1CFE1CFD1CFC1CFB1CFA1CF91CF81CF71CF61CF51CF41CF31CF21CF1",
            INIT_10 => X"2110210F210E210D210C210B210A2109210821072106210521041D031D021D01",
            INIT_11 => X"2520251F251E251D251C251B251A251925182517251625152114211321122111",
            INIT_12 => X"2930292F292E292D292C292B292A292929282927252625252524252325222521",
            INIT_13 => X"2D402D3F2D3E2D3D2D3C2D3B2D3A2D392D382937293629352934293329322931",
            INIT_14 => X"2D502D4F2D4E2D4D2D4C2D4B2D4A2D492D482D472D462D452D442D432D422D41",
            INIT_15 => X"2D602D5F2D5E2D5D2D5C2D5B2D5A2D592D582D572D562D552D542D532D522D51",
            INIT_16 => X"3570356F356E356D356C356B356A3569396831672D662D652D642D632D622D61",
            INIT_17 => X"3580357F357E357D357C357B357A357935783577357635753574357335723571",
            INIT_18 => X"3590358F358E358D358C358B358A358935883587358635853584358335823581",
            INIT_19 => X"35A0359F359E359D359C359B359A359935983597359635953594359335923591",
            INIT_1A => X"00003DAF35AE35AD35AC35AB35AA35A935A835A735A635A535A435A335A235A1",
            INIT_1B => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_1C => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_1D => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_1E => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_1F => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_20 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_21 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_22 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_23 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_24 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_25 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_26 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_27 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_28 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_29 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_2A => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_2B => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_2C => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_2D => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_2E => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_2F => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_30 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_31 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_32 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_33 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_34 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_35 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_36 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_37 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_38 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_39 => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_3A => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_3B => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_3C => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_3D => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_3E => X"3167316731673167316731673167316731673167316731673167316731673167",
            INIT_3F => X"3167316731673167316731673167316731673167316731673167316731673167"
        )
        port map (
            DOA     => hrom_a,
            DOPA    => hromp_a,
            DOB     => hrom_b,
            DOPB    => hromp_b,
            ADDRA   => h_state_a,
            CLKA    => clk_a,
            DIA     => hrom_zeros,
            DIPA    => hromp_zeros,
            ENA     => hen_a,
            SSRA    => rst_a,
            WEA     => GND,
            ADDRB   => h_state_b,
            CLKB    => clk_b,
            DIB     => hrom_zeros,
            DIPB    => hromp_zeros,
            ENB     => hen_b,
            SSRB    => rst_b,
            WEB     => GND
        );


    -- Assign the HROM output to the various signals
    h_enable_a <= samples_a(1) and samples_a(0);
    v_enable_a <= hromp_a(1);
    h_a        <= hromp_a(0);
    h_region_a <= hrom_a(HRGN_MSB + HSTATE_WIDTH downto HSTATE_WIDTH);
    h_state_a  <= hrom_a(HSTATE_MSB downto 0);

    h_enable_b <= samples_b(1) and samples_b(0);
    v_enable_b <= hromp_b(1);
    h_b        <= hromp_b(0);
    h_region_b <= hrom_b(HRGN_MSB + HSTATE_WIDTH downto HSTATE_WIDTH);
    h_state_b  <= hrom_b(HSTATE_MSB downto 0);

    -- 
    -- Vertical state machine
    --
    -- The vertical state machine changes states once per line. It advances to the
    -- next state when the v_enable signal from the horizontal state machine is
    -- asserted (and the sample counter is at 3). The advancement to the next line
    -- does not occur when the horizontal state machine is at its maximum count.
    -- Instead this happens such that the new line begins coincident with the EAV
    -- symbol.
    --
    -- The vertical state machine ROM generates a 10-bit current state value. This
    -- is sufficient to support both NTSC and PAL standard definition video. The
    -- current state is wrapped back to the address inputs of the VROM.
    --
    -- The vertical state machine generates a 4-bit vertical region value 
    -- (v_region_x) that indicates to the video component ROM which vertical region 
    -- is active. Also generated by the vertical state machine are f and v signals 
    -- that are registered by flip-flops and become the field and v_sync outputs of 
    -- the module.
    --

    ven_a       <= h_enable_a and ce_a and v_enable_a;
    ven_b       <= h_enable_b and ce_b and v_enable_b;

    VROM : RAMB16_S18_S18
        --
        -- Initialize VROM for simulation
        -- Created from file PAL_EG1_RP178.txt on Fri 27 Aug 2004 14:54
        -- Number of patterns = 2, number of hregion bits = 4, number of vregion bits = 4
        --
        generic map (
            WRITE_MODE_A => "READ_FIRST",
            WRITE_MODE_B => "READ_FIRST",
            INIT_A       => X"30671",
            INIT_B       => X"30671",
            SRVAL_A      => X"30671",
            SRVAL_B      => X"30671",
            INITP_00 => X"0000000000000000000000000000000000000000000000000000055555555557",
            INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INITP_02 => X"AAAAAAAAAAAAAAAAAAAAAAAABFFFFFFFFFFF5000000000000000000000000000",
            INITP_03 => X"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            INITP_04 => X"FFFFFFF7EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            INITP_05 => X"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
            INITP_06 => X"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
            INITP_07 => X"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
            INIT_00 => X"0010000F000E000D000C000B000A000900080007000600050004000300020671",
            INIT_01 => X"0C200C1F0C1E0C1D0C1C0C1B0C1A0C190C180817001600150014001300120011",
            INIT_02 => X"0C300C2F0C2E0C2D0C2C0C2B0C2A0C290C280C270C260C250C240C230C220C21",
            INIT_03 => X"0C400C3F0C3E0C3D0C3C0C3B0C3A0C390C380C370C360C350C340C330C320C31",
            INIT_04 => X"0C500C4F0C4E0C4D0C4C0C4B0C4A0C490C480C470C460C450C440C430C420C41",
            INIT_05 => X"0C600C5F0C5E0C5D0C5C0C5B0C5A0C590C580C570C560C550C540C530C520C51",
            INIT_06 => X"0C700C6F0C6E0C6D0C6C0C6B0C6A0C690C680C670C660C650C640C630C620C61",
            INIT_07 => X"0C800C7F0C7E0C7D0C7C0C7B0C7A0C790C780C770C760C750C740C730C720C71",
            INIT_08 => X"0C900C8F0C8E0C8D0C8C0C8B0C8A0C890C880C870C860C850C840C830C820C81",
            INIT_09 => X"0CA00C9F0C9E0C9D0C9C0C9B0C9A0C990C980C970C960C950C940C930C920C91",
            INIT_0A => X"10B010AF10AE10AD10AC10AB10AA10A910A810A710A610A510A410A310A210A1",
            INIT_0B => X"10C010BF10BE10BD10BC10BB10BA10B910B810B710B610B510B410B310B210B1",
            INIT_0C => X"10D010CF10CE10CD10CC10CB10CA10C910C810C710C610C510C410C310C210C1",
            INIT_0D => X"14E014DF14DE14DD14DC14DB14DA14D914D810D710D610D510D410D310D210D1",
            INIT_0E => X"18F018EF14EE14ED14EC14EB14EA14E914E814E714E614E514E414E314E214E1",
            INIT_0F => X"190018FF18FE18FD18FC18FB18FA18F918F818F718F618F518F418F318F218F1",
            INIT_10 => X"1910190F190E190D190C190B190A190919081907190619051904190319021901",
            INIT_11 => X"1920191F191E191D191C191B191A191919181917191619151914191319121911",
            INIT_12 => X"1930192F192E192D192C192B192A192919281927192619251924192319221921",
            INIT_13 => X"0540053F053E053D053C053B053A053901380137193619351934193319321931",
            INIT_14 => X"1D50054F054E054D054C054B054A054905480547054605450544054305420541",
            INIT_15 => X"1D601D5F1D5E1D5D1D5C1D5B1D5A1D591D581D571D561D551D541D531D521D51",
            INIT_16 => X"1D701D6F1D6E1D6D1D6C1D6B1D6A1D691D681D671D661D651D641D631D621D61",
            INIT_17 => X"1D801D7F1D7E1D7D1D7C1D7B1D7A1D791D781D771D761D751D741D731D721D71",
            INIT_18 => X"1D901D8F1D8E1D8D1D8C1D8B1D8A1D891D881D871D861D851D841D831D821D81",
            INIT_19 => X"1DA01D9F1D9E1D9D1D9C1D9B1D9A1D991D981D971D961D951D941D931D921D91",
            INIT_1A => X"1DB01DAF1DAE1DAD1DAC1DAB1DAA1DA91DA81DA71DA61DA51DA41DA31DA21DA1",
            INIT_1B => X"1DC01DBF1DBE1DBD1DBC1DBB1DBA1DB91DB81DB71DB61DB51DB41DB31DB21DB1",
            INIT_1C => X"1DD01DCF1DCE1DCD1DCC1DCB1DCA1DC91DC81DC71DC61DC51DC41DC31DC21DC1",
            INIT_1D => X"21E021DF21DE21DD21DC21DB21DA1DD91DD81DD71DD61DD51DD41DD31DD21DD1",
            INIT_1E => X"21F021EF21EE21ED21EC21EB21EA21E921E821E721E621E521E421E321E221E1",
            INIT_1F => X"220021FF21FE21FD21FC21FB21FA21F921F821F721F621F521F421F321F221F1",
            INIT_20 => X"2210220F220E220D220C220B220A220922082207220622052204220322022201",
            INIT_21 => X"2620261F261E261D261C261B261A261926182617261626152614261326122611",
            INIT_22 => X"2A302A2F2A2E2A2D2A2C2A2B2A2A2A292A282627262626252624262326222621",
            INIT_23 => X"2A402A3F2A3E2A3D2A3C2A3B2A3A2A392A382A372A362A352A342A332A322A31",
            INIT_24 => X"2A502A4F2A4E2A4D2A4C2A4B2A4A2A492A482A472A462A452A442A432A422A41",
            INIT_25 => X"2A602A5F2A5E2A5D2A5C2A5B2A5A2A592A582A572A562A552A542A532A522A51",
            INIT_26 => X"06702A6F2A6E2A6D2A6C2A6B2A6A2A692A682A672A662A652A642A632A622A61",
            INIT_27 => X"0671067106710671067106710671067106710671067106710671067100010671",
            INIT_28 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_29 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_2A => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_2B => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_2C => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_2D => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_2E => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_2F => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_30 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_31 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_32 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_33 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_34 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_35 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_36 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_37 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_38 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_39 => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_3A => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_3B => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_3C => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_3D => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_3E => X"0671067106710671067106710671067106710671067106710671067106710671",
            INIT_3F => X"0671067106710671067106710671067106710671067106710671067106710671"
        )
        port map (
            DOA     => vrom_a,
            DOPA    => vromp_a,
            DOB     => vrom_b,
            DOPB    => vromp_b,
            ADDRA   => v_state_a,
            CLKA    => clk_a,
            DIA     => vrom_zeros,
            DIPA    => vromp_zeros,
            ENA     => ven_a,
            SSRA    => rst_a,
            WEA     => GND,
            ADDRB   => v_state_b,
            CLKB    => clk_b,
            DIB     => vrom_zeros,
            DIPB    => vromp_zeros,
            ENB     => ven_b,
            SSRB    => rst_b,
            WEB     => GND
        );


    -- Assign the VROM output bits to the various signals
    f_a         <= vromp_a(1);
    v_a         <= vromp_a(0);
    v_region_a  <= vrom_a(VRGN_MSB + VSTATE_WIDTH downto VSTATE_WIDTH);
    v_state_a   <= vrom_a(VSTATE_MSB downto 0);

    f_b         <= vromp_b(1);
    v_b         <= vromp_b(0);
    v_region_b  <= vrom_b(VRGN_MSB + VSTATE_WIDTH downto VSTATE_WIDTH);
    v_state_b   <= vrom_b(VSTATE_MSB downto 0);


--
-- Video component ROM
--
-- The video component ROM generates the 9-bit video value. The LS bit out of
-- this ROM is used as the two LS bits of the 10-bit video component value
-- out of the module.
--
-- The video component ROM's address is formed from the pattern input bit that
-- selects between the two patterns stored in the ROM and the v_region and
-- h_region values from the vertical and horizontal state machines. The last two
-- address bits into the ROM come from a 2-bit sample counter.
--

    CROM : RAMB16_S9_S9
        --
        -- Initialize CROM for simulation
        -- Created from file PAL_EG1_RP178.txt on Fri 27 Aug 2004 14:54
        -- Number of patterns = 2, number of hregion bits = 4, number of vregion bits = 4
        --
        generic map (
            WRITE_MODE_A => "READ_FIRST",
            WRITE_MODE_B => "READ_FIRST",
            INIT_A       => X"000",
            INIT_B       => X"000",
            SRVAL_A      => X"000",
            SRVAL_B      => X"000",
            INITP_00 => X"995114445AABBEEF995114445AABBEEF99555555555555559955555555555555",
            INITP_01 => X"995114445AABBEEF995555555555FF11995FF555B5555551995114445AABBEEF",
            INITP_02 => X"0000000000000000995555555555FF11995FF555B5555551995114445AABBEEF",
            INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INITP_04 => X"9955555555555555995555555555555599555555555555559955555555555555",
            INITP_05 => X"9955555555555555995555555555555599555555555555559955555555555555",
            INITP_06 => X"0000000000000000995555555555555599555555555555559955555555555555",
            INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_00 => X"2000200020002000200020002000200020002000200020002000200020002000",
            INIT_01 => X"560000FF6C0000FF200020002000200020002000200020002000200020002000",
            INIT_02 => X"2000200020002000200020002000200020002000200020002000200020002000",
            INIT_03 => X"D80000FFE20000FF200020002000200020002000200020002000200020002000",
            INIT_04 => X"7D987D810B670B7E0B670B7E2258222622582226510F5158510F515868006800",
            INIT_05 => X"000000FF3A0000FF2000200037F037A837F037A866A866D966A866D966A866D9",
            INIT_06 => X"7D987D810B670B7E0B670B7E2258222622582226510F5158510F515868006800",
            INIT_07 => X"000000FF3A0000FF2000200037F037A837F037A866A866D966A866D966A866D9",
            INIT_08 => X"7D987D810B670B7E0B670B7E2258222622582226510F5158510F515868006800",
            INIT_09 => X"000000FF3A0000FF2000200037F037A837F037A866A866D966A866D966A866D9",
            INIT_0A => X"2258222620002000200020007D987D817D987D81200020002000200037F037A8",
            INIT_0B => X"000000FF3A0000FF200020006800680068006800200020002000200020002000",
            INIT_0C => X"2000200020002000462F465C462F465CD600D600D600D6007AC57A327AC57A32",
            INIT_0D => X"000000FF3A0000FF20002000200020002000200031003100200020000E000E00",
            INIT_0E => X"7D987D810B670B7E0B670B7E2258222622582226510F5158510F515868006800",
            INIT_0F => X"8E0000FFB40000FF2000200037F037A837F037A866A866D966A866D966A866D9",
            INIT_10 => X"7D987D810B670B7E0B670B7E2258222622582226510F5158510F515868006800",
            INIT_11 => X"8E0000FFB40000FF2000200037F037A837F037A866A866D966A866D966A866D9",
            INIT_12 => X"2258222620002000200020007D987D817D987D81200020002000200037F037A8",
            INIT_13 => X"8E0000FFB40000FF200020006800680068006800200020002000200020002000",
            INIT_14 => X"2000200020002000462F465C462F465CD600D600D600D6007AC57A327AC57A32",
            INIT_15 => X"8E0000FFB40000FF20002000200020002000200031003100200020000E000E00",
            INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_20 => X"2000200020002000200020002000200020002000200020002000200020002000",
            INIT_21 => X"560000FF6C0000FF200020002000200020002000200020002000200020002000",
            INIT_22 => X"2000200020002000200020002000200020002000200020002000200020002000",
            INIT_23 => X"D80000FFE20000FF200020002000200020002000200020002000200020002000",
            INIT_24 => X"CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80",
            INIT_25 => X"000000FF3A0000FF200020004080CC80CC80CC80CC80CC80CC80CC80CC80CC80",
            INIT_26 => X"CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80",
            INIT_27 => X"000000FF3A0000FF20002000CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80",
            INIT_28 => X"8800880088008800880088008800880088008800880088008800880088008800",
            INIT_29 => X"000000FF3A0000FF200020008800880088008800880088008800880088008800",
            INIT_2A => X"8800880088008800880088008800880088008800880088008800880088008800",
            INIT_2B => X"000000FF3A0000FF200020008800880088008800880088008800880088008800",
            INIT_2C => X"8800880088008800880088008800880088008800880088008800880088008800",
            INIT_2D => X"000000FF3A0000FF200020008800880088008800880088008800880088008800",
            INIT_2E => X"CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80",
            INIT_2F => X"8E0000FFB40000FF20002000CC80CC80CC80CC80CC80CC80CC80CC80CC80CC80",
            INIT_30 => X"8800880088008800880088008800880088008800880088008800880088008800",
            INIT_31 => X"8E0000FFB40000FF200020008800880088008800880088008800880088008800",
            INIT_32 => X"8800880088008800880088008800880088008800880088008800880088008800",
            INIT_33 => X"8E0000FFB40000FF200020008800880088008800880088008800880088008800",
            INIT_34 => X"8800880088008800880088008800880088008800880088008800880088008800",
            INIT_35 => X"8E0000FFB40000FF200020008800880088008800880088008800880088008800",
            INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
            INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000"
        )
        port map (
            DOA     => crom_a(CROM_MSB downto 0),
            DOPA    => crom_a(CROM_MSB + 1 downto CROM_MSB + 1),
            DOB     => crom_b(CROM_MSB downto 0),
            DOPB    => crom_b(CROM_MSB + 1 downto CROM_MSB + 1),
            ADDRA   => crom_adr_a,
            CLKA    => clk_a,
            DIA     => crom_zeros,
            DIPA    => cromp_zeros,
            ENA     => ce_a,
            SSRA    => rst_a,
            WEA     => GND,
            ADDRB   => crom_adr_b,
            CLKB    => clk_b,
            DIB     => crom_zeros,
            DIPB    => cromp_zeros,
            ENB     => ce_b,
            SSRB    => rst_b,
            WEB     => GND
        );

    -- Create the address for the CROM. If there is no pattern input, remove it
    -- from the concatenations below.
    crom_adr_a <= (pattern_a & v_region_a & h_region_a & samples_a);
    crom_adr_b <= (pattern_b & v_region_b & h_region_b & samples_b);

    -- Replicate the LS bit of CROM to generate 10-bit video output path then
    -- scale back down to the video width output.
    q_a_temp <= (crom_a & crom_a(0));
    q_a      <= TO_STDULOGICVECTOR(q_a_temp(VID_MAX_MSB downto VID_MAX - VID_WIDTH));

    q_b_temp <= (crom_b & crom_b(0));
    q_b      <= TO_STDULOGICVECTOR(q_b_temp(VID_MAX_MSB downto VID_MAX - VID_WIDTH));

    --
    -- Sample counters A and B
    --
    -- This is a two-bit counter used as the LS two address bits into the video
    -- ROM. The sample counter is also used to generate the clock enable inputs to
    -- the horizontal and vertical state machine so that these state machines only
    -- advance on the fourth sample of a horizontal state.
    --

    process(clk_a, rst_a)
    begin
        if(rst_a = '1') then
            samples_a <= "11";
        elsif (clk_a'event and clk_a = '1') then
            if (ce_a = '1') then
                samples_a <= samples_a + 1;
            end if;
        end if;
    end process;

    process(clk_b, rst_b)
    begin
        if (rst_b = '1') then
            samples_b <= "11";
        elsif (clk_b'event and clk_b = '1') then
            if (ce_b = '1') then
                samples_b <= samples_b + 1;
            end if;
        end if;     
    end process;

    --
    -- Output flip-flops
    -- 
    -- These flip-flops register the field, h_sync, and v_sync outputs of the module.
    --

    process(clk_a, rst_a)
    begin
        if (rst_a = '1') then
            h_sync_a <= '0';
            v_sync_a <= '0';
            field_a  <= '0';
        elsif (clk_a'event and clk_a = '1') then
            if (ce_a = '1') then
                h_sync_a <= h_a;
                v_sync_a <= v_a;
                field_a  <= f_a;
            end if;
        end if;
    end process;

    process(clk_b, rst_b)
    begin
        if (rst_b = '1') then
            h_sync_b <= '0';
            v_sync_b <= '0';
            field_b  <= '0';
        elsif (clk_b'event and clk_b = '1') then
            if (ce_b = '1') then
                h_sync_b <= h_b;
                v_sync_b <= v_b;
                field_b  <= f_b;
            end if;
        end if;
    end process;

end synth;
