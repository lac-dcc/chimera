-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_edge is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_r_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of canny_edge is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "canny_edge,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.883000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=14,HLS_SYN_DSP=15,HLS_SYN_FF=5287,HLS_SYN_LUT=10476,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal low_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal high_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_dst_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_dst_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_dst_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_dst_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src_bw_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src_bw_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src_bw_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src_bw_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src1_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src1_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src1_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src1_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src2_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src2_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_src2_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_src2_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_sobel_gx_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_sobel_gx_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_sobel_gx_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_sobel_gx_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_grad_gd_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_grad_gd_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_grad_gd_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_grad_gd_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_suppressed_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_suppressed_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_suppressed_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_suppressed_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_canny_edges_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_canny_edges_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_canny_edges_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_canny_edges_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_low_threshold_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_low_threshold_out_write : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_high_threshold_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit421_pr_U0_high_threshold_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_in_r_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal CvtColor_U0_ap_start : STD_LOGIC;
    signal CvtColor_U0_ap_done : STD_LOGIC;
    signal CvtColor_U0_ap_continue : STD_LOGIC;
    signal CvtColor_U0_ap_idle : STD_LOGIC;
    signal CvtColor_U0_ap_ready : STD_LOGIC;
    signal CvtColor_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Sobel_U0_ap_start : STD_LOGIC;
    signal Sobel_U0_ap_done : STD_LOGIC;
    signal Sobel_U0_ap_continue : STD_LOGIC;
    signal Sobel_U0_ap_idle : STD_LOGIC;
    signal Sobel_U0_ap_ready : STD_LOGIC;
    signal Sobel_U0_p_src_rows_V_read : STD_LOGIC;
    signal Sobel_U0_p_src_cols_V_read : STD_LOGIC;
    signal Sobel_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Sobel_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Sobel_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Sobel_1_U0_ap_start : STD_LOGIC;
    signal Sobel_1_U0_ap_done : STD_LOGIC;
    signal Sobel_1_U0_ap_continue : STD_LOGIC;
    signal Sobel_1_U0_ap_idle : STD_LOGIC;
    signal Sobel_1_U0_ap_ready : STD_LOGIC;
    signal Sobel_1_U0_p_src_rows_V_read : STD_LOGIC;
    signal Sobel_1_U0_p_src_cols_V_read : STD_LOGIC;
    signal Sobel_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Sobel_1_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Sobel_1_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal gradient_decompositi_U0_ap_start : STD_LOGIC;
    signal gradient_decompositi_U0_ap_done : STD_LOGIC;
    signal gradient_decompositi_U0_ap_continue : STD_LOGIC;
    signal gradient_decompositi_U0_ap_idle : STD_LOGIC;
    signal gradient_decompositi_U0_ap_ready : STD_LOGIC;
    signal gradient_decompositi_U0_gx_rows_V_read : STD_LOGIC;
    signal gradient_decompositi_U0_gx_cols_V_read : STD_LOGIC;
    signal gradient_decompositi_U0_gx_data_stream_V_read : STD_LOGIC;
    signal gradient_decompositi_U0_gy_data_stream_V_read : STD_LOGIC;
    signal gradient_decompositi_U0_gd_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal gradient_decompositi_U0_gd_data_stream_V_write : STD_LOGIC;
    signal nonmax_suppression_U0_ap_start : STD_LOGIC;
    signal nonmax_suppression_U0_ap_done : STD_LOGIC;
    signal nonmax_suppression_U0_ap_continue : STD_LOGIC;
    signal nonmax_suppression_U0_ap_idle : STD_LOGIC;
    signal nonmax_suppression_U0_ap_ready : STD_LOGIC;
    signal nonmax_suppression_U0_gd_rows_V_read : STD_LOGIC;
    signal nonmax_suppression_U0_gd_cols_V_read : STD_LOGIC;
    signal nonmax_suppression_U0_gd_data_stream_V_read : STD_LOGIC;
    signal nonmax_suppression_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal nonmax_suppression_U0_dst_data_stream_V_write : STD_LOGIC;
    signal hysteresis_U0_ap_start : STD_LOGIC;
    signal hysteresis_U0_ap_done : STD_LOGIC;
    signal hysteresis_U0_ap_continue : STD_LOGIC;
    signal hysteresis_U0_ap_idle : STD_LOGIC;
    signal hysteresis_U0_ap_ready : STD_LOGIC;
    signal hysteresis_U0_src_rows_V_read : STD_LOGIC;
    signal hysteresis_U0_src_cols_V_read : STD_LOGIC;
    signal hysteresis_U0_src_data_stream_V_read : STD_LOGIC;
    signal hysteresis_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hysteresis_U0_dst_data_stream_V_write : STD_LOGIC;
    signal hysteresis_U0_threshold_low_read : STD_LOGIC;
    signal hysteresis_U0_threshold_high_read : STD_LOGIC;
    signal CvtColor_1_U0_ap_start : STD_LOGIC;
    signal CvtColor_1_U0_ap_done : STD_LOGIC;
    signal CvtColor_1_U0_ap_continue : STD_LOGIC;
    signal CvtColor_1_U0_ap_idle : STD_LOGIC;
    signal CvtColor_1_U0_ap_ready : STD_LOGIC;
    signal CvtColor_1_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_out_r_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_out_r_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_out_r_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_out_r_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_out_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_out_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_out_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal src_rows_V_c_full_n : STD_LOGIC;
    signal src_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_rows_V_c_empty_n : STD_LOGIC;
    signal src_cols_V_c_full_n : STD_LOGIC;
    signal src_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_cols_V_c_empty_n : STD_LOGIC;
    signal dst_rows_V_c_full_n : STD_LOGIC;
    signal dst_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_rows_V_c_empty_n : STD_LOGIC;
    signal dst_cols_V_c_full_n : STD_LOGIC;
    signal dst_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_cols_V_c_empty_n : STD_LOGIC;
    signal src_bw_rows_V_c_full_n : STD_LOGIC;
    signal src_bw_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_bw_rows_V_c_empty_n : STD_LOGIC;
    signal src_bw_cols_V_c_full_n : STD_LOGIC;
    signal src_bw_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_bw_cols_V_c_empty_n : STD_LOGIC;
    signal src1_rows_V_c_full_n : STD_LOGIC;
    signal src1_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src1_rows_V_c_empty_n : STD_LOGIC;
    signal src1_cols_V_c_full_n : STD_LOGIC;
    signal src1_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src1_cols_V_c_empty_n : STD_LOGIC;
    signal src2_rows_V_c_full_n : STD_LOGIC;
    signal src2_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src2_rows_V_c_empty_n : STD_LOGIC;
    signal src2_cols_V_c_full_n : STD_LOGIC;
    signal src2_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src2_cols_V_c_empty_n : STD_LOGIC;
    signal sobel_gx_rows_V_c_full_n : STD_LOGIC;
    signal sobel_gx_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_gx_rows_V_c_empty_n : STD_LOGIC;
    signal sobel_gx_cols_V_c_full_n : STD_LOGIC;
    signal sobel_gx_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_gx_cols_V_c_empty_n : STD_LOGIC;
    signal grad_gd_rows_V_c_full_n : STD_LOGIC;
    signal grad_gd_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grad_gd_rows_V_c_empty_n : STD_LOGIC;
    signal grad_gd_cols_V_c_full_n : STD_LOGIC;
    signal grad_gd_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grad_gd_cols_V_c_empty_n : STD_LOGIC;
    signal suppressed_rows_V_c_full_n : STD_LOGIC;
    signal suppressed_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal suppressed_rows_V_c_empty_n : STD_LOGIC;
    signal suppressed_cols_V_c_full_n : STD_LOGIC;
    signal suppressed_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal suppressed_cols_V_c_empty_n : STD_LOGIC;
    signal canny_edges_rows_V_c_full_n : STD_LOGIC;
    signal canny_edges_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal canny_edges_rows_V_c_empty_n : STD_LOGIC;
    signal canny_edges_cols_V_c_full_n : STD_LOGIC;
    signal canny_edges_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal canny_edges_cols_V_c_empty_n : STD_LOGIC;
    signal low_threshold_c_full_n : STD_LOGIC;
    signal low_threshold_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal low_threshold_c_empty_n : STD_LOGIC;
    signal high_threshold_c_full_n : STD_LOGIC;
    signal high_threshold_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal high_threshold_c_empty_n : STD_LOGIC;
    signal src_data_stream_0_V_full_n : STD_LOGIC;
    signal src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_0_V_empty_n : STD_LOGIC;
    signal src_data_stream_1_V_full_n : STD_LOGIC;
    signal src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_1_V_empty_n : STD_LOGIC;
    signal src_data_stream_2_V_full_n : STD_LOGIC;
    signal src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_2_V_empty_n : STD_LOGIC;
    signal src_rows_V_c43_full_n : STD_LOGIC;
    signal src_rows_V_c43_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_rows_V_c43_empty_n : STD_LOGIC;
    signal src_cols_V_c44_full_n : STD_LOGIC;
    signal src_cols_V_c44_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_cols_V_c44_empty_n : STD_LOGIC;
    signal src_bw_data_stream_0_full_n : STD_LOGIC;
    signal src_bw_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_bw_data_stream_0_empty_n : STD_LOGIC;
    signal src1_data_stream_0_s_full_n : STD_LOGIC;
    signal src1_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_0_s_empty_n : STD_LOGIC;
    signal src2_data_stream_0_s_full_n : STD_LOGIC;
    signal src2_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src2_data_stream_0_s_empty_n : STD_LOGIC;
    signal sobel_gx_data_stream_full_n : STD_LOGIC;
    signal sobel_gx_data_stream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal sobel_gx_data_stream_empty_n : STD_LOGIC;
    signal sobel_gy_data_stream_full_n : STD_LOGIC;
    signal sobel_gy_data_stream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal sobel_gy_data_stream_empty_n : STD_LOGIC;
    signal grad_gd_data_stream_s_full_n : STD_LOGIC;
    signal grad_gd_data_stream_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal grad_gd_data_stream_s_empty_n : STD_LOGIC;
    signal suppressed_data_stre_full_n : STD_LOGIC;
    signal suppressed_data_stre_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal suppressed_data_stre_empty_n : STD_LOGIC;
    signal canny_edges_data_str_full_n : STD_LOGIC;
    signal canny_edges_data_str_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edges_data_str_empty_n : STD_LOGIC;
    signal dst_data_stream_0_V_full_n : STD_LOGIC;
    signal dst_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_data_stream_0_V_empty_n : STD_LOGIC;
    signal dst_data_stream_1_V_full_n : STD_LOGIC;
    signal dst_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_data_stream_1_V_empty_n : STD_LOGIC;
    signal dst_data_stream_2_V_full_n : STD_LOGIC;
    signal dst_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_data_stream_2_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_Mat_exit421_pr_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit421_pr_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit421_pr_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_Sobel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_U0_full_n : STD_LOGIC;
    signal start_for_Sobel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_U0_empty_n : STD_LOGIC;
    signal start_for_Sobel_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1_U0_full_n : STD_LOGIC;
    signal start_for_Sobel_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_decompositi_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_decompositi_U0_full_n : STD_LOGIC;
    signal start_for_gradient_decompositi_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_decompositi_U0_empty_n : STD_LOGIC;
    signal start_for_nonmax_suppression_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_nonmax_suppression_U0_full_n : STD_LOGIC;
    signal start_for_nonmax_suppression_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_nonmax_suppression_U0_empty_n : STD_LOGIC;
    signal start_for_hysteresis_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hysteresis_U0_full_n : STD_LOGIC;
    signal start_for_hysteresis_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hysteresis_U0_empty_n : STD_LOGIC;
    signal start_for_CvtColor_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal start_for_CvtColor_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_empty_n : STD_LOGIC;
    signal CvtColor_U0_start_full_n : STD_LOGIC;
    signal CvtColor_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_start_full_n : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal Sobel_U0_start_full_n : STD_LOGIC;
    signal Sobel_U0_start_write : STD_LOGIC;
    signal Sobel_1_U0_start_full_n : STD_LOGIC;
    signal Sobel_1_U0_start_write : STD_LOGIC;
    signal gradient_decompositi_U0_start_full_n : STD_LOGIC;
    signal gradient_decompositi_U0_start_write : STD_LOGIC;
    signal nonmax_suppression_U0_start_full_n : STD_LOGIC;
    signal nonmax_suppression_U0_start_write : STD_LOGIC;
    signal hysteresis_U0_start_full_n : STD_LOGIC;
    signal hysteresis_U0_start_write : STD_LOGIC;
    signal CvtColor_1_U0_start_full_n : STD_LOGIC;
    signal CvtColor_1_U0_start_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit421_pr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        low_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        high_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_out_full_n : IN STD_LOGIC;
        src_rows_V_out_write : OUT STD_LOGIC;
        src_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_out_full_n : IN STD_LOGIC;
        src_cols_V_out_write : OUT STD_LOGIC;
        dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_rows_V_out_full_n : IN STD_LOGIC;
        dst_rows_V_out_write : OUT STD_LOGIC;
        dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_cols_V_out_full_n : IN STD_LOGIC;
        dst_cols_V_out_write : OUT STD_LOGIC;
        src_bw_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_bw_rows_V_out_full_n : IN STD_LOGIC;
        src_bw_rows_V_out_write : OUT STD_LOGIC;
        src_bw_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_bw_cols_V_out_full_n : IN STD_LOGIC;
        src_bw_cols_V_out_write : OUT STD_LOGIC;
        src1_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src1_rows_V_out_full_n : IN STD_LOGIC;
        src1_rows_V_out_write : OUT STD_LOGIC;
        src1_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src1_cols_V_out_full_n : IN STD_LOGIC;
        src1_cols_V_out_write : OUT STD_LOGIC;
        src2_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src2_rows_V_out_full_n : IN STD_LOGIC;
        src2_rows_V_out_write : OUT STD_LOGIC;
        src2_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src2_cols_V_out_full_n : IN STD_LOGIC;
        src2_cols_V_out_write : OUT STD_LOGIC;
        sobel_gx_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        sobel_gx_rows_V_out_full_n : IN STD_LOGIC;
        sobel_gx_rows_V_out_write : OUT STD_LOGIC;
        sobel_gx_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        sobel_gx_cols_V_out_full_n : IN STD_LOGIC;
        sobel_gx_cols_V_out_write : OUT STD_LOGIC;
        grad_gd_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        grad_gd_rows_V_out_full_n : IN STD_LOGIC;
        grad_gd_rows_V_out_write : OUT STD_LOGIC;
        grad_gd_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        grad_gd_cols_V_out_full_n : IN STD_LOGIC;
        grad_gd_cols_V_out_write : OUT STD_LOGIC;
        suppressed_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        suppressed_rows_V_out_full_n : IN STD_LOGIC;
        suppressed_rows_V_out_write : OUT STD_LOGIC;
        suppressed_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        suppressed_cols_V_out_full_n : IN STD_LOGIC;
        suppressed_cols_V_out_write : OUT STD_LOGIC;
        canny_edges_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        canny_edges_rows_V_out_full_n : IN STD_LOGIC;
        canny_edges_rows_V_out_write : OUT STD_LOGIC;
        canny_edges_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        canny_edges_cols_V_out_full_n : IN STD_LOGIC;
        canny_edges_cols_V_out_write : OUT STD_LOGIC;
        low_threshold_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        low_threshold_out_full_n : IN STD_LOGIC;
        low_threshold_out_write : OUT STD_LOGIC;
        high_threshold_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        high_threshold_out_full_n : IN STD_LOGIC;
        high_threshold_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Sobel_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component gradient_decompositi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gx_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gx_rows_V_empty_n : IN STD_LOGIC;
        gx_rows_V_read : OUT STD_LOGIC;
        gx_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gx_cols_V_empty_n : IN STD_LOGIC;
        gx_cols_V_read : OUT STD_LOGIC;
        gx_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        gx_data_stream_V_empty_n : IN STD_LOGIC;
        gx_data_stream_V_read : OUT STD_LOGIC;
        gy_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        gy_data_stream_V_empty_n : IN STD_LOGIC;
        gy_data_stream_V_read : OUT STD_LOGIC;
        gd_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        gd_data_stream_V_full_n : IN STD_LOGIC;
        gd_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component nonmax_suppression IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gd_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gd_rows_V_empty_n : IN STD_LOGIC;
        gd_rows_V_read : OUT STD_LOGIC;
        gd_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gd_cols_V_empty_n : IN STD_LOGIC;
        gd_cols_V_read : OUT STD_LOGIC;
        gd_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        gd_data_stream_V_empty_n : IN STD_LOGIC;
        gd_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component hysteresis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        threshold_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        threshold_low_empty_n : IN STD_LOGIC;
        threshold_low_read : OUT STD_LOGIC;
        threshold_high_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        threshold_high_empty_n : IN STD_LOGIC;
        threshold_high_read : OUT STD_LOGIC );
    end component;


    component CvtColor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d9_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Duplicasc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Sobel_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Sobel_1tde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gradienudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_nonmax_vdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hysterewdI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColoxdS IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIyd2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColozec IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component canny_edge_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        low_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        high_threshold : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    canny_edge_AXILiteS_s_axi_U : component canny_edge_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rows => rows,
        cols => cols,
        low_threshold => low_threshold,
        high_threshold => high_threshold);

    Block_Mat_exit421_pr_U0 : component Block_Mat_exit421_pr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit421_pr_U0_ap_start,
        start_full_n => Block_Mat_exit421_pr_U0_start_full_n,
        ap_done => Block_Mat_exit421_pr_U0_ap_done,
        ap_continue => Block_Mat_exit421_pr_U0_ap_continue,
        ap_idle => Block_Mat_exit421_pr_U0_ap_idle,
        ap_ready => Block_Mat_exit421_pr_U0_ap_ready,
        start_out => Block_Mat_exit421_pr_U0_start_out,
        start_write => Block_Mat_exit421_pr_U0_start_write,
        rows => rows,
        cols => cols,
        low_threshold => low_threshold,
        high_threshold => high_threshold,
        src_rows_V_out_din => Block_Mat_exit421_pr_U0_src_rows_V_out_din,
        src_rows_V_out_full_n => src_rows_V_c_full_n,
        src_rows_V_out_write => Block_Mat_exit421_pr_U0_src_rows_V_out_write,
        src_cols_V_out_din => Block_Mat_exit421_pr_U0_src_cols_V_out_din,
        src_cols_V_out_full_n => src_cols_V_c_full_n,
        src_cols_V_out_write => Block_Mat_exit421_pr_U0_src_cols_V_out_write,
        dst_rows_V_out_din => Block_Mat_exit421_pr_U0_dst_rows_V_out_din,
        dst_rows_V_out_full_n => dst_rows_V_c_full_n,
        dst_rows_V_out_write => Block_Mat_exit421_pr_U0_dst_rows_V_out_write,
        dst_cols_V_out_din => Block_Mat_exit421_pr_U0_dst_cols_V_out_din,
        dst_cols_V_out_full_n => dst_cols_V_c_full_n,
        dst_cols_V_out_write => Block_Mat_exit421_pr_U0_dst_cols_V_out_write,
        src_bw_rows_V_out_din => Block_Mat_exit421_pr_U0_src_bw_rows_V_out_din,
        src_bw_rows_V_out_full_n => src_bw_rows_V_c_full_n,
        src_bw_rows_V_out_write => Block_Mat_exit421_pr_U0_src_bw_rows_V_out_write,
        src_bw_cols_V_out_din => Block_Mat_exit421_pr_U0_src_bw_cols_V_out_din,
        src_bw_cols_V_out_full_n => src_bw_cols_V_c_full_n,
        src_bw_cols_V_out_write => Block_Mat_exit421_pr_U0_src_bw_cols_V_out_write,
        src1_rows_V_out_din => Block_Mat_exit421_pr_U0_src1_rows_V_out_din,
        src1_rows_V_out_full_n => src1_rows_V_c_full_n,
        src1_rows_V_out_write => Block_Mat_exit421_pr_U0_src1_rows_V_out_write,
        src1_cols_V_out_din => Block_Mat_exit421_pr_U0_src1_cols_V_out_din,
        src1_cols_V_out_full_n => src1_cols_V_c_full_n,
        src1_cols_V_out_write => Block_Mat_exit421_pr_U0_src1_cols_V_out_write,
        src2_rows_V_out_din => Block_Mat_exit421_pr_U0_src2_rows_V_out_din,
        src2_rows_V_out_full_n => src2_rows_V_c_full_n,
        src2_rows_V_out_write => Block_Mat_exit421_pr_U0_src2_rows_V_out_write,
        src2_cols_V_out_din => Block_Mat_exit421_pr_U0_src2_cols_V_out_din,
        src2_cols_V_out_full_n => src2_cols_V_c_full_n,
        src2_cols_V_out_write => Block_Mat_exit421_pr_U0_src2_cols_V_out_write,
        sobel_gx_rows_V_out_din => Block_Mat_exit421_pr_U0_sobel_gx_rows_V_out_din,
        sobel_gx_rows_V_out_full_n => sobel_gx_rows_V_c_full_n,
        sobel_gx_rows_V_out_write => Block_Mat_exit421_pr_U0_sobel_gx_rows_V_out_write,
        sobel_gx_cols_V_out_din => Block_Mat_exit421_pr_U0_sobel_gx_cols_V_out_din,
        sobel_gx_cols_V_out_full_n => sobel_gx_cols_V_c_full_n,
        sobel_gx_cols_V_out_write => Block_Mat_exit421_pr_U0_sobel_gx_cols_V_out_write,
        grad_gd_rows_V_out_din => Block_Mat_exit421_pr_U0_grad_gd_rows_V_out_din,
        grad_gd_rows_V_out_full_n => grad_gd_rows_V_c_full_n,
        grad_gd_rows_V_out_write => Block_Mat_exit421_pr_U0_grad_gd_rows_V_out_write,
        grad_gd_cols_V_out_din => Block_Mat_exit421_pr_U0_grad_gd_cols_V_out_din,
        grad_gd_cols_V_out_full_n => grad_gd_cols_V_c_full_n,
        grad_gd_cols_V_out_write => Block_Mat_exit421_pr_U0_grad_gd_cols_V_out_write,
        suppressed_rows_V_out_din => Block_Mat_exit421_pr_U0_suppressed_rows_V_out_din,
        suppressed_rows_V_out_full_n => suppressed_rows_V_c_full_n,
        suppressed_rows_V_out_write => Block_Mat_exit421_pr_U0_suppressed_rows_V_out_write,
        suppressed_cols_V_out_din => Block_Mat_exit421_pr_U0_suppressed_cols_V_out_din,
        suppressed_cols_V_out_full_n => suppressed_cols_V_c_full_n,
        suppressed_cols_V_out_write => Block_Mat_exit421_pr_U0_suppressed_cols_V_out_write,
        canny_edges_rows_V_out_din => Block_Mat_exit421_pr_U0_canny_edges_rows_V_out_din,
        canny_edges_rows_V_out_full_n => canny_edges_rows_V_c_full_n,
        canny_edges_rows_V_out_write => Block_Mat_exit421_pr_U0_canny_edges_rows_V_out_write,
        canny_edges_cols_V_out_din => Block_Mat_exit421_pr_U0_canny_edges_cols_V_out_din,
        canny_edges_cols_V_out_full_n => canny_edges_cols_V_c_full_n,
        canny_edges_cols_V_out_write => Block_Mat_exit421_pr_U0_canny_edges_cols_V_out_write,
        low_threshold_out_din => Block_Mat_exit421_pr_U0_low_threshold_out_din,
        low_threshold_out_full_n => low_threshold_c_full_n,
        low_threshold_out_write => Block_Mat_exit421_pr_U0_low_threshold_out_write,
        high_threshold_out_din => Block_Mat_exit421_pr_U0_high_threshold_out_din,
        high_threshold_out_full_n => high_threshold_c_full_n,
        high_threshold_out_write => Block_Mat_exit421_pr_U0_high_threshold_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_CvtColor_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        in_r_TDATA => in_r_TDATA,
        in_r_TVALID => in_r_TVALID,
        in_r_TREADY => AXIvideo2Mat_U0_in_r_TREADY,
        in_r_TKEEP => in_r_TKEEP,
        in_r_TSTRB => in_r_TSTRB,
        in_r_TUSER => in_r_TUSER,
        in_r_TLAST => in_r_TLAST,
        in_r_TID => in_r_TID,
        in_r_TDEST => in_r_TDEST,
        img_rows_V_dout => src_rows_V_c_dout,
        img_rows_V_empty_n => src_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => src_cols_V_c_dout,
        img_cols_V_empty_n => src_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => src_data_stream_0_V_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => src_data_stream_1_V_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => src_data_stream_2_V_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => src_rows_V_c43_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => src_cols_V_c44_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    CvtColor_U0 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_U0_ap_start,
        ap_done => CvtColor_U0_ap_done,
        ap_continue => CvtColor_U0_ap_continue,
        ap_idle => CvtColor_U0_ap_idle,
        ap_ready => CvtColor_U0_ap_ready,
        p_src_rows_V_dout => src_rows_V_c43_dout,
        p_src_rows_V_empty_n => src_rows_V_c43_empty_n,
        p_src_rows_V_read => CvtColor_U0_p_src_rows_V_read,
        p_src_cols_V_dout => src_cols_V_c44_dout,
        p_src_cols_V_empty_n => src_cols_V_c44_empty_n,
        p_src_cols_V_read => CvtColor_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_V_din => CvtColor_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => src_bw_data_stream_0_full_n,
        p_dst_data_stream_V_write => CvtColor_U0_p_dst_data_stream_V_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate_U0_ap_start,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        src_rows_V_dout => src_bw_rows_V_c_dout,
        src_rows_V_empty_n => src_bw_rows_V_c_empty_n,
        src_rows_V_read => Duplicate_U0_src_rows_V_read,
        src_cols_V_dout => src_bw_cols_V_c_dout,
        src_cols_V_empty_n => src_bw_cols_V_c_empty_n,
        src_cols_V_read => Duplicate_U0_src_cols_V_read,
        src_data_stream_V_dout => src_bw_data_stream_0_dout,
        src_data_stream_V_empty_n => src_bw_data_stream_0_empty_n,
        src_data_stream_V_read => Duplicate_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => src1_data_stream_0_s_full_n,
        dst1_data_stream_V_write => Duplicate_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => src2_data_stream_0_s_full_n,
        dst2_data_stream_V_write => Duplicate_U0_dst2_data_stream_V_write);

    Sobel_U0 : component Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Sobel_U0_ap_start,
        ap_done => Sobel_U0_ap_done,
        ap_continue => Sobel_U0_ap_continue,
        ap_idle => Sobel_U0_ap_idle,
        ap_ready => Sobel_U0_ap_ready,
        p_src_rows_V_dout => src1_rows_V_c_dout,
        p_src_rows_V_empty_n => src1_rows_V_c_empty_n,
        p_src_rows_V_read => Sobel_U0_p_src_rows_V_read,
        p_src_cols_V_dout => src1_cols_V_c_dout,
        p_src_cols_V_empty_n => src1_cols_V_c_empty_n,
        p_src_cols_V_read => Sobel_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => src1_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => src1_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => Sobel_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Sobel_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => sobel_gx_data_stream_full_n,
        p_dst_data_stream_V_write => Sobel_U0_p_dst_data_stream_V_write);

    Sobel_1_U0 : component Sobel_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Sobel_1_U0_ap_start,
        ap_done => Sobel_1_U0_ap_done,
        ap_continue => Sobel_1_U0_ap_continue,
        ap_idle => Sobel_1_U0_ap_idle,
        ap_ready => Sobel_1_U0_ap_ready,
        p_src_rows_V_dout => src2_rows_V_c_dout,
        p_src_rows_V_empty_n => src2_rows_V_c_empty_n,
        p_src_rows_V_read => Sobel_1_U0_p_src_rows_V_read,
        p_src_cols_V_dout => src2_cols_V_c_dout,
        p_src_cols_V_empty_n => src2_cols_V_c_empty_n,
        p_src_cols_V_read => Sobel_1_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => src2_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => src2_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => Sobel_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Sobel_1_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => sobel_gy_data_stream_full_n,
        p_dst_data_stream_V_write => Sobel_1_U0_p_dst_data_stream_V_write);

    gradient_decompositi_U0 : component gradient_decompositi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_decompositi_U0_ap_start,
        ap_done => gradient_decompositi_U0_ap_done,
        ap_continue => gradient_decompositi_U0_ap_continue,
        ap_idle => gradient_decompositi_U0_ap_idle,
        ap_ready => gradient_decompositi_U0_ap_ready,
        gx_rows_V_dout => sobel_gx_rows_V_c_dout,
        gx_rows_V_empty_n => sobel_gx_rows_V_c_empty_n,
        gx_rows_V_read => gradient_decompositi_U0_gx_rows_V_read,
        gx_cols_V_dout => sobel_gx_cols_V_c_dout,
        gx_cols_V_empty_n => sobel_gx_cols_V_c_empty_n,
        gx_cols_V_read => gradient_decompositi_U0_gx_cols_V_read,
        gx_data_stream_V_dout => sobel_gx_data_stream_dout,
        gx_data_stream_V_empty_n => sobel_gx_data_stream_empty_n,
        gx_data_stream_V_read => gradient_decompositi_U0_gx_data_stream_V_read,
        gy_data_stream_V_dout => sobel_gy_data_stream_dout,
        gy_data_stream_V_empty_n => sobel_gy_data_stream_empty_n,
        gy_data_stream_V_read => gradient_decompositi_U0_gy_data_stream_V_read,
        gd_data_stream_V_din => gradient_decompositi_U0_gd_data_stream_V_din,
        gd_data_stream_V_full_n => grad_gd_data_stream_s_full_n,
        gd_data_stream_V_write => gradient_decompositi_U0_gd_data_stream_V_write);

    nonmax_suppression_U0 : component nonmax_suppression
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => nonmax_suppression_U0_ap_start,
        ap_done => nonmax_suppression_U0_ap_done,
        ap_continue => nonmax_suppression_U0_ap_continue,
        ap_idle => nonmax_suppression_U0_ap_idle,
        ap_ready => nonmax_suppression_U0_ap_ready,
        gd_rows_V_dout => grad_gd_rows_V_c_dout,
        gd_rows_V_empty_n => grad_gd_rows_V_c_empty_n,
        gd_rows_V_read => nonmax_suppression_U0_gd_rows_V_read,
        gd_cols_V_dout => grad_gd_cols_V_c_dout,
        gd_cols_V_empty_n => grad_gd_cols_V_c_empty_n,
        gd_cols_V_read => nonmax_suppression_U0_gd_cols_V_read,
        gd_data_stream_V_dout => grad_gd_data_stream_s_dout,
        gd_data_stream_V_empty_n => grad_gd_data_stream_s_empty_n,
        gd_data_stream_V_read => nonmax_suppression_U0_gd_data_stream_V_read,
        dst_data_stream_V_din => nonmax_suppression_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => suppressed_data_stre_full_n,
        dst_data_stream_V_write => nonmax_suppression_U0_dst_data_stream_V_write);

    hysteresis_U0 : component hysteresis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hysteresis_U0_ap_start,
        ap_done => hysteresis_U0_ap_done,
        ap_continue => hysteresis_U0_ap_continue,
        ap_idle => hysteresis_U0_ap_idle,
        ap_ready => hysteresis_U0_ap_ready,
        src_rows_V_dout => suppressed_rows_V_c_dout,
        src_rows_V_empty_n => suppressed_rows_V_c_empty_n,
        src_rows_V_read => hysteresis_U0_src_rows_V_read,
        src_cols_V_dout => suppressed_cols_V_c_dout,
        src_cols_V_empty_n => suppressed_cols_V_c_empty_n,
        src_cols_V_read => hysteresis_U0_src_cols_V_read,
        src_data_stream_V_dout => suppressed_data_stre_dout,
        src_data_stream_V_empty_n => suppressed_data_stre_empty_n,
        src_data_stream_V_read => hysteresis_U0_src_data_stream_V_read,
        dst_data_stream_V_din => hysteresis_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => canny_edges_data_str_full_n,
        dst_data_stream_V_write => hysteresis_U0_dst_data_stream_V_write,
        threshold_low_dout => low_threshold_c_dout,
        threshold_low_empty_n => low_threshold_c_empty_n,
        threshold_low_read => hysteresis_U0_threshold_low_read,
        threshold_high_dout => high_threshold_c_dout,
        threshold_high_empty_n => high_threshold_c_empty_n,
        threshold_high_read => hysteresis_U0_threshold_high_read);

    CvtColor_1_U0 : component CvtColor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_1_U0_ap_start,
        ap_done => CvtColor_1_U0_ap_done,
        ap_continue => CvtColor_1_U0_ap_continue,
        ap_idle => CvtColor_1_U0_ap_idle,
        ap_ready => CvtColor_1_U0_ap_ready,
        p_src_rows_V_dout => canny_edges_rows_V_c_dout,
        p_src_rows_V_empty_n => canny_edges_rows_V_c_empty_n,
        p_src_rows_V_read => CvtColor_1_U0_p_src_rows_V_read,
        p_src_cols_V_dout => canny_edges_cols_V_c_dout,
        p_src_cols_V_empty_n => canny_edges_cols_V_c_empty_n,
        p_src_cols_V_read => CvtColor_1_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => canny_edges_data_str_dout,
        p_src_data_stream_V_empty_n => canny_edges_data_str_empty_n,
        p_src_data_stream_V_read => CvtColor_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_0_V_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write => CvtColor_1_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V_dout => dst_rows_V_c_dout,
        img_rows_V_empty_n => dst_rows_V_c_empty_n,
        img_rows_V_read => Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_dout => dst_cols_V_c_dout,
        img_cols_V_empty_n => dst_cols_V_c_empty_n,
        img_cols_V_read => Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_0_V_dout => dst_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => dst_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => dst_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => dst_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => dst_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => dst_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        out_r_TDATA => Mat2AXIvideo_U0_out_r_TDATA,
        out_r_TVALID => Mat2AXIvideo_U0_out_r_TVALID,
        out_r_TREADY => out_r_TREADY,
        out_r_TKEEP => Mat2AXIvideo_U0_out_r_TKEEP,
        out_r_TSTRB => Mat2AXIvideo_U0_out_r_TSTRB,
        out_r_TUSER => Mat2AXIvideo_U0_out_r_TUSER,
        out_r_TLAST => Mat2AXIvideo_U0_out_r_TLAST,
        out_r_TID => Mat2AXIvideo_U0_out_r_TID,
        out_r_TDEST => Mat2AXIvideo_U0_out_r_TDEST);

    src_rows_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src_rows_V_out_din,
        if_full_n => src_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src_rows_V_out_write,
        if_dout => src_rows_V_c_dout,
        if_empty_n => src_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    src_cols_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src_cols_V_out_din,
        if_full_n => src_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src_cols_V_out_write,
        if_dout => src_cols_V_c_dout,
        if_empty_n => src_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    dst_rows_V_c_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_dst_rows_V_out_din,
        if_full_n => dst_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_dst_rows_V_out_write,
        if_dout => dst_rows_V_c_dout,
        if_empty_n => dst_rows_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_rows_V_read);

    dst_cols_V_c_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_dst_cols_V_out_din,
        if_full_n => dst_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_dst_cols_V_out_write,
        if_dout => dst_cols_V_c_dout,
        if_empty_n => dst_cols_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_cols_V_read);

    src_bw_rows_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src_bw_rows_V_out_din,
        if_full_n => src_bw_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src_bw_rows_V_out_write,
        if_dout => src_bw_rows_V_c_dout,
        if_empty_n => src_bw_rows_V_c_empty_n,
        if_read => Duplicate_U0_src_rows_V_read);

    src_bw_cols_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src_bw_cols_V_out_din,
        if_full_n => src_bw_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src_bw_cols_V_out_write,
        if_dout => src_bw_cols_V_c_dout,
        if_empty_n => src_bw_cols_V_c_empty_n,
        if_read => Duplicate_U0_src_cols_V_read);

    src1_rows_V_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src1_rows_V_out_din,
        if_full_n => src1_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src1_rows_V_out_write,
        if_dout => src1_rows_V_c_dout,
        if_empty_n => src1_rows_V_c_empty_n,
        if_read => Sobel_U0_p_src_rows_V_read);

    src1_cols_V_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src1_cols_V_out_din,
        if_full_n => src1_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src1_cols_V_out_write,
        if_dout => src1_cols_V_c_dout,
        if_empty_n => src1_cols_V_c_empty_n,
        if_read => Sobel_U0_p_src_cols_V_read);

    src2_rows_V_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src2_rows_V_out_din,
        if_full_n => src2_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src2_rows_V_out_write,
        if_dout => src2_rows_V_c_dout,
        if_empty_n => src2_rows_V_c_empty_n,
        if_read => Sobel_1_U0_p_src_rows_V_read);

    src2_cols_V_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_src2_cols_V_out_din,
        if_full_n => src2_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_src2_cols_V_out_write,
        if_dout => src2_cols_V_c_dout,
        if_empty_n => src2_cols_V_c_empty_n,
        if_read => Sobel_1_U0_p_src_cols_V_read);

    sobel_gx_rows_V_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_sobel_gx_rows_V_out_din,
        if_full_n => sobel_gx_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_sobel_gx_rows_V_out_write,
        if_dout => sobel_gx_rows_V_c_dout,
        if_empty_n => sobel_gx_rows_V_c_empty_n,
        if_read => gradient_decompositi_U0_gx_rows_V_read);

    sobel_gx_cols_V_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_sobel_gx_cols_V_out_din,
        if_full_n => sobel_gx_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_sobel_gx_cols_V_out_write,
        if_dout => sobel_gx_cols_V_c_dout,
        if_empty_n => sobel_gx_cols_V_c_empty_n,
        if_read => gradient_decompositi_U0_gx_cols_V_read);

    grad_gd_rows_V_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_grad_gd_rows_V_out_din,
        if_full_n => grad_gd_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_grad_gd_rows_V_out_write,
        if_dout => grad_gd_rows_V_c_dout,
        if_empty_n => grad_gd_rows_V_c_empty_n,
        if_read => nonmax_suppression_U0_gd_rows_V_read);

    grad_gd_cols_V_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_grad_gd_cols_V_out_din,
        if_full_n => grad_gd_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_grad_gd_cols_V_out_write,
        if_dout => grad_gd_cols_V_c_dout,
        if_empty_n => grad_gd_cols_V_c_empty_n,
        if_read => nonmax_suppression_U0_gd_cols_V_read);

    suppressed_rows_V_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_suppressed_rows_V_out_din,
        if_full_n => suppressed_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_suppressed_rows_V_out_write,
        if_dout => suppressed_rows_V_c_dout,
        if_empty_n => suppressed_rows_V_c_empty_n,
        if_read => hysteresis_U0_src_rows_V_read);

    suppressed_cols_V_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_suppressed_cols_V_out_din,
        if_full_n => suppressed_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_suppressed_cols_V_out_write,
        if_dout => suppressed_cols_V_c_dout,
        if_empty_n => suppressed_cols_V_c_empty_n,
        if_read => hysteresis_U0_src_cols_V_read);

    canny_edges_rows_V_c_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_canny_edges_rows_V_out_din,
        if_full_n => canny_edges_rows_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_canny_edges_rows_V_out_write,
        if_dout => canny_edges_rows_V_c_dout,
        if_empty_n => canny_edges_rows_V_c_empty_n,
        if_read => CvtColor_1_U0_p_src_rows_V_read);

    canny_edges_cols_V_c_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_canny_edges_cols_V_out_din,
        if_full_n => canny_edges_cols_V_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_canny_edges_cols_V_out_write,
        if_dout => canny_edges_cols_V_c_dout,
        if_empty_n => canny_edges_cols_V_c_empty_n,
        if_read => CvtColor_1_U0_p_src_cols_V_read);

    low_threshold_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_low_threshold_out_din,
        if_full_n => low_threshold_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_low_threshold_out_write,
        if_dout => low_threshold_c_dout,
        if_empty_n => low_threshold_c_empty_n,
        if_read => hysteresis_U0_threshold_low_read);

    high_threshold_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit421_pr_U0_high_threshold_out_din,
        if_full_n => high_threshold_c_full_n,
        if_write => Block_Mat_exit421_pr_U0_high_threshold_out_write,
        if_dout => high_threshold_c_dout,
        if_empty_n => high_threshold_c_empty_n,
        if_read => hysteresis_U0_threshold_high_read);

    src_data_stream_0_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => src_data_stream_0_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => src_data_stream_0_V_dout,
        if_empty_n => src_data_stream_0_V_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_0_V_read);

    src_data_stream_1_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => src_data_stream_1_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => src_data_stream_1_V_dout,
        if_empty_n => src_data_stream_1_V_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_1_V_read);

    src_data_stream_2_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => src_data_stream_2_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => src_data_stream_2_V_dout,
        if_empty_n => src_data_stream_2_V_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_2_V_read);

    src_rows_V_c43_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => src_rows_V_c43_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => src_rows_V_c43_dout,
        if_empty_n => src_rows_V_c43_empty_n,
        if_read => CvtColor_U0_p_src_rows_V_read);

    src_cols_V_c44_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => src_cols_V_c44_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => src_cols_V_c44_dout,
        if_empty_n => src_cols_V_c44_empty_n,
        if_read => CvtColor_U0_p_src_cols_V_read);

    src_bw_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_V_din,
        if_full_n => src_bw_data_stream_0_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_V_write,
        if_dout => src_bw_data_stream_0_dout,
        if_empty_n => src_bw_data_stream_0_empty_n,
        if_read => Duplicate_U0_src_data_stream_V_read);

    src1_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_V_din,
        if_full_n => src1_data_stream_0_s_full_n,
        if_write => Duplicate_U0_dst1_data_stream_V_write,
        if_dout => src1_data_stream_0_s_dout,
        if_empty_n => src1_data_stream_0_s_empty_n,
        if_read => Sobel_U0_p_src_data_stream_V_read);

    src2_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_V_din,
        if_full_n => src2_data_stream_0_s_full_n,
        if_write => Duplicate_U0_dst2_data_stream_V_write,
        if_dout => src2_data_stream_0_s_dout,
        if_empty_n => src2_data_stream_0_s_empty_n,
        if_read => Sobel_1_U0_p_src_data_stream_V_read);

    sobel_gx_data_stream_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_U0_p_dst_data_stream_V_din,
        if_full_n => sobel_gx_data_stream_full_n,
        if_write => Sobel_U0_p_dst_data_stream_V_write,
        if_dout => sobel_gx_data_stream_dout,
        if_empty_n => sobel_gx_data_stream_empty_n,
        if_read => gradient_decompositi_U0_gx_data_stream_V_read);

    sobel_gy_data_stream_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_1_U0_p_dst_data_stream_V_din,
        if_full_n => sobel_gy_data_stream_full_n,
        if_write => Sobel_1_U0_p_dst_data_stream_V_write,
        if_dout => sobel_gy_data_stream_dout,
        if_empty_n => sobel_gy_data_stream_empty_n,
        if_read => gradient_decompositi_U0_gy_data_stream_V_read);

    grad_gd_data_stream_s_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_decompositi_U0_gd_data_stream_V_din,
        if_full_n => grad_gd_data_stream_s_full_n,
        if_write => gradient_decompositi_U0_gd_data_stream_V_write,
        if_dout => grad_gd_data_stream_s_dout,
        if_empty_n => grad_gd_data_stream_s_empty_n,
        if_read => nonmax_suppression_U0_gd_data_stream_V_read);

    suppressed_data_stre_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => nonmax_suppression_U0_dst_data_stream_V_din,
        if_full_n => suppressed_data_stre_full_n,
        if_write => nonmax_suppression_U0_dst_data_stream_V_write,
        if_dout => suppressed_data_stre_dout,
        if_empty_n => suppressed_data_stre_empty_n,
        if_read => hysteresis_U0_src_data_stream_V_read);

    canny_edges_data_str_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hysteresis_U0_dst_data_stream_V_din,
        if_full_n => canny_edges_data_str_full_n,
        if_write => hysteresis_U0_dst_data_stream_V_write,
        if_dout => canny_edges_data_str_dout,
        if_empty_n => canny_edges_data_str_empty_n,
        if_read => CvtColor_1_U0_p_src_data_stream_V_read);

    dst_data_stream_0_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        if_full_n => dst_data_stream_0_V_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        if_dout => dst_data_stream_0_V_dout,
        if_empty_n => dst_data_stream_0_V_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    dst_data_stream_1_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        if_full_n => dst_data_stream_1_V_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        if_dout => dst_data_stream_1_V_dout,
        if_empty_n => dst_data_stream_1_V_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    dst_data_stream_2_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        if_full_n => dst_data_stream_2_V_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_2_V_write,
        if_dout => dst_data_stream_2_V_dout,
        if_empty_n => dst_data_stream_2_V_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_Duplicasc4_U : component start_for_Duplicasc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_Sobel_U0_U : component start_for_Sobel_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Sobel_U0_din,
        if_full_n => start_for_Sobel_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_Sobel_U0_dout,
        if_empty_n => start_for_Sobel_U0_empty_n,
        if_read => Sobel_U0_ap_ready);

    start_for_Sobel_1tde_U : component start_for_Sobel_1tde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Sobel_1_U0_din,
        if_full_n => start_for_Sobel_1_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_Sobel_1_U0_dout,
        if_empty_n => start_for_Sobel_1_U0_empty_n,
        if_read => Sobel_1_U0_ap_ready);

    start_for_gradienudo_U : component start_for_gradienudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_decompositi_U0_din,
        if_full_n => start_for_gradient_decompositi_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_gradient_decompositi_U0_dout,
        if_empty_n => start_for_gradient_decompositi_U0_empty_n,
        if_read => gradient_decompositi_U0_ap_ready);

    start_for_nonmax_vdy_U : component start_for_nonmax_vdy
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_nonmax_suppression_U0_din,
        if_full_n => start_for_nonmax_suppression_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_nonmax_suppression_U0_dout,
        if_empty_n => start_for_nonmax_suppression_U0_empty_n,
        if_read => nonmax_suppression_U0_ap_ready);

    start_for_hysterewdI_U : component start_for_hysterewdI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hysteresis_U0_din,
        if_full_n => start_for_hysteresis_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_hysteresis_U0_dout,
        if_empty_n => start_for_hysteresis_U0_empty_n,
        if_read => hysteresis_U0_ap_ready);

    start_for_CvtColoxdS_U : component start_for_CvtColoxdS
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_1_U0_din,
        if_full_n => start_for_CvtColor_1_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_CvtColor_1_U0_dout,
        if_empty_n => start_for_CvtColor_1_U0_empty_n,
        if_read => CvtColor_1_U0_ap_ready);

    start_for_Mat2AXIyd2_U : component start_for_Mat2AXIyd2
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Block_Mat_exit421_pr_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);

    start_for_CvtColozec_U : component start_for_CvtColozec
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_U0_din,
        if_full_n => start_for_CvtColor_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_CvtColor_U0_dout,
        if_empty_n => start_for_CvtColor_U0_empty_n,
        if_read => CvtColor_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_Mat_exit421_pr_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit421_pr_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit421_pr_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit421_pr_U0_ap_ready <= ap_sync_Block_Mat_exit421_pr_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_Mat_exit421_pr_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit421_pr_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit421_pr_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit421_pr_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_Mat_exit421_pr_U0_ap_ready))) then 
                Block_Mat_exit421_pr_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit421_pr_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit421_pr_U0_ap_continue <= ap_const_logic_1;
    Block_Mat_exit421_pr_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit421_pr_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit421_pr_U0_start_full_n <= (start_for_nonmax_suppression_U0_full_n and start_for_hysteresis_U0_full_n and start_for_gradient_decompositi_U0_full_n and start_for_Sobel_U0_full_n and start_for_Sobel_1_U0_full_n and start_for_Mat2AXIvideo_U0_full_n and start_for_Duplicate_U0_full_n and start_for_CvtColor_1_U0_full_n);
    CvtColor_1_U0_ap_continue <= ap_const_logic_1;
    CvtColor_1_U0_ap_start <= start_for_CvtColor_1_U0_empty_n;
    CvtColor_1_U0_start_full_n <= ap_const_logic_1;
    CvtColor_1_U0_start_write <= ap_const_logic_0;
    CvtColor_U0_ap_continue <= ap_const_logic_1;
    CvtColor_U0_ap_start <= start_for_CvtColor_U0_empty_n;
    CvtColor_U0_start_full_n <= ap_const_logic_1;
    CvtColor_U0_start_write <= ap_const_logic_0;
    Duplicate_U0_ap_continue <= ap_const_logic_1;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Duplicate_U0_start_full_n <= ap_const_logic_1;
    Duplicate_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    Sobel_1_U0_ap_continue <= ap_const_logic_1;
    Sobel_1_U0_ap_start <= start_for_Sobel_1_U0_empty_n;
    Sobel_1_U0_start_full_n <= ap_const_logic_1;
    Sobel_1_U0_start_write <= ap_const_logic_0;
    Sobel_U0_ap_continue <= ap_const_logic_1;
    Sobel_U0_ap_start <= start_for_Sobel_U0_empty_n;
    Sobel_U0_start_full_n <= ap_const_logic_1;
    Sobel_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (nonmax_suppression_U0_ap_idle and hysteresis_U0_ap_idle and gradient_decompositi_U0_ap_idle and Sobel_U0_ap_idle and Sobel_1_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Duplicate_U0_ap_idle and CvtColor_U0_ap_idle and CvtColor_1_U0_ap_idle and Block_Mat_exit421_pr_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_Block_Mat_exit421_pr_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit421_pr_U0_ap_ready or Block_Mat_exit421_pr_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= (ap_sync_Block_Mat_exit421_pr_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    gradient_decompositi_U0_ap_continue <= ap_const_logic_1;
    gradient_decompositi_U0_ap_start <= start_for_gradient_decompositi_U0_empty_n;
    gradient_decompositi_U0_start_full_n <= ap_const_logic_1;
    gradient_decompositi_U0_start_write <= ap_const_logic_0;
    hysteresis_U0_ap_continue <= ap_const_logic_1;
    hysteresis_U0_ap_start <= start_for_hysteresis_U0_empty_n;
    hysteresis_U0_start_full_n <= ap_const_logic_1;
    hysteresis_U0_start_write <= ap_const_logic_0;
    in_r_TREADY <= AXIvideo2Mat_U0_in_r_TREADY;
    nonmax_suppression_U0_ap_continue <= ap_const_logic_1;
    nonmax_suppression_U0_ap_start <= start_for_nonmax_suppression_U0_empty_n;
    nonmax_suppression_U0_start_full_n <= ap_const_logic_1;
    nonmax_suppression_U0_start_write <= ap_const_logic_0;
    out_r_TDATA <= Mat2AXIvideo_U0_out_r_TDATA;
    out_r_TDEST <= Mat2AXIvideo_U0_out_r_TDEST;
    out_r_TID <= Mat2AXIvideo_U0_out_r_TID;
    out_r_TKEEP <= Mat2AXIvideo_U0_out_r_TKEEP;
    out_r_TLAST <= Mat2AXIvideo_U0_out_r_TLAST;
    out_r_TSTRB <= Mat2AXIvideo_U0_out_r_TSTRB;
    out_r_TUSER <= Mat2AXIvideo_U0_out_r_TUSER;
    out_r_TVALID <= Mat2AXIvideo_U0_out_r_TVALID;
    start_for_CvtColor_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_CvtColor_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Sobel_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Sobel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_decompositi_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hysteresis_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_nonmax_suppression_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
