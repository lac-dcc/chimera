-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity minus_vector_averibs_rom is 
    generic(
             DWIDTH     : integer := 1; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 784
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of minus_vector_averibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 16=> "0", 17 to 18=> "1", 19 to 42=> "0", 43 to 49=> "1", 50 to 68=> "0", 69 to 77=> "1", 78 to 94=> "0", 
    95 to 103=> "1", 104 to 121=> "0", 122 to 129=> "1", 130 to 147=> "0", 148 to 156=> "1", 157 to 174=> "0", 175 to 182=> "1", 
    183 to 201=> "0", 202 to 208=> "1", 209 to 228=> "0", 229 to 235=> "1", 236 to 255=> "0", 256 to 262=> "1", 263 to 282=> "0", 
    283 to 289=> "1", 290 to 309=> "0", 310 to 316=> "1", 317 to 337=> "0", 338 to 344=> "1", 345 to 364=> "0", 365 to 384=> "1", 
    385 to 392=> "0", 393 to 414=> "1", 415 to 419=> "0", 420 to 444=> "1", 445 to 447=> "0", 448 to 456=> "1", 457 to 465=> "0", 
    466 to 473=> "1", 474 to 475=> "0", 476 to 482=> "1", 483 to 495=> "0", 496 to 502=> "1", 503 => "0", 504 to 509=> "1", 
    510 to 524=> "0", 525 to 530=> "1", 531 => "0", 532 to 537=> "1", 538 to 552=> "0", 553 to 565=> "1", 566 to 581=> "0", 
    582 to 593=> "1", 594 to 608=> "0", 609 to 622=> "1", 623 to 636=> "0", 637 to 642=> "1", 643 to 644=> "0", 645 to 651=> "1", 
    652 to 662=> "0", 663 to 670=> "1", 671 to 673=> "0", 674 to 682=> "1", 683 to 688=> "0", 689 to 697=> "1", 698 to 702=> "0", 
    703 to 724=> "1", 725 to 732=> "0", 733 to 750=> "1", 751 to 764=> "0", 765 to 774=> "1", 775 to 783=> "0" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity minus_vector_averibs is
    generic (
        DataWidth : INTEGER := 1;
        AddressRange : INTEGER := 784;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of minus_vector_averibs is
    component minus_vector_averibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    minus_vector_averibs_rom_U :  component minus_vector_averibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


