-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reorder_hls is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_we0 : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    bound_x_min : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_x_max : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_y_min : IN STD_LOGIC_VECTOR (15 downto 0);
    bound_y_max : IN STD_LOGIC_VECTOR (15 downto 0);
    rows : OUT STD_LOGIC_VECTOR (15 downto 0);
    cols : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound_y_min_ap_vld : IN STD_LOGIC;
    bound_y_max_ap_vld : IN STD_LOGIC;
    rows_ap_vld : OUT STD_LOGIC;
    bound_x_max_ap_vld : IN STD_LOGIC;
    bound_x_min_ap_vld : IN STD_LOGIC;
    cols_ap_vld : OUT STD_LOGIC;
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of reorder_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "reorder_hls,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.158000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=398,HLS_SYN_LUT=1183,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_rows : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit3_proc_U0_rows_ap_vld : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_cols : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit3_proc_U0_cols_ap_vld : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_bound_y_min_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit3_proc_U0_bound_y_min_out_write : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_bound_x_min_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit3_proc_U0_bound_x_min_out_write : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_img_0_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit3_proc_U0_img_0_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_img_0_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit3_proc_U0_img_0_cols_V_out_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal vector2mat_cut_U0_ap_start : STD_LOGIC;
    signal vector2mat_cut_U0_ap_done : STD_LOGIC;
    signal vector2mat_cut_U0_ap_continue : STD_LOGIC;
    signal vector2mat_cut_U0_ap_idle : STD_LOGIC;
    signal vector2mat_cut_U0_ap_ready : STD_LOGIC;
    signal vector2mat_cut_U0_start_out : STD_LOGIC;
    signal vector2mat_cut_U0_start_write : STD_LOGIC;
    signal vector2mat_cut_U0_src_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal vector2mat_cut_U0_src_ce0 : STD_LOGIC;
    signal vector2mat_cut_U0_dst_rows_V_read : STD_LOGIC;
    signal vector2mat_cut_U0_dst_cols_V_read : STD_LOGIC;
    signal vector2mat_cut_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal vector2mat_cut_U0_dst_data_stream_V_write : STD_LOGIC;
    signal vector2mat_cut_U0_bound_x_min_read : STD_LOGIC;
    signal vector2mat_cut_U0_bound_y_min_read : STD_LOGIC;
    signal vector2mat_cut_U0_dst_rows_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal vector2mat_cut_U0_dst_rows_V_out_write : STD_LOGIC;
    signal vector2mat_cut_U0_dst_cols_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal vector2mat_cut_U0_dst_cols_V_out_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_U0_output_r_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_y_min_c_full_n : STD_LOGIC;
    signal bound_y_min_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_y_min_c_empty_n : STD_LOGIC;
    signal bound_x_min_c_full_n : STD_LOGIC;
    signal bound_x_min_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_x_min_c_empty_n : STD_LOGIC;
    signal img_0_rows_V_c_full_n : STD_LOGIC;
    signal img_0_rows_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_rows_V_c_empty_n : STD_LOGIC;
    signal img_0_cols_V_c_full_n : STD_LOGIC;
    signal img_0_cols_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_cols_V_c_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_rows_V_c9_full_n : STD_LOGIC;
    signal img_0_rows_V_c9_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_rows_V_c9_empty_n : STD_LOGIC;
    signal img_0_cols_V_c10_full_n : STD_LOGIC;
    signal img_0_cols_V_c10_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_0_cols_V_c10_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_vector2mat_cut_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_vector2mat_cut_U0_ap_ready : STD_LOGIC;
    signal vector2mat_cut_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_Mat_exit3_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit3_proc_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_Mat_exit3_proc_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_start_write : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit3_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bound_y_min : IN STD_LOGIC_VECTOR (15 downto 0);
        bound_y_min_ap_vld : IN STD_LOGIC;
        bound_y_max : IN STD_LOGIC_VECTOR (15 downto 0);
        bound_y_max_ap_vld : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (15 downto 0);
        rows_ap_vld : OUT STD_LOGIC;
        bound_x_max : IN STD_LOGIC_VECTOR (15 downto 0);
        bound_x_max_ap_vld : IN STD_LOGIC;
        bound_x_min : IN STD_LOGIC_VECTOR (15 downto 0);
        bound_x_min_ap_vld : IN STD_LOGIC;
        cols : OUT STD_LOGIC_VECTOR (15 downto 0);
        cols_ap_vld : OUT STD_LOGIC;
        bound_y_min_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bound_y_min_out_full_n : IN STD_LOGIC;
        bound_y_min_out_write : OUT STD_LOGIC;
        bound_x_min_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bound_x_min_out_full_n : IN STD_LOGIC;
        bound_x_min_out_write : OUT STD_LOGIC;
        img_0_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_0_rows_V_out_full_n : IN STD_LOGIC;
        img_0_rows_V_out_write : OUT STD_LOGIC;
        img_0_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_0_cols_V_out_full_n : IN STD_LOGIC;
        img_0_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component vector2mat_cut IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        dst_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_V_empty_n : IN STD_LOGIC;
        dst_rows_V_read : OUT STD_LOGIC;
        dst_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_V_empty_n : IN STD_LOGIC;
        dst_cols_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        bound_x_min_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bound_x_min_empty_n : IN STD_LOGIC;
        bound_x_min_read : OUT STD_LOGIC;
        bound_y_min_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bound_y_min_empty_n : IN STD_LOGIC;
        bound_y_min_read : OUT STD_LOGIC;
        dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_V_out_full_n : IN STD_LOGIC;
        dst_rows_V_out_write : OUT STD_LOGIC;
        dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_V_out_full_n : IN STD_LOGIC;
        dst_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        output_r_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reorder_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    reorder_hls_AXILiteS_s_axi_U : component reorder_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Block_Mat_exit3_proc_U0 : component Block_Mat_exit3_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit3_proc_U0_ap_start,
        ap_done => Block_Mat_exit3_proc_U0_ap_done,
        ap_continue => Block_Mat_exit3_proc_U0_ap_continue,
        ap_idle => Block_Mat_exit3_proc_U0_ap_idle,
        ap_ready => Block_Mat_exit3_proc_U0_ap_ready,
        bound_y_min => bound_y_min,
        bound_y_min_ap_vld => bound_y_min_ap_vld,
        bound_y_max => bound_y_max,
        bound_y_max_ap_vld => bound_y_max_ap_vld,
        rows => Block_Mat_exit3_proc_U0_rows,
        rows_ap_vld => Block_Mat_exit3_proc_U0_rows_ap_vld,
        bound_x_max => bound_x_max,
        bound_x_max_ap_vld => bound_x_max_ap_vld,
        bound_x_min => bound_x_min,
        bound_x_min_ap_vld => bound_x_min_ap_vld,
        cols => Block_Mat_exit3_proc_U0_cols,
        cols_ap_vld => Block_Mat_exit3_proc_U0_cols_ap_vld,
        bound_y_min_out_din => Block_Mat_exit3_proc_U0_bound_y_min_out_din,
        bound_y_min_out_full_n => bound_y_min_c_full_n,
        bound_y_min_out_write => Block_Mat_exit3_proc_U0_bound_y_min_out_write,
        bound_x_min_out_din => Block_Mat_exit3_proc_U0_bound_x_min_out_din,
        bound_x_min_out_full_n => bound_x_min_c_full_n,
        bound_x_min_out_write => Block_Mat_exit3_proc_U0_bound_x_min_out_write,
        img_0_rows_V_out_din => Block_Mat_exit3_proc_U0_img_0_rows_V_out_din,
        img_0_rows_V_out_full_n => img_0_rows_V_c_full_n,
        img_0_rows_V_out_write => Block_Mat_exit3_proc_U0_img_0_rows_V_out_write,
        img_0_cols_V_out_din => Block_Mat_exit3_proc_U0_img_0_cols_V_out_din,
        img_0_cols_V_out_full_n => img_0_cols_V_c_full_n,
        img_0_cols_V_out_write => Block_Mat_exit3_proc_U0_img_0_cols_V_out_write);

    vector2mat_cut_U0 : component vector2mat_cut
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => vector2mat_cut_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => vector2mat_cut_U0_ap_done,
        ap_continue => vector2mat_cut_U0_ap_continue,
        ap_idle => vector2mat_cut_U0_ap_idle,
        ap_ready => vector2mat_cut_U0_ap_ready,
        start_out => vector2mat_cut_U0_start_out,
        start_write => vector2mat_cut_U0_start_write,
        src_address0 => vector2mat_cut_U0_src_address0,
        src_ce0 => vector2mat_cut_U0_src_ce0,
        src_q0 => input_r_q0,
        dst_rows_V_dout => img_0_rows_V_c_dout,
        dst_rows_V_empty_n => img_0_rows_V_c_empty_n,
        dst_rows_V_read => vector2mat_cut_U0_dst_rows_V_read,
        dst_cols_V_dout => img_0_cols_V_c_dout,
        dst_cols_V_empty_n => img_0_cols_V_c_empty_n,
        dst_cols_V_read => vector2mat_cut_U0_dst_cols_V_read,
        dst_data_stream_V_din => vector2mat_cut_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_0_data_stream_0_full_n,
        dst_data_stream_V_write => vector2mat_cut_U0_dst_data_stream_V_write,
        bound_x_min_dout => bound_x_min_c_dout,
        bound_x_min_empty_n => bound_x_min_c_empty_n,
        bound_x_min_read => vector2mat_cut_U0_bound_x_min_read,
        bound_y_min_dout => bound_y_min_c_dout,
        bound_y_min_empty_n => bound_y_min_c_empty_n,
        bound_y_min_read => vector2mat_cut_U0_bound_y_min_read,
        dst_rows_V_out_din => vector2mat_cut_U0_dst_rows_V_out_din,
        dst_rows_V_out_full_n => img_0_rows_V_c9_full_n,
        dst_rows_V_out_write => vector2mat_cut_U0_dst_rows_V_out_write,
        dst_cols_V_out_din => vector2mat_cut_U0_dst_cols_V_out_din,
        dst_cols_V_out_full_n => img_0_cols_V_c10_full_n,
        dst_cols_V_out_write => vector2mat_cut_U0_dst_cols_V_out_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V_dout => img_0_rows_V_c9_dout,
        img_rows_V_empty_n => img_0_rows_V_c9_empty_n,
        img_rows_V_read => Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_dout => img_0_cols_V_c10_dout,
        img_cols_V_empty_n => img_0_cols_V_c10_empty_n,
        img_cols_V_read => Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_V_dout => img_0_data_stream_0_dout,
        img_data_stream_V_empty_n => img_0_data_stream_0_empty_n,
        img_data_stream_V_read => Mat2AXIvideo_U0_img_data_stream_V_read,
        output_r_TDATA => Mat2AXIvideo_U0_output_r_TDATA,
        output_r_TVALID => Mat2AXIvideo_U0_output_r_TVALID,
        output_r_TREADY => output_r_TREADY,
        output_r_TKEEP => Mat2AXIvideo_U0_output_r_TKEEP,
        output_r_TSTRB => Mat2AXIvideo_U0_output_r_TSTRB,
        output_r_TUSER => Mat2AXIvideo_U0_output_r_TUSER,
        output_r_TLAST => Mat2AXIvideo_U0_output_r_TLAST,
        output_r_TID => Mat2AXIvideo_U0_output_r_TID,
        output_r_TDEST => Mat2AXIvideo_U0_output_r_TDEST);

    bound_y_min_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit3_proc_U0_bound_y_min_out_din,
        if_full_n => bound_y_min_c_full_n,
        if_write => Block_Mat_exit3_proc_U0_bound_y_min_out_write,
        if_dout => bound_y_min_c_dout,
        if_empty_n => bound_y_min_c_empty_n,
        if_read => vector2mat_cut_U0_bound_y_min_read);

    bound_x_min_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit3_proc_U0_bound_x_min_out_din,
        if_full_n => bound_x_min_c_full_n,
        if_write => Block_Mat_exit3_proc_U0_bound_x_min_out_write,
        if_dout => bound_x_min_c_dout,
        if_empty_n => bound_x_min_c_empty_n,
        if_read => vector2mat_cut_U0_bound_x_min_read);

    img_0_rows_V_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit3_proc_U0_img_0_rows_V_out_din,
        if_full_n => img_0_rows_V_c_full_n,
        if_write => Block_Mat_exit3_proc_U0_img_0_rows_V_out_write,
        if_dout => img_0_rows_V_c_dout,
        if_empty_n => img_0_rows_V_c_empty_n,
        if_read => vector2mat_cut_U0_dst_rows_V_read);

    img_0_cols_V_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit3_proc_U0_img_0_cols_V_out_din,
        if_full_n => img_0_cols_V_c_full_n,
        if_write => Block_Mat_exit3_proc_U0_img_0_cols_V_out_write,
        if_dout => img_0_cols_V_c_dout,
        if_empty_n => img_0_cols_V_c_empty_n,
        if_read => vector2mat_cut_U0_dst_cols_V_read);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => vector2mat_cut_U0_dst_data_stream_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => vector2mat_cut_U0_dst_data_stream_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_V_read);

    img_0_rows_V_c9_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => vector2mat_cut_U0_dst_rows_V_out_din,
        if_full_n => img_0_rows_V_c9_full_n,
        if_write => vector2mat_cut_U0_dst_rows_V_out_write,
        if_dout => img_0_rows_V_c9_dout,
        if_empty_n => img_0_rows_V_c9_empty_n,
        if_read => Mat2AXIvideo_U0_img_rows_V_read);

    img_0_cols_V_c10_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => vector2mat_cut_U0_dst_cols_V_out_din,
        if_full_n => img_0_cols_V_c10_full_n,
        if_write => vector2mat_cut_U0_dst_cols_V_out_write,
        if_dout => img_0_cols_V_c10_dout,
        if_empty_n => img_0_cols_V_c10_empty_n,
        if_read => Mat2AXIvideo_U0_img_cols_V_read);

    start_for_Mat2AXIbkb_U : component start_for_Mat2AXIbkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => vector2mat_cut_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_Block_Mat_exit3_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit3_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit3_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit3_proc_U0_ap_ready <= ap_sync_Block_Mat_exit3_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_vector2mat_cut_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_vector2mat_cut_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_vector2mat_cut_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_vector2mat_cut_U0_ap_ready <= ap_sync_vector2mat_cut_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Block_Mat_exit3_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit3_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit3_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit3_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_Mat_exit3_proc_U0_ap_ready))) then 
                Block_Mat_exit3_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit3_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    vector2mat_cut_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((vector2mat_cut_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                vector2mat_cut_U0_ap_ready_count <= std_logic_vector(unsigned(vector2mat_cut_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (vector2mat_cut_U0_ap_ready = ap_const_logic_1))) then 
                vector2mat_cut_U0_ap_ready_count <= std_logic_vector(unsigned(vector2mat_cut_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_Mat_exit3_proc_U0_ap_continue <= ap_sync_done;
    Block_Mat_exit3_proc_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit3_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit3_proc_U0_start_full_n <= ap_const_logic_1;
    Block_Mat_exit3_proc_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_sync_done;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (vector2mat_cut_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Block_Mat_exit3_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_Mat_exit3_proc_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit3_proc_U0_ap_ready or Block_Mat_exit3_proc_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (Mat2AXIvideo_U0_ap_done and Block_Mat_exit3_proc_U0_ap_done);
    ap_sync_ready <= (ap_sync_vector2mat_cut_U0_ap_ready and ap_sync_Block_Mat_exit3_proc_U0_ap_ready);
    ap_sync_vector2mat_cut_U0_ap_ready <= (vector2mat_cut_U0_ap_ready or ap_sync_reg_vector2mat_cut_U0_ap_ready);
    cols <= Block_Mat_exit3_proc_U0_cols;
    cols_ap_vld <= Block_Mat_exit3_proc_U0_cols_ap_vld;
    input_r_address0 <= vector2mat_cut_U0_src_address0;
    input_r_ce0 <= vector2mat_cut_U0_src_ce0;
    input_r_d0 <= ap_const_lv1_0;
    input_r_we0 <= ap_const_logic_0;
    output_r_TDATA <= Mat2AXIvideo_U0_output_r_TDATA;
    output_r_TDEST <= Mat2AXIvideo_U0_output_r_TDEST;
    output_r_TID <= Mat2AXIvideo_U0_output_r_TID;
    output_r_TKEEP <= Mat2AXIvideo_U0_output_r_TKEEP;
    output_r_TLAST <= Mat2AXIvideo_U0_output_r_TLAST;
    output_r_TSTRB <= Mat2AXIvideo_U0_output_r_TSTRB;
    output_r_TUSER <= Mat2AXIvideo_U0_output_r_TUSER;
    output_r_TVALID <= Mat2AXIvideo_U0_output_r_TVALID;
    rows <= Block_Mat_exit3_proc_U0_rows;
    rows_ap_vld <= Block_Mat_exit3_proc_U0_rows_ap_vld;
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    vector2mat_cut_U0_ap_continue <= ap_const_logic_1;
    vector2mat_cut_U0_ap_start <= ((ap_sync_reg_vector2mat_cut_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
