-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient_decompositi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gx_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gx_rows_V_empty_n : IN STD_LOGIC;
    gx_rows_V_read : OUT STD_LOGIC;
    gx_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gx_cols_V_empty_n : IN STD_LOGIC;
    gx_cols_V_read : OUT STD_LOGIC;
    gx_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gx_data_stream_V_empty_n : IN STD_LOGIC;
    gx_data_stream_V_read : OUT STD_LOGIC;
    gy_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gy_data_stream_V_empty_n : IN STD_LOGIC;
    gy_data_stream_V_read : OUT STD_LOGIC;
    gd_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    gd_data_stream_V_full_n : IN STD_LOGIC;
    gd_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of gradient_decompositi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gx_rows_V_blk_n : STD_LOGIC;
    signal gx_cols_V_blk_n : STD_LOGIC;
    signal gx_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal gy_data_stream_V_blk_n : STD_LOGIC;
    signal gd_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal exitcond_i_reg_672_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_3_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_V_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_i_reg_672_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_29_reg_681 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_reg_687 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_698 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond19_i_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond19_i_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond19_i_reg_703_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_i_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_i_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_i_reg_709_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_reg_715_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_i_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_i_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_i_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_i_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs_g_i_fu_515_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal abs_g_i_reg_745 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal t_V_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_25_fu_231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_i_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_i_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_i_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_i_fu_281_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond8_i_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_301_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev10_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_i_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_i_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_i_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_V_3_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_344_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal xs_V_4_fu_360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_365_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_gy_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_gx_fu_354_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_i_fu_399_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_113_cast18_i_fu_395_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl2_cast_i_fu_407_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_114_i_fu_411_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_i_fu_421_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl1_i_fu_433_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_i_fu_429_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl1_cast_i_fu_441_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_116_i_fu_445_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_114_cast_i_fu_417_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_100_cast16_i_fu_457_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl5_cast_i_fu_461_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_101_i_fu_465_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl3_i_fu_475_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl3_cast_i_fu_483_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl4_cast_i_fu_487_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_101_cast_i_fu_471_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_103_i_fu_491_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_118_i_fu_503_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_381_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_fu_385_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal rev9_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_cast_i_fu_526_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal dir_g_3_cast_i_fu_544_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp2_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_1_i_fu_530_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp1_fu_556_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp7_demorgan_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_2_i_fu_537_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp4_fu_574_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp5_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_demorgan_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_597_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal dir_g_7_i_fu_637_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_i_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_i_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((exitcond1_i_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_3_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_3_reg_176 <= ap_const_lv32_0;
            elsif (((exitcond_i_fu_198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_3_reg_176 <= j_V_fu_203_p2;
            end if; 
        end if;
    end process;

    t_V_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_reg_165 <= i_V_reg_667;
            elsif ((not(((ap_start = ap_const_logic_0) or (gx_cols_V_empty_n = ap_const_logic_0) or (gx_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_165 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_672_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                abs_g_i_reg_745 <= abs_g_i_fu_515_p2;
                tmp_104_i_reg_734 <= tmp_104_i_fu_497_p2;
                tmp_119_i_reg_740 <= tmp_119_i_fu_509_p2;
                tmp_i_reg_721 <= tmp_i_fu_389_p2;
                ult_reg_729 <= ult_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (gx_cols_V_empty_n = ap_const_logic_0) or (gx_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_V_reg_658 <= gx_cols_V_dout;
                rows_V_reg_653 <= gx_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_i_reg_672 <= exitcond_i_fu_198_p2;
                exitcond_i_reg_672_pp0_iter1_reg <= exitcond_i_reg_672;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_i_reg_672_pp0_iter2_reg <= exitcond_i_reg_672_pp0_iter1_reg;
                or_cond19_i_reg_703_pp0_iter2_reg <= or_cond19_i_reg_703;
                or_cond4_i_reg_715_pp0_iter2_reg <= or_cond4_i_reg_715;
                or_cond9_i_reg_709_pp0_iter2_reg <= or_cond9_i_reg_709;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_667 <= i_V_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_672 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond19_i_reg_703 <= or_cond19_i_fu_263_p2;
                or_cond4_i_reg_715 <= or_cond4_i_fu_333_p2;
                or_cond9_i_reg_709 <= or_cond9_i_fu_295_p2;
                p_Result_2_reg_698 <= gy_data_stream_V_dout(15 downto 15);
                p_Result_s_reg_693 <= gx_data_stream_V_dout(15 downto 15);
                tmp_29_reg_681 <= gx_data_stream_V_dout;
                tmp_30_reg_687 <= gy_data_stream_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, gx_rows_V_empty_n, gx_cols_V_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond1_i_fu_187_p2, ap_CS_fsm_state2, exitcond_i_fu_198_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (gx_cols_V_empty_n = ap_const_logic_0) or (gx_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_i_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_fu_198_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_fu_198_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    abs_g_i_fu_515_p2 <= std_logic_vector(unsigned(tmp_fu_381_p1) + unsigned(tmp_24_fu_385_p1));
    abs_gx_fu_354_p3 <= 
        p_Result_3_fu_344_p4 when (p_Result_s_reg_693(0) = '1') else 
        tmp_29_reg_681;
    abs_gy_fu_375_p3 <= 
        p_Result_4_fu_365_p4 when (p_Result_2_reg_698(0) = '1') else 
        tmp_30_reg_687;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, gd_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_672, ap_enable_reg_pp0_iter3, exitcond_i_reg_672_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_i_reg_672_pp0_iter2_reg = ap_const_lv1_0) and (gd_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_672 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_672 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, gd_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_672, ap_enable_reg_pp0_iter3, exitcond_i_reg_672_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_i_reg_672_pp0_iter2_reg = ap_const_lv1_0) and (gd_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_672 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_672 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, gd_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_672, ap_enable_reg_pp0_iter3, exitcond_i_reg_672_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_i_reg_672_pp0_iter2_reg = ap_const_lv1_0) and (gd_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_672 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_672 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, gx_rows_V_empty_n, gx_cols_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (gx_cols_V_empty_n = ap_const_logic_0) or (gx_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, exitcond_i_reg_672)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_i_reg_672 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_672 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(gd_data_stream_V_full_n, exitcond_i_reg_672_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((exitcond_i_reg_672_pp0_iter2_reg = ap_const_lv1_0) and (gd_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_fu_198_p2)
    begin
        if ((exitcond_i_fu_198_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond1_i_fu_187_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_i_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond1_i_fu_187_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_i_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dir_g_1_i_fu_530_p3 <= 
        ap_const_lv2_2 when (tmp_104_i_reg_734(0) = '1') else 
        ap_const_lv2_1;
    dir_g_2_i_fu_537_p3 <= 
        ap_const_lv2_2 when (tmp_104_i_reg_734(0) = '1') else 
        ap_const_lv2_3;
    dir_g_3_cast_i_fu_544_p3 <= 
        ap_const_lv2_3 when (rev9_fu_521_p2(0) = '1') else 
        ap_const_lv2_0;
    dir_g_7_i_fu_637_p3 <= 
        ap_const_lv2_0 when (sel_tmp12_fu_632_p2(0) = '1') else 
        sel_tmp9_fu_597_p3;
    dir_g_cast_i_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev9_fu_521_p2),2));
    exitcond1_i_fu_187_p2 <= "1" when (t_V_reg_165 = rows_V_reg_653) else "0";
    exitcond_i_fu_198_p2 <= "1" when (t_V_3_reg_176 = cols_V_reg_658) else "0";

    gd_data_stream_V_blk_n_assign_proc : process(gd_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, exitcond_i_reg_672_pp0_iter2_reg)
    begin
        if (((exitcond_i_reg_672_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            gd_data_stream_V_blk_n <= gd_data_stream_V_full_n;
        else 
            gd_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gd_data_stream_V_din <= (abs_g_i_reg_745 & dir_g_7_i_fu_637_p3);

    gd_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, exitcond_i_reg_672_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_672_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gd_data_stream_V_write <= ap_const_logic_1;
        else 
            gd_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    gx_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, gx_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gx_cols_V_blk_n <= gx_cols_V_empty_n;
        else 
            gx_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gx_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, gx_rows_V_empty_n, gx_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (gx_cols_V_empty_n = ap_const_logic_0) or (gx_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gx_cols_V_read <= ap_const_logic_1;
        else 
            gx_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gx_data_stream_V_blk_n_assign_proc : process(gx_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_672)
    begin
        if (((exitcond_i_reg_672 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gx_data_stream_V_blk_n <= gx_data_stream_V_empty_n;
        else 
            gx_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gx_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_672, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_672 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gx_data_stream_V_read <= ap_const_logic_1;
        else 
            gx_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gx_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, gx_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gx_rows_V_blk_n <= gx_rows_V_empty_n;
        else 
            gx_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gx_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, gx_rows_V_empty_n, gx_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (gx_cols_V_empty_n = ap_const_logic_0) or (gx_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gx_rows_V_read <= ap_const_logic_1;
        else 
            gx_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gy_data_stream_V_blk_n_assign_proc : process(gy_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_672)
    begin
        if (((exitcond_i_reg_672 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gy_data_stream_V_blk_n <= gy_data_stream_V_empty_n;
        else 
            gy_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gy_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_672, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_672 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gy_data_stream_V_read <= ap_const_logic_1;
        else 
            gy_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_192_p2 <= std_logic_vector(unsigned(t_V_reg_165) + unsigned(ap_const_lv32_1));
    j_V_fu_203_p2 <= std_logic_vector(unsigned(t_V_3_reg_176) + unsigned(ap_const_lv32_1));
    or_cond19_i_fu_263_p2 <= (or_cond_i_fu_245_p2 or or_cond1_i_fu_257_p2);
    or_cond1_i_fu_257_p2 <= (tmp_99_i_fu_251_p2 and p_Result_s_fu_209_p3);
    or_cond2_i_fu_315_p2 <= (rev10_fu_309_p2 and p_Result_2_fu_217_p3);
    or_cond3_i_fu_327_p2 <= (tmp_95_i_fu_269_p2 and tmp_107_i_fu_321_p2);
    or_cond4_i_fu_333_p2 <= (or_cond3_i_fu_327_p2 or or_cond2_i_fu_315_p2);
    or_cond8_i_fu_275_p2 <= (tmp_95_i_fu_269_p2 and tmp_91_i_fu_225_p2);
    or_cond9_i_fu_295_p2 <= (tmp_26_fu_287_p3 or or_cond8_i_fu_275_p2);
    or_cond_i_fu_245_p2 <= (tmp_91_i_fu_225_p2 and rev_fu_239_p2);
    p_Result_2_fu_217_p3 <= gy_data_stream_V_dout(15 downto 15);
    
    p_Result_3_fu_344_p4_proc : process(xs_V_3_fu_339_p2)
    begin
        p_Result_3_fu_344_p4 <= xs_V_3_fu_339_p2;
        p_Result_3_fu_344_p4(15) <= ap_const_lv1_0(0);
    end process;

    
    p_Result_4_fu_365_p4_proc : process(xs_V_4_fu_360_p2)
    begin
        p_Result_4_fu_365_p4 <= xs_V_4_fu_360_p2;
        p_Result_4_fu_365_p4(15) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_209_p3 <= gx_data_stream_V_dout(15 downto 15);
    p_shl1_cast_i_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_fu_433_p3),21));
    p_shl1_i_fu_433_p3 <= (abs_gy_fu_375_p3 & ap_const_lv2_0);
    p_shl2_cast_i_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_i_fu_399_p3),19));
    p_shl2_i_fu_399_p3 <= (abs_gx_fu_354_p3 & ap_const_lv2_0);
    p_shl3_cast_i_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_i_fu_475_p3),21));
    p_shl3_i_fu_475_p3 <= (abs_gx_fu_354_p3 & ap_const_lv4_0);
    p_shl4_cast_i_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_i_fu_399_p3),21));
    p_shl5_cast_i_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_fu_433_p3),19));
    p_shl_cast_i_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_421_p3),21));
    p_shl_i_fu_421_p3 <= (abs_gy_fu_375_p3 & ap_const_lv4_0);
    rev10_fu_309_p2 <= (tmp_27_fu_301_p3 xor ap_const_lv1_1);
    rev9_fu_521_p2 <= (ult_reg_729 xor ap_const_lv1_1);
    rev_fu_239_p2 <= (tmp_25_fu_231_p3 xor ap_const_lv1_1);
    sel_tmp10_fu_620_p2 <= (sel_tmp16_demorgan_fu_615_p2 xor ap_const_lv1_1);
    sel_tmp11_fu_626_p2 <= (sel_tmp6_fu_610_p2 or sel_tmp10_fu_620_p2);
    sel_tmp12_fu_632_p2 <= (tmp_119_i_reg_740 and sel_tmp11_fu_626_p2);
    sel_tmp16_demorgan_fu_615_p2 <= (sel_tmp7_demorgan_fu_582_p2 or or_cond4_i_reg_715_pp0_iter2_reg);
    sel_tmp1_fu_556_p3 <= 
        dir_g_cast_i_fu_526_p1 when (sel_tmp_fu_552_p2(0) = '1') else 
        dir_g_3_cast_i_fu_544_p3;
    sel_tmp2_fu_564_p2 <= (tmp_i_reg_721 xor ap_const_lv1_1);
    sel_tmp3_fu_569_p2 <= (sel_tmp2_fu_564_p2 and or_cond9_i_reg_709_pp0_iter2_reg);
    sel_tmp4_fu_574_p3 <= 
        dir_g_1_i_fu_530_p3 when (sel_tmp3_fu_569_p2(0) = '1') else 
        sel_tmp1_fu_556_p3;
    sel_tmp5_fu_605_p2 <= (or_cond19_i_reg_703_pp0_iter2_reg xor ap_const_lv1_1);
    sel_tmp6_fu_610_p2 <= (tmp_i_reg_721 and sel_tmp5_fu_605_p2);
    sel_tmp7_demorgan_fu_582_p2 <= (tmp_i_reg_721 or or_cond9_i_reg_709_pp0_iter2_reg);
    sel_tmp7_fu_586_p2 <= (sel_tmp7_demorgan_fu_582_p2 xor ap_const_lv1_1);
    sel_tmp8_fu_592_p2 <= (sel_tmp7_fu_586_p2 and or_cond4_i_reg_715_pp0_iter2_reg);
    sel_tmp9_fu_597_p3 <= 
        dir_g_2_i_fu_537_p3 when (sel_tmp8_fu_592_p2(0) = '1') else 
        sel_tmp4_fu_574_p3;
    sel_tmp_fu_552_p2 <= (tmp_i_reg_721 and or_cond19_i_reg_703_pp0_iter2_reg);
    tmp_100_cast16_i_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(abs_gy_fu_375_p3),19));
    tmp_101_cast_i_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_i_fu_465_p2),21));
    tmp_101_i_fu_465_p2 <= std_logic_vector(unsigned(tmp_100_cast16_i_fu_457_p1) + unsigned(p_shl5_cast_i_fu_461_p1));
    tmp_103_i_fu_491_p2 <= std_logic_vector(unsigned(p_shl3_cast_i_fu_483_p1) - unsigned(p_shl4_cast_i_fu_487_p1));
    tmp_104_i_fu_497_p2 <= "1" when (unsigned(tmp_101_cast_i_fu_471_p1) > unsigned(tmp_103_i_fu_491_p2)) else "0";
    tmp_107_i_fu_321_p2 <= "1" when (signed(gx_data_stream_V_dout) < signed(ap_const_lv16_1)) else "0";
    tmp_113_cast18_i_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(abs_gx_fu_354_p3),19));
    tmp_114_cast_i_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_114_i_fu_411_p2),21));
    tmp_114_i_fu_411_p2 <= std_logic_vector(unsigned(tmp_113_cast18_i_fu_395_p1) + unsigned(p_shl2_cast_i_fu_407_p1));
    tmp_116_i_fu_445_p2 <= std_logic_vector(unsigned(p_shl_cast_i_fu_429_p1) - unsigned(p_shl1_cast_i_fu_441_p1));
    tmp_118_i_fu_503_p2 <= (abs_gy_fu_375_p3 or abs_gx_fu_354_p3);
    tmp_119_i_fu_509_p2 <= "1" when (tmp_118_i_fu_503_p2 = ap_const_lv16_0) else "0";
    tmp_24_fu_385_p1 <= abs_gx_fu_354_p3(14 - 1 downto 0);
    tmp_25_fu_231_p3 <= gy_data_stream_V_dout(15 downto 15);
    tmp_26_fu_287_p3 <= tmp_96_i_fu_281_p2(15 downto 15);
    tmp_27_fu_301_p3 <= gx_data_stream_V_dout(15 downto 15);
    tmp_91_i_fu_225_p2 <= "1" when (signed(gx_data_stream_V_dout) > signed(ap_const_lv16_0)) else "0";
    tmp_95_i_fu_269_p2 <= "1" when (signed(gy_data_stream_V_dout) > signed(ap_const_lv16_0)) else "0";
    tmp_96_i_fu_281_p2 <= (gy_data_stream_V_dout and gx_data_stream_V_dout);
    tmp_99_i_fu_251_p2 <= "1" when (signed(gy_data_stream_V_dout) < signed(ap_const_lv16_1)) else "0";
    tmp_fu_381_p1 <= abs_gy_fu_375_p3(14 - 1 downto 0);
    tmp_i_fu_389_p2 <= "1" when (unsigned(abs_gx_fu_354_p3) > unsigned(abs_gy_fu_375_p3)) else "0";
    ult_fu_451_p2 <= "1" when (unsigned(tmp_116_i_fu_445_p2) < unsigned(tmp_114_cast_i_fu_417_p1)) else "0";
    xs_V_3_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_29_reg_681));
    xs_V_4_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_30_reg_687));
end behav;
