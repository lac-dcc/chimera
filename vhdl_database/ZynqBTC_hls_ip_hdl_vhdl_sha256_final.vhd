-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.1
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_final is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_final_in_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_final_in_data_ce0 : OUT STD_LOGIC;
    ctx_final_in_data_we0 : OUT STD_LOGIC;
    ctx_final_in_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_final_in_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_final_in_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_final_in_data_ce1 : OUT STD_LOGIC;
    ctx_final_in_data_we1 : OUT STD_LOGIC;
    ctx_final_in_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_final_in_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_final_datalen_read : IN STD_LOGIC_VECTOR (6 downto 0);
    ctx_final_bitlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ctx_final_bitlen_ce0 : OUT STD_LOGIC;
    ctx_final_bitlen_we0 : OUT STD_LOGIC;
    ctx_final_bitlen_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_final_bitlen_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_final_bitlen_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ctx_final_bitlen_ce1 : OUT STD_LOGIC;
    ctx_final_bitlen_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_final_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ctx_final_state_ce0 : OUT STD_LOGIC;
    ctx_final_state_we0 : OUT STD_LOGIC;
    ctx_final_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_final_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_final_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ctx_final_state_ce1 : OUT STD_LOGIC;
    ctx_final_state_we1 : OUT STD_LOGIC;
    ctx_final_state_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_final_state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    final_hash_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    final_hash_ce1 : OUT STD_LOGIC;
    final_hash_we1 : OUT STD_LOGIC;
    final_hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_final is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_508_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_881 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp17_fu_518_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp17_reg_886 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_fu_524_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_reg_891 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_528_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_reg_897 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_559_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_576_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ctx_final_bitlen_addr_gep_fu_158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_final_bitlen_addr_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_582_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_reg_928 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_585_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_cast_reg_933 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_594_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp4_reg_938 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_618_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ctx_final_bitlen_load_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_final_bitlen_addr_1_gep_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_final_bitlen_addr_1_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_final_bitlen_load_1_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_655_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_reg_987 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_997 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1002 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_689_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_1012 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1017 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_1022 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1027 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_final_state_addr_gep_fu_275_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_reg_1032 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_463_ap_done : STD_LOGIC;
    signal ctx_final_state_addr_1_gep_fu_283_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_1_reg_1037 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_2_gep_fu_291_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_2_reg_1042 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_3_gep_fu_299_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_3_reg_1047 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_4_gep_fu_307_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_4_reg_1052 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_5_gep_fu_315_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_5_reg_1057 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_6_gep_fu_323_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_6_reg_1062 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_7_gep_fu_331_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_final_state_addr_7_reg_1067 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_cast9_fu_723_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_cast9_reg_1072 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_cast8_fu_727_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_cast8_reg_1077 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_cast_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_741_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1090 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_20_cast_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_770_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_reg_1101 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_774_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_reg_1106 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_783_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_787_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_reg_1116 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_fu_804_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_reg_1121 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_808_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum6_reg_1131 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_63_fu_821_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_825_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_transform_fu_463_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_463_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_463_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_463_ctx_transform_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_463_ctx_transform_state_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_463_ctx_transform_state_we0 : STD_LOGIC;
    signal grp_sha256_transform_fu_463_ctx_transform_state_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_463_ctx_transform_state_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_463_ctx_transform_state_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_463_ctx_transform_state_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_463_ctx_transform_state_we1 : STD_LOGIC;
    signal grp_sha256_transform_fu_463_ctx_transform_state_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_463_ctx_transform_state_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_463_data_transform_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_463_data_transform_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_463_data_transform_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_transform_fu_463_data_transform_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_463_data_transform_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_463_data_transform_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_reg_417 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_428 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar9_reg_439 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_450 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_463_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ctx_final_datalen_read_cast2_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_fu_778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_cast_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum6_cast_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_cast_fu_836_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_cast_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_cast_fu_867_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_514_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_cast_fu_540_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_fu_544_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_588_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar9_cast_fu_599_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_603_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_624_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal not_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_747_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_751_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_759_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_791_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum6_cast_fu_816_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum4_fu_829_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_fu_841_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum5_fu_851_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum3_cast_fu_867_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_transform_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_transform_state_ce0 : OUT STD_LOGIC;
        ctx_transform_state_we0 : OUT STD_LOGIC;
        ctx_transform_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_transform_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_transform_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ctx_transform_state_ce1 : OUT STD_LOGIC;
        ctx_transform_state_we1 : OUT STD_LOGIC;
        ctx_transform_state_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_transform_state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_transform_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_transform_ce0 : OUT STD_LOGIC;
        data_transform_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_transform_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_transform_ce1 : OUT STD_LOGIC;
        data_transform_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_sha256_transform_fu_463 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_463_ap_start,
        ap_done => grp_sha256_transform_fu_463_ap_done,
        ap_idle => grp_sha256_transform_fu_463_ap_idle,
        ap_ready => grp_sha256_transform_fu_463_ap_ready,
        ctx_transform_state_address0 => grp_sha256_transform_fu_463_ctx_transform_state_address0,
        ctx_transform_state_ce0 => grp_sha256_transform_fu_463_ctx_transform_state_ce0,
        ctx_transform_state_we0 => grp_sha256_transform_fu_463_ctx_transform_state_we0,
        ctx_transform_state_d0 => grp_sha256_transform_fu_463_ctx_transform_state_d0,
        ctx_transform_state_q0 => grp_sha256_transform_fu_463_ctx_transform_state_q0,
        ctx_transform_state_address1 => grp_sha256_transform_fu_463_ctx_transform_state_address1,
        ctx_transform_state_ce1 => grp_sha256_transform_fu_463_ctx_transform_state_ce1,
        ctx_transform_state_we1 => grp_sha256_transform_fu_463_ctx_transform_state_we1,
        ctx_transform_state_d1 => grp_sha256_transform_fu_463_ctx_transform_state_d1,
        ctx_transform_state_q1 => grp_sha256_transform_fu_463_ctx_transform_state_q1,
        data_transform_address0 => grp_sha256_transform_fu_463_data_transform_address0,
        data_transform_ce0 => grp_sha256_transform_fu_463_data_transform_ce0,
        data_transform_q0 => grp_sha256_transform_fu_463_data_transform_q0,
        data_transform_address1 => grp_sha256_transform_fu_463_data_transform_address1,
        data_transform_ce1 => grp_sha256_transform_fu_463_data_transform_ce1,
        data_transform_q1 => grp_sha256_transform_fu_463_data_transform_q1);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_sha256_transform_fu_463_ap_start_ap_start_reg assign process. --
    grp_sha256_transform_fu_463_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_transform_fu_463_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_fu_554_p2))) or (ap_ST_st16_fsm_15 = ap_CS_fsm))) then 
                    grp_sha256_transform_fu_463_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_transform_fu_463_ap_ready)) then 
                    grp_sha256_transform_fu_463_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg assign process. --
    ap_reg_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                ctx_final_bitlen_load_1_reg_972 <= ctx_final_bitlen_q0;
            end if; 
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                ctx_final_bitlen_load_reg_952 <= ctx_final_bitlen_q0;
            end if; 
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                exitcond1_reg_943 <= exitcond1_fu_613_p2;
            end if; 
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
                i_2_cast8_reg_1077(0) <= i_2_cast8_fu_727_p1(0);
                i_2_cast8_reg_1077(1) <= i_2_cast8_fu_727_p1(1);
                i_2_cast8_reg_1077(2) <= i_2_cast8_fu_727_p1(2);
            end if; 
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
                i_2_cast9_reg_1072(0) <= i_2_cast9_fu_723_p1(0);
                i_2_cast9_reg_1072(1) <= i_2_cast9_fu_723_p1(1);
                i_2_cast9_reg_1072(2) <= i_2_cast9_fu_723_p1(2);
            end if; 
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
                i_2_cast_reg_1082(0) <= i_2_cast_fu_731_p1(0);
                i_2_cast_reg_1082(1) <= i_2_cast_fu_731_p1(1);
                i_2_cast_reg_1082(2) <= i_2_cast_fu_731_p1(2);
            end if; 
            if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
                i_2_reg_450 <= i_3_reg_1090;
            elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sha256_transform_fu_463_ap_done)))) then 
                i_2_reg_450 <= ap_const_lv3_0;
            end if; 
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
                i_3_reg_1090 <= i_3_fu_741_p2;
            end if; 
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                indvar9_reg_439 <= ap_const_lv6_0;
            elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_613_p2))) then 
                indvar9_reg_439 <= indvar_next1_fu_618_p2;
            end if; 
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (tmp_s_fu_502_p2 = ap_const_lv1_0))) then 
                indvar_reg_417 <= ap_const_lv6_0;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_554_p2))) then 
                indvar_reg_417 <= indvar_next_fu_559_p2;
            end if; 
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_s_reg_877 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_570_p2))) then 
                j_reg_428 <= j_1_fu_576_p2;
            elsif ((not((ap_const_logic_0 = grp_sha256_transform_fu_463_ap_done)) and (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
                j_reg_428 <= ap_const_lv6_0;
            end if; 
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm))) then 
                reg_479 <= ctx_final_state_q0;
            end if; 
            if (((ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm))) then 
                reg_483 <= ctx_final_state_q1;
            end if; 
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                sum6_reg_1131 <= grp_fu_473_p2;
            end if; 
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (tmp_s_fu_502_p2 = ap_const_lv1_0))) then 
                tmp17_reg_886 <= tmp17_fu_518_p2;
            end if; 
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                tmp1_cast_reg_933(0) <= tmp1_cast_fu_585_p1(0);
                tmp1_cast_reg_933(1) <= tmp1_cast_fu_585_p1(1);
                tmp1_cast_reg_933(2) <= tmp1_cast_fu_585_p1(2);
                tmp1_cast_reg_933(3) <= tmp1_cast_fu_585_p1(3);
                tmp1_cast_reg_933(4) <= tmp1_cast_fu_585_p1(4);
                tmp1_cast_reg_933(5) <= tmp1_cast_fu_585_p1(5);
            end if; 
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_502_p2 = ap_const_lv1_0)))) then 
                tmp1_reg_897 <= tmp1_fu_528_p2;
            end if; 
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_502_p2 = ap_const_lv1_0)))) then 
                tmp2_reg_902 <= tmp2_fu_534_p2;
            end if; 
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                tmp4_reg_938 <= tmp4_fu_594_p2;
            end if; 
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                tmp_11_reg_1017 <= ctx_final_bitlen_q1(15 downto 8);
            end if; 
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                tmp_12_reg_1022 <= ctx_final_bitlen_q1(23 downto 16);
            end if; 
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                tmp_13_reg_1027 <= ctx_final_bitlen_q1(31 downto 24);
            end if; 
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                tmp_1_cast_reg_958(3) <= tmp_1_cast_fu_631_p1(3);
                tmp_1_cast_reg_958(4) <= tmp_1_cast_fu_631_p1(4);
                tmp_1_cast_reg_958(5) <= tmp_1_cast_fu_631_p1(5);
                tmp_1_cast_reg_958(6) <= tmp_1_cast_fu_631_p1(6);
                tmp_1_cast_reg_958(7) <= tmp_1_cast_fu_631_p1(7);
                tmp_1_cast_reg_958(8) <= tmp_1_cast_fu_631_p1(8);
            end if; 
            if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
                tmp_20_cast_reg_1095(3) <= tmp_20_cast_fu_765_p1(3);
                tmp_20_cast_reg_1095(4) <= tmp_20_cast_fu_765_p1(4);
            end if; 
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                tmp_2_reg_963 <= tmp_2_fu_641_p2;
            end if; 
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
                tmp_3_reg_977 <= tmp_3_fu_646_p2;
            end if; 
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
                tmp_4_reg_982 <= tmp_4_fu_651_p2;
            end if; 
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_502_p2 = ap_const_lv1_0)))) then 
                tmp_51_reg_891 <= tmp_51_fu_524_p1;
            end if; 
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (((tmp_s_reg_877 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_570_p2))) or (not((tmp_s_reg_877 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_reg_943)))))) then 
                tmp_53_reg_928 <= tmp_53_fu_582_p1;
            end if; 
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
                tmp_54_reg_987 <= tmp_54_fu_655_p1;
            end if; 
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                tmp_55_reg_1012 <= tmp_55_fu_689_p1;
            end if; 
            if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
                tmp_57_reg_1101 <= tmp_57_fu_770_p1;
            end if; 
            if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
                tmp_58_reg_1106 <= tmp_58_fu_774_p1;
            end if; 
            if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                tmp_59_reg_1111 <= tmp_59_fu_783_p1;
            end if; 
            if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                tmp_60_reg_1116 <= tmp_60_fu_787_p1;
            end if; 
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                tmp_61_reg_1121 <= tmp_61_fu_804_p1;
            end if; 
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                tmp_62_reg_1126 <= tmp_62_fu_808_p1;
            end if; 
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                tmp_63_reg_1136 <= tmp_63_fu_821_p1;
            end if; 
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                tmp_64_reg_1141 <= tmp_64_fu_825_p1;
            end if; 
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
                tmp_7_reg_992 <= tmp_4_fu_651_p2(15 downto 8);
            end if; 
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
                tmp_8_reg_1002 <= tmp_4_fu_651_p2(31 downto 24);
            end if; 
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
                tmp_9_reg_997 <= tmp_4_fu_651_p2(23 downto 16);
            end if; 
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (tmp_s_fu_502_p2 = ap_const_lv1_0))) then 
                tmp_reg_881 <= tmp_fu_508_p2;
            end if; 
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                tmp_s_reg_877 <= tmp_s_fu_502_p2;
            end if; 
        end if;
    end process;
    ctx_final_bitlen_addr_reg_923(0) <= '0';
    tmp1_cast_reg_933(6) <= '0';
    tmp_1_cast_reg_958(2 downto 0) <= "000";
    tmp_1_cast_reg_958(31 downto 9) <= "00000000000000000000000";
    ctx_final_bitlen_addr_1_reg_967(0) <= '1';
    ctx_final_state_addr_reg_1032(2 downto 0) <= "000";
    ctx_final_state_addr_1_reg_1037(2 downto 0) <= "001";
    ctx_final_state_addr_2_reg_1042(2 downto 0) <= "010";
    ctx_final_state_addr_3_reg_1047(2 downto 0) <= "011";
    ctx_final_state_addr_4_reg_1052(2 downto 0) <= "100";
    ctx_final_state_addr_5_reg_1057(2 downto 0) <= "101";
    ctx_final_state_addr_6_reg_1062(2 downto 0) <= "110";
    ctx_final_state_addr_7_reg_1067(2 downto 0) <= "111";
    i_2_cast9_reg_1072(3) <= '0';
    i_2_cast8_reg_1077(4 downto 3) <= "00";
    i_2_cast_reg_1082(31 downto 3) <= "00000000000000000000000000000";
    tmp_20_cast_reg_1095(2 downto 0) <= "000";
    tmp_20_cast_reg_1095(31 downto 5) <= "000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_s_fu_502_p2 , tmp_s_reg_877 , exitcond_fu_570_p2 , exitcond1_fu_613_p2 , tmp_2_fu_641_p2 , grp_sha256_transform_fu_463_ap_done , exitcond2_fu_554_p2 , exitcond3_fu_735_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (tmp_s_fu_502_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_502_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond2_fu_554_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_sha256_transform_fu_463_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((tmp_s_reg_877 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_570_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond1_fu_613_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if ((ap_const_lv1_0 = tmp_2_fu_641_p2)) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_logic_0 = grp_sha256_transform_fu_463_ap_done))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_735_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond3_fu_735_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_fu_735_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond3_fu_735_p2)
    begin
        if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_fu_735_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ctx_final_bitlen_addr_1_gep_fu_179_p3 <= ap_const_lv32_1(1 - 1 downto 0);
    ctx_final_bitlen_addr_gep_fu_158_p3 <= ap_const_lv32_0(1 - 1 downto 0);

    -- ctx_final_bitlen_address0 assign process. --
    ctx_final_bitlen_address0_assign_proc : process(ap_CS_fsm, ctx_final_bitlen_addr_reg_923, ctx_final_bitlen_addr_1_reg_967)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ctx_final_bitlen_address0 <= ctx_final_bitlen_addr_reg_923;
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            ctx_final_bitlen_address0 <= ctx_final_bitlen_addr_1_reg_967;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ctx_final_bitlen_address0 <= ap_const_lv32_1(1 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_final_bitlen_address0 <= ap_const_lv32_0(1 - 1 downto 0);
        else 
            ctx_final_bitlen_address0 <= ctx_final_bitlen_addr_1_reg_967;
        end if; 
    end process;

    ctx_final_bitlen_address1 <= ap_const_lv32_1(1 - 1 downto 0);

    -- ctx_final_bitlen_ce0 assign process. --
    ctx_final_bitlen_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_877, exitcond_fu_570_p2, exitcond1_reg_943, tmp_2_fu_641_p2, tmp_2_reg_963)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (((tmp_s_reg_877 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_570_p2))) or (not((tmp_s_reg_877 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_reg_943))))) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_641_p2))) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_reg_963))))) then 
            ctx_final_bitlen_ce0 <= ap_const_logic_1;
        else 
            ctx_final_bitlen_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_final_bitlen_ce1 assign process. --
    ctx_final_bitlen_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ctx_final_bitlen_ce1 <= ap_const_logic_1;
        else 
            ctx_final_bitlen_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_final_bitlen_d0 assign process. --
    ctx_final_bitlen_d0_assign_proc : process(ap_CS_fsm, tmp_3_reg_977, tmp_4_reg_982)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ctx_final_bitlen_d0 <= tmp_4_reg_982;
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            ctx_final_bitlen_d0 <= tmp_3_reg_977;
        else 
            ctx_final_bitlen_d0 <= tmp_4_reg_982;
        end if; 
    end process;


    -- ctx_final_bitlen_we0 assign process. --
    ctx_final_bitlen_we0_assign_proc : process(ap_CS_fsm, tmp_2_reg_963)
    begin
        if (((ap_ST_st12_fsm_11 = ap_CS_fsm) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_reg_963))))) then 
            ctx_final_bitlen_we0 <= ap_const_logic_1;
        else 
            ctx_final_bitlen_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_final_datalen_read_cast2_fu_497_p1 <= std_logic_vector(resize(unsigned(ctx_final_datalen_read),32));

    -- ctx_final_in_data_address0 assign process. --
    ctx_final_in_data_address0_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_463_data_transform_address0, ctx_final_datalen_read_cast2_fu_497_p1, i_1_cast_fu_549_p1, j_cast_fu_565_p1, i_cast_fu_608_p1)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= ap_const_lv32_39(6 - 1 downto 0);
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= ap_const_lv32_3B(6 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= ap_const_lv32_3D(6 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= ap_const_lv32_3F(6 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= i_cast_fu_608_p1(6 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= j_cast_fu_565_p1(6 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= i_1_cast_fu_549_p1(6 - 1 downto 0);
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            ctx_final_in_data_address0 <= ctx_final_datalen_read_cast2_fu_497_p1(6 - 1 downto 0);
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_in_data_address0 <= grp_sha256_transform_fu_463_data_transform_address0;
        else 
            ctx_final_in_data_address0 <= ap_const_lv32_39(6 - 1 downto 0);
        end if; 
    end process;


    -- ctx_final_in_data_address1 assign process. --
    ctx_final_in_data_address1_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_463_data_transform_address1)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            ctx_final_in_data_address1 <= ap_const_lv32_38(6 - 1 downto 0);
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            ctx_final_in_data_address1 <= ap_const_lv32_3A(6 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            ctx_final_in_data_address1 <= ap_const_lv32_3C(6 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ctx_final_in_data_address1 <= ap_const_lv32_3E(6 - 1 downto 0);
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_in_data_address1 <= grp_sha256_transform_fu_463_data_transform_address1;
        else 
            ctx_final_in_data_address1 <= ap_const_lv32_38(6 - 1 downto 0);
        end if; 
    end process;


    -- ctx_final_in_data_ce0 assign process. --
    ctx_final_in_data_ce0_assign_proc : process(ap_start, ap_CS_fsm, tmp_s_reg_877, exitcond_fu_570_p2, exitcond1_fu_613_p2, grp_sha256_transform_fu_463_data_transform_ce0, exitcond2_fu_554_p2)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_554_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_s_reg_877 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_570_p2)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_613_p2)) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            ctx_final_in_data_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_in_data_ce0 <= grp_sha256_transform_fu_463_data_transform_ce0;
        else 
            ctx_final_in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_final_in_data_ce1 assign process. --
    ctx_final_in_data_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_463_data_transform_ce1)
    begin
        if (((ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            ctx_final_in_data_ce1 <= ap_const_logic_1;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_in_data_ce1 <= grp_sha256_transform_fu_463_data_transform_ce1;
        else 
            ctx_final_in_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_final_in_data_d0 assign process. --
    ctx_final_in_data_d0_assign_proc : process(ap_CS_fsm, tmp_54_reg_987, tmp_9_reg_997, tmp_55_reg_1012, tmp_12_reg_1022)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            ctx_final_in_data_d0 <= tmp_12_reg_1022;
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            ctx_final_in_data_d0 <= tmp_55_reg_1012;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            ctx_final_in_data_d0 <= tmp_9_reg_997;
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ctx_final_in_data_d0 <= tmp_54_reg_987;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            ctx_final_in_data_d0 <= ap_const_lv8_0;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            ctx_final_in_data_d0 <= ap_const_lv8_80;
        else 
            ctx_final_in_data_d0 <= ap_const_lv8_0;
        end if; 
    end process;


    -- ctx_final_in_data_d1 assign process. --
    ctx_final_in_data_d1_assign_proc : process(ap_CS_fsm, tmp_7_reg_992, tmp_8_reg_1002, tmp_11_reg_1017, tmp_13_reg_1027)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            ctx_final_in_data_d1 <= tmp_13_reg_1027;
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            ctx_final_in_data_d1 <= tmp_11_reg_1017;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            ctx_final_in_data_d1 <= tmp_8_reg_1002;
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ctx_final_in_data_d1 <= tmp_7_reg_992;
        else 
            ctx_final_in_data_d1 <= tmp_13_reg_1027;
        end if; 
    end process;


    -- ctx_final_in_data_we0 assign process. --
    ctx_final_in_data_we0_assign_proc : process(ap_start, ap_CS_fsm, tmp_s_reg_877, exitcond_fu_570_p2, exitcond1_fu_613_p2, exitcond2_fu_554_p2)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_554_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_s_reg_877 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_570_p2)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_613_p2)) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            ctx_final_in_data_we0 <= ap_const_logic_1;
        else 
            ctx_final_in_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_final_in_data_we1 assign process. --
    ctx_final_in_data_we1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            ctx_final_in_data_we1 <= ap_const_logic_1;
        else 
            ctx_final_in_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_final_state_addr_1_gep_fu_283_p3 <= ap_const_lv32_1(3 - 1 downto 0);
    ctx_final_state_addr_2_gep_fu_291_p3 <= ap_const_lv32_2(3 - 1 downto 0);
    ctx_final_state_addr_3_gep_fu_299_p3 <= ap_const_lv32_3(3 - 1 downto 0);
    ctx_final_state_addr_4_gep_fu_307_p3 <= ap_const_lv32_4(3 - 1 downto 0);
    ctx_final_state_addr_5_gep_fu_315_p3 <= ap_const_lv32_5(3 - 1 downto 0);
    ctx_final_state_addr_6_gep_fu_323_p3 <= ap_const_lv32_6(3 - 1 downto 0);
    ctx_final_state_addr_7_gep_fu_331_p3 <= ap_const_lv32_7(3 - 1 downto 0);
    ctx_final_state_addr_gep_fu_275_p3 <= ap_const_lv32_0(3 - 1 downto 0);

    -- ctx_final_state_address0 assign process. --
    ctx_final_state_address0_assign_proc : process(ap_CS_fsm, ctx_final_state_addr_reg_1032, ctx_final_state_addr_1_reg_1037, ctx_final_state_addr_2_reg_1042, ctx_final_state_addr_4_reg_1052, ctx_final_state_addr_6_reg_1062, grp_sha256_transform_fu_463_ctx_transform_state_address0)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            ctx_final_state_address0 <= ctx_final_state_addr_6_reg_1062;
        elsif ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
            ctx_final_state_address0 <= ctx_final_state_addr_4_reg_1052;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            ctx_final_state_address0 <= ctx_final_state_addr_2_reg_1042;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            ctx_final_state_address0 <= ctx_final_state_addr_1_reg_1037;
        elsif ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            ctx_final_state_address0 <= ctx_final_state_addr_reg_1032;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_state_address0 <= grp_sha256_transform_fu_463_ctx_transform_state_address0;
        else 
            ctx_final_state_address0 <= grp_sha256_transform_fu_463_ctx_transform_state_address0;
        end if; 
    end process;


    -- ctx_final_state_address1 assign process. --
    ctx_final_state_address1_assign_proc : process(ap_CS_fsm, ctx_final_state_addr_3_reg_1047, ctx_final_state_addr_5_reg_1057, ctx_final_state_addr_7_reg_1067, grp_sha256_transform_fu_463_ctx_transform_state_address1)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            ctx_final_state_address1 <= ctx_final_state_addr_7_reg_1067;
        elsif ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
            ctx_final_state_address1 <= ctx_final_state_addr_5_reg_1057;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            ctx_final_state_address1 <= ctx_final_state_addr_3_reg_1047;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_state_address1 <= grp_sha256_transform_fu_463_ctx_transform_state_address1;
        else 
            ctx_final_state_address1 <= grp_sha256_transform_fu_463_ctx_transform_state_address1;
        end if; 
    end process;


    -- ctx_final_state_ce0 assign process. --
    ctx_final_state_ce0_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_463_ctx_transform_state_ce0, exitcond3_fu_735_p2)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_fu_735_p2)))) then 
            ctx_final_state_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_state_ce0 <= grp_sha256_transform_fu_463_ctx_transform_state_ce0;
        else 
            ctx_final_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_final_state_ce1 assign process. --
    ctx_final_state_ce1_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_463_ctx_transform_state_ce1)
    begin
        if (((ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm))) then 
            ctx_final_state_ce1 <= ap_const_logic_1;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_state_ce1 <= grp_sha256_transform_fu_463_ctx_transform_state_ce1;
        else 
            ctx_final_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_final_state_d0 <= grp_sha256_transform_fu_463_ctx_transform_state_d0;
    ctx_final_state_d1 <= grp_sha256_transform_fu_463_ctx_transform_state_d1;

    -- ctx_final_state_we0 assign process. --
    ctx_final_state_we0_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_463_ctx_transform_state_we0)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_state_we0 <= grp_sha256_transform_fu_463_ctx_transform_state_we0;
        else 
            ctx_final_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ctx_final_state_we1 assign process. --
    ctx_final_state_we1_assign_proc : process(ap_CS_fsm, grp_sha256_transform_fu_463_ctx_transform_state_we1)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm))) then 
            ctx_final_state_we1 <= grp_sha256_transform_fu_463_ctx_transform_state_we1;
        else 
            ctx_final_state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_613_p2 <= "1" when (indvar9_reg_439 = tmp4_reg_938) else "0";
    exitcond2_fu_554_p2 <= "1" when (indvar_reg_417 = tmp17_reg_886) else "0";
    exitcond3_fu_735_p2 <= "1" when (i_2_reg_450 = ap_const_lv3_4) else "0";
    exitcond_fu_570_p2 <= "1" when (j_reg_428 = ap_const_lv6_38) else "0";

    -- final_hash_address1 assign process. --
    final_hash_address1_assign_proc : process(ap_CS_fsm, i_2_cast_reg_1082, sum2_cast_fu_778_p1, sum4_cast_fu_799_p1, sum6_cast_fu_816_p1, sum8_cast_fu_836_p1, sum_cast_fu_846_p1, sum1_cast_fu_859_p1, sum3_cast_fu_867_p1)
    begin
        if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            final_hash_address1 <= sum3_cast_fu_867_p1(6 - 1 downto 0);
        elsif ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            final_hash_address1 <= sum1_cast_fu_859_p1(6 - 1 downto 0);
        elsif ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
            final_hash_address1 <= sum_cast_fu_846_p1(6 - 1 downto 0);
        elsif ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            final_hash_address1 <= sum8_cast_fu_836_p1(6 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            final_hash_address1 <= sum6_cast_fu_816_p1(6 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
            final_hash_address1 <= sum4_cast_fu_799_p1(6 - 1 downto 0);
        elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            final_hash_address1 <= sum2_cast_fu_778_p1(6 - 1 downto 0);
        elsif ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
            final_hash_address1 <= i_2_cast_reg_1082(6 - 1 downto 0);
        else 
            final_hash_address1 <= sum3_cast_fu_867_p1(6 - 1 downto 0);
        end if; 
    end process;


    -- final_hash_ce1 assign process. --
    final_hash_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm))) then 
            final_hash_ce1 <= ap_const_logic_1;
        else 
            final_hash_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- final_hash_d1 assign process. --
    final_hash_d1_assign_proc : process(ap_CS_fsm, tmp_57_reg_1101, tmp_58_reg_1106, tmp_59_reg_1111, tmp_60_reg_1116, tmp_61_reg_1121, tmp_62_reg_1126, tmp_63_reg_1136, tmp_64_reg_1141)
    begin
        if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_64_reg_1141;
        elsif ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_63_reg_1136;
        elsif ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_62_reg_1126;
        elsif ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_61_reg_1121;
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_60_reg_1116;
        elsif ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_59_reg_1111;
        elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_58_reg_1106;
        elsif ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
            final_hash_d1 <= tmp_57_reg_1101;
        else 
            final_hash_d1 <= tmp_64_reg_1141;
        end if; 
    end process;


    -- final_hash_we1 assign process. --
    final_hash_we1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm))) then 
            final_hash_we1 <= ap_const_logic_1;
        else 
            final_hash_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_473_p2 <= (i_2_reg_450 xor ap_const_lv3_4);

    -- grp_fu_487_p1 assign process. --
    grp_fu_487_p1_assign_proc : process(ap_CS_fsm, tmp_20_cast_fu_765_p1, tmp_20_cast_reg_1095)
    begin
        if (((ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm))) then 
            grp_fu_487_p1 <= tmp_20_cast_reg_1095;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            grp_fu_487_p1 <= tmp_20_cast_fu_765_p1;
        else 
            grp_fu_487_p1 <= tmp_20_cast_reg_1095;
        end if; 
    end process;

    grp_fu_487_p2 <= std_logic_vector(shift_right(unsigned(reg_479),to_integer(unsigned('0' & grp_fu_487_p1(31-1 downto 0)))));
    grp_fu_492_p2 <= std_logic_vector(shift_right(unsigned(reg_483),to_integer(unsigned('0' & tmp_20_cast_reg_1095(31-1 downto 0)))));
    grp_sha256_transform_fu_463_ap_start <= grp_sha256_transform_fu_463_ap_start_ap_start_reg;
    grp_sha256_transform_fu_463_ctx_transform_state_q0 <= ctx_final_state_q0;
    grp_sha256_transform_fu_463_ctx_transform_state_q1 <= ctx_final_state_q1;
    grp_sha256_transform_fu_463_data_transform_q0 <= ctx_final_in_data_q0;
    grp_sha256_transform_fu_463_data_transform_q1 <= ctx_final_in_data_q1;
    i_1_cast_fu_549_p1 <= std_logic_vector(resize(unsigned(i_1_fu_544_p2),32));
    i_1_fu_544_p2 <= std_logic_vector(unsigned(tmp_reg_881) + unsigned(indvar_cast_fu_540_p1));
    i_2_cast8_fu_727_p1 <= std_logic_vector(resize(unsigned(i_2_reg_450),5));
    i_2_cast9_fu_723_p1 <= std_logic_vector(resize(unsigned(i_2_reg_450),4));
    i_2_cast_fu_731_p1 <= std_logic_vector(resize(unsigned(i_2_reg_450),32));
    i_3_fu_741_p2 <= std_logic_vector(unsigned(i_2_reg_450) + unsigned(ap_const_lv3_1));
    i_cast_fu_608_p1 <= std_logic_vector(resize(unsigned(i_fu_603_p2),32));
    i_fu_603_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_933) + unsigned(indvar9_cast_fu_599_p1));
    indvar9_cast_fu_599_p1 <= std_logic_vector(resize(unsigned(indvar9_reg_439),7));
    indvar_cast_fu_540_p1 <= std_logic_vector(resize(unsigned(indvar_reg_417),7));
    indvar_next1_fu_618_p2 <= std_logic_vector(unsigned(indvar9_reg_439) + unsigned(ap_const_lv6_1));
    indvar_next_fu_559_p2 <= std_logic_vector(unsigned(indvar_reg_417) + unsigned(ap_const_lv6_1));
    j_1_fu_576_p2 <= std_logic_vector(unsigned(j_reg_428) + unsigned(ap_const_lv6_1));
    j_cast_fu_565_p1 <= std_logic_vector(resize(unsigned(j_reg_428),32));
    not_fu_635_p2 <= (tmp_1_cast_fu_631_p1 xor ap_const_lv32_FFFFFFFF);
    sum1_cast_fu_859_p1 <= std_logic_vector(resize(unsigned(sum5_fu_851_p3),32));
    sum1_fu_791_p3 <= (ap_const_lv1_1 & i_2_reg_450);
    sum2_cast_fu_778_p1 <= std_logic_vector(resize(unsigned(grp_fu_473_p2),32));
    sum3_cast_fu_867_p0 <= std_logic_vector(resize(signed(sum6_reg_1131),5));
    sum3_cast_fu_867_p1 <= std_logic_vector(resize(unsigned(sum3_cast_fu_867_p0),32));
    sum4_cast_fu_799_p1 <= std_logic_vector(resize(unsigned(sum1_fu_791_p3),32));
    sum4_fu_829_p3 <= (ap_const_lv1_1 & i_2_cast9_reg_1072);
    sum5_fu_851_p3 <= (ap_const_lv2_3 & i_2_reg_450);
    sum6_cast_fu_816_p0 <= std_logic_vector(resize(signed(grp_fu_473_p2),4));
    sum6_cast_fu_816_p1 <= std_logic_vector(resize(unsigned(sum6_cast_fu_816_p0),32));
    sum8_cast_fu_836_p1 <= std_logic_vector(resize(unsigned(sum4_fu_829_p3),32));
    sum_cast_fu_846_p1 <= std_logic_vector(resize(unsigned(sum_fu_841_p2),32));
    sum_fu_841_p2 <= std_logic_vector(unsigned(i_2_cast8_reg_1077) + unsigned(ap_const_lv5_14));
    tmp17_fu_518_p2 <= (tmp_52_fu_514_p1 xor ap_const_lv6_3F);
    tmp1_cast_fu_585_p1 <= std_logic_vector(resize(unsigned(tmp1_reg_897),7));
    tmp1_fu_528_p2 <= std_logic_vector(unsigned(tmp_51_fu_524_p1) + unsigned(ap_const_lv6_1));
    tmp2_fu_534_p2 <= "1" when (unsigned(tmp1_fu_528_p2) > unsigned(ap_const_lv6_38)) else "0";
    tmp3_fu_588_p3 <= 
        tmp_51_reg_891 when (tmp2_reg_902(0) = '1') else 
        ap_const_lv6_37;
    tmp4_fu_594_p2 <= std_logic_vector(unsigned(tmp3_fu_588_p3) - unsigned(tmp_51_reg_891));
    tmp_15_fu_751_p3 <= (tmp_56_fu_747_p1 & ap_const_lv3_0);
    tmp_16_fu_759_p2 <= std_logic_vector(unsigned(ap_const_lv5_18) - unsigned(tmp_15_fu_751_p3));
    tmp_1_cast_fu_631_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_624_p3),32));
    tmp_1_fu_624_p3 <= (tmp_53_reg_928 & ap_const_lv3_0);
    tmp_20_cast_fu_765_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_759_p2),32));
    tmp_2_fu_641_p2 <= "1" when (unsigned(ctx_final_bitlen_load_reg_952) > unsigned(not_fu_635_p2)) else "0";
    tmp_3_fu_646_p2 <= std_logic_vector(unsigned(ctx_final_bitlen_load_1_reg_972) + unsigned(ap_const_lv32_1));
    tmp_4_fu_651_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_958) + unsigned(ctx_final_bitlen_load_reg_952));
    tmp_51_fu_524_p1 <= ctx_final_datalen_read(6 - 1 downto 0);
    tmp_52_fu_514_p1 <= ctx_final_datalen_read(6 - 1 downto 0);
    tmp_53_fu_582_p1 <= ctx_final_datalen_read(6 - 1 downto 0);
    tmp_54_fu_655_p1 <= tmp_4_fu_651_p2(8 - 1 downto 0);
    tmp_55_fu_689_p1 <= ctx_final_bitlen_q1(8 - 1 downto 0);
    tmp_56_fu_747_p1 <= i_2_reg_450(2 - 1 downto 0);
    tmp_57_fu_770_p1 <= grp_fu_487_p2(8 - 1 downto 0);
    tmp_58_fu_774_p1 <= grp_fu_487_p2(8 - 1 downto 0);
    tmp_59_fu_783_p1 <= grp_fu_487_p2(8 - 1 downto 0);
    tmp_60_fu_787_p1 <= grp_fu_492_p2(8 - 1 downto 0);
    tmp_61_fu_804_p1 <= grp_fu_487_p2(8 - 1 downto 0);
    tmp_62_fu_808_p1 <= grp_fu_492_p2(8 - 1 downto 0);
    tmp_63_fu_821_p1 <= grp_fu_487_p2(8 - 1 downto 0);
    tmp_64_fu_825_p1 <= grp_fu_492_p2(8 - 1 downto 0);
    tmp_fu_508_p2 <= std_logic_vector(unsigned(ctx_final_datalen_read) + unsigned(ap_const_lv7_1));
    tmp_s_fu_502_p2 <= "1" when (unsigned(ctx_final_datalen_read) < unsigned(ap_const_lv7_38)) else "0";
end behav;
