-- ******************************************************************
-- ******************************************************************
-- ******************************************************************
-- This file is generated. Changing this file directly is probably
-- not what you want to do. Any changes will be overwritten next time
-- the generator is run.
-- ******************************************************************
-- ******************************************************************
-- ******************************************************************
architecture rom of decode_table is
    signal line : std_logic_vector(74 downto 0);
    signal addr : std_logic_vector(7 downto 0);
    signal mac_busy : mac_busy_t;
    signal imms_12_1 : std_logic_vector(31 downto 0);
    signal imms_8_0 : std_logic_vector(31 downto 0);
    signal imms_8_1 : std_logic_vector(31 downto 0);
    type mem is array (0 to 255) of std_logic_vector(74 downto 0);
    constant microcode_rom : mem := (0 => "000000000100100000001000000000000000000000000000000000001000000000000000000", -- CLRT
    1 => "000000000100100000001000100000000000000000010000000100000000010000010001000", -- CLRMAC
    2 => "000000000100100000001000000000000000000000000000000000010000000000000000000", -- DIV0U
    3 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- NOP
    4 => "000000000000000000001000000000000001000001010010001000000000100010000000000", 5 => "000000000000000000000000000000000001000001010010001000000000100010000000001", 6 => "000000000000000000000000000000000000000000000100000000000000000000000000010", 7 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- RTE
    8 => "000000000000000000000000000000000000000000000110000000000000110000000000010", 9 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- RTS
    10 => "000000000100100000001000000000000000000000000000000000011000000000000000000", -- SETT
    11 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 12 => "000000000000000000000000000000000000000100000000000000000000000000000000000", 13 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 14 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- SLEEP
    15 => "000000100100100000001000000000000000000000000000000000000000000000000000000", -- BGND
    16 => "000000000100100000011000000000000010000000010000001100100001000000000000000", -- CMP/PL Rn
    17 => "000000000100100000011000000000000010000000010000001100101001000000000000000", -- CMP/PZ Rn
    18 => "000000000100100000101000000000000010001001010010001100110001000000000000000", -- DT Rn
    19 => "000000000100100000101000000000000000001001100000010000000001010000000000000", -- MOVT Rn
    20 => "000000000100100000101000000000000010001001011000010100111001000000000000000", -- ROTL Rn
    21 => "000000000100100000111000000000000010001001011000010100111001000000000000000", -- ROTR Rn
    22 => "000000000100100000101000000000000010001001011000011000111001000000000000000", -- ROTCL Rn
    23 => "000000000100100000111000000000000010001001011000011000111001000000000000000", -- ROTCR Rn
    24 => "000000000100100000101000000000000010001001011000011100111001000000000000000", -- SHAL Rn
    25 => "000000000100100000111000000000000010001001011000100000111001000000000000000", -- SHAR Rn
    26 => "000000000100100000101000000000000010001001011000011100111001000000000000000", -- SHLL Rn
    27 => "000000000100100000111000000000000010001001011000011100111001000000000000000", -- SHLR Rn
    28 => "000000000100100001001000000000000010001001011000011100000001000000000000000", -- SHLL2 Rn
    29 => "000000000100100001011000000000000010001001011000011100000001000000000000000", -- SHLR2 Rn
    30 => "000000000100100001101000000000000010001001011000011100000001000000000000000", -- SHLL8 Rn
    31 => "000000000100100001111000000000000010001001011000011100000001000000000000000", -- SHLR8 Rn
    32 => "000000000100100010001000000000000010001001011000011100000001000000000000000", -- SHLL16 Rn
    33 => "000000000100100010011000000000000010001001011000011100000001000000000000000", -- SHLR16 Rn
    34 => "000000000100100000001000010000000000001001000110000000000001010000000000000", -- STC SR, Rn
    35 => "000000000100100000001000010000000000001001000110000000000001100000000000000", -- STC GBR, Rn
    36 => "000000000100100000001000010000000000001001000110000000000001110000000000000", -- STC VBR, Rn
    37 => "000000000100100000001000110000000000001001000110000000000010000000000000000", -- STS MACH, Rn
    38 => "000000000100100000001000110000000000001001000110000000000010010000000000000", -- STS MACL, Rn
    39 => "000000000100100000001000010000000000001001000110000000000000110000000000000", -- STS PR, Rn
    40 => "000000000000000000000000000010000010000010010000000000000000000100000000000", 41 => "000000000000000000000000000010000000000000000000000000000000000000000000000", 42 => "010000000000000000000000000010000010000000011010100100110010100110000000000", 43 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- TAS.B @Rn
    44 => "000000000000000000000000000101000010001001010010001100000010111000000000000", 45 => "000000000100100000001000010000000000000000000000000000000000000000000000000", -- STC.L SR, @-Rn
    46 => "000000000000000000000000000101000010001001010010001100000011001000000000000", 47 => "000000000100100000001000010000000000000000000000000000000000000000000000000", -- STC.L GBR, @-Rn
    48 => "000000000000000000000000000101000010001001010010001100000011011000000000000", 49 => "000000000100100000001000010000000000000000000000000000000000000000000000000", -- STC.L VBR, @-Rn
    50 => "000000000100100000001000110101000010001001010010001100000011101000000000000", -- STS.L MACH, @-Rn
    51 => "000000000100100000001000110101000010001001010010001100000011111000000000000", -- STS.L MACL, @-Rn
    52 => "000000000100100000001000010101000010001001010010001100000100001000000000000", -- STS.L PR, @-Rn
    53 => "000011000100100000001000000000001000000010000000000000000000000000000000000", -- STS CP0_COM, Rn
    54 => "000010000100100000001000000000000000000000000000000000000000000000000000000", -- CSTS CP0_COM, CP0_Rn
    55 => "000011000100100000001000000000001000000010000000000000000000000000000000000", -- STS CPI_COM, Rn
    56 => "000010000100100000001000000000000000000000000000000000000000000000000000000", -- CSTS CPI_COM, CPI_Rn
    57 => "000000000100100000001000010000000000000000000110000001000100010000000000011", -- LDC Rm, SR
    58 => "000000000100100000001000010000000000010001000110000000000100010000000000000", -- LDC, Rm, GBR
    59 => "000000000100100000001000010000000000011001000110000000000100010000000000000", -- LDC Rm, VBR
    60 => "000000000100100000001000110000000000000000000110000000000100010000100010000", -- LDS Rm, MACH
    61 => "000000000100100000001000110000000000000000000110000000000100010000110011000", -- LDS Rm, MACL
    62 => "000000000100100000001000010000000000100001000110000000000100010000000000000", -- LDS Rm, PR
    63 => "000000000000000000011000000000000010000000010010001000000000100000000000010", 64 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- JMP @Rm
    65 => "000000000000000000011000000000000010100001010010001000000000100000000000100", 66 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- JSR @Rm
    67 => "000000000000000000000000000000000010000000010000000000000000000010000000001", 68 => "000000000000000000000000000000000010001001010010001000000000100000000000000", 69 => "000000000100100000001000010000000000000000000000000000000000000000000000000", -- LDC.L @Rm+, SR
    70 => "000000000000000000000000000000010010000010010000000000000000000010000000000", 71 => "000000000000000000000000000000000010001001010010001000000000100000000000000", 72 => "000000000100100000001000010000000000000000000000000000000000000000000000000", -- LDC.L @Rm+, GBR
    73 => "000000000000000000000000000000011010000010010000000000000000000010000000000", 74 => "000000000000000000000000000000000010001001010010001000000000100000000000000", 75 => "000000000100100000001000010000000000000000000000000000000000000000000000000", -- LDC.L @Rm+, VBR
    76 => "000000000100100000001010110000000010001001010010001000000000100011000100000", -- LDS.L @Rm+, MACH
    77 => "000000000100100000001010110000000010001001010010001000000000100011010101000", -- LDS.L @Rm+, MACL
    78 => "000000000000000000000000010000100010000010010000000000000000000010000000000", 79 => "000000000100100000001000010000000010001001010010001000000000100000000000000", -- LDS.L @Rm+, PR
    80 => "000100000100100000001000010000000000000000000110000000000100010000000000000", -- LDS Rm, CP0_COM
    81 => "000110000100100000001000010000000000000000000000000000000000000000000000000", -- CLDS CP0_Rm, CP0_COM
    82 => "000100000100100000001000010000000000000000000110000000000100010000000000000", -- LDS Rm, CPI_COM
    83 => "000110000100100000001000010000000000000000000000000000000000000000000000000", -- CLDS CPI_Rm, CPI_COM
    84 => "000000000000000000001000000000000000000000110010001000000100010000000000010", 85 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- BRAF Rm
    86 => "000000000000000000001000000000000000100001110010001000000100010000000000100", 87 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- BSRF Rm
    88 => "000000000100100000001000000000000010001001010010001000000100100000000000000", -- ADD Rm, Rn
    89 => "001000000100100000001000000000000010001001010010001001001100100000000000000", -- ADDC Rm, Rn
    90 => "000000000100100000001000000000000010001001010010001001010100100000000000000", -- ADDV Rm, Rn
    91 => "000000000100100000001000000000000010001001010000010000000100100000000000000", -- AND Rm, Rn
    92 => "000000000100100000001000000000000010000000010000000101011100100000000000000", -- CMP /EQ Rm, Rn
    93 => "000000000100100000001000000000000010000000010000001101100100100000000000000", -- CMP /HS Rm, Rn
    94 => "000000000100100000001000000000000010000000010000001100101100100000000000000", -- CMP /GE Rm, Rn
    95 => "000000000100100000001000000000000010000000010000001101101100100000000000000", -- CMP /HI Rm, Rn
    96 => "000000000100100000001000000000000010000000010000001100100100100000000000000", -- CMP /GT Rm, Rn
    97 => "000000000100100000001000000000000010000000010000000101110100100000000000000", -- CMP /STR Rm, Rn
    98 => "000000000000000000000000000000000000101001000110000000000100010000000000000", 99 => "000000000000000000000000000010001011000010010000000000000000000010000000000", 100 => "000000000000000000000000000010000010000000010000000101011100100000000000000", 101 => "000000000100100000001000000011000011000000010000000000000010101010000000000", -- CAS.L Rm, Rn, @R0
    102 => "100000000100100000001000000000000010001001010010001001111100100000000000000", -- DIV1 Rm, Rn
    103 => "000000000100100000001000000000000010000000010000001010000100100000000000000", -- DIV0S Rm, Rn
    104 => "000000000100100000001100100000000010000000010000000000000100100001100110000", -- DMULS.L Rm, Rn
    105 => "000000000100100000001100100000000010000000010000000000000100100001100111000", -- DMULU.L Rm, Rn
    106 => "000000000100100000001000000000000000001001001010101000000100100000000000000", -- EXTS.B Rm, Rn
    107 => "000000000100100000001000000000000000001001001010101100000100100000000000000", -- EXTS.W Rm, Rn
    108 => "000000000100100000001000000000000000001001001010110000000100100000000000000", -- EXTU.B Rm, Rn
    109 => "000000000100100000001000000000000000001001001010110100000100100000000000000", -- EXTU.W Rm, Rn
    110 => "000000000100100000001000000000000000001001000110000000000100100000000000000", -- MOV Rm, Rn
    111 => "000000000100100000001100100000000010000000010000000000000100100001101000000", -- MUL.L Rm, Rn
    112 => "000000000100100000001100100000000010000000010000000000000100100001101001000", -- MULS.W Rm, Rn
    113 => "000000000100100000001100100000000010000000010000000000000100100001101010000", -- MULU.W Rm, Rn
    114 => "000000000100100000011000000000000000001001100010001100000100100000000000000", -- NEG Rm, Rn
    115 => "001000000100100000011000000000000000001001100010001101001100100000000000000", -- NEGC Rm, Rn
    116 => "000000000100100000011000000000000000001001100000111000000100100000000000000", -- NOT Rm, Rn
    117 => "000000000100100000001000000000000010001001010000111100000100100000000000000", -- OR Rm, Rn
    118 => "000000000100100000001000000000000010001001010010001100000100100000000000000", -- SUB Rm, Rn
    119 => "001000000100100000001000000000000010001001010010001101001100100000000000000", -- SUBC Rm, Rn
    120 => "000000000100100000001000000000000010001001010010001101010100100000000000000", -- SUBV Rm, Rn
    121 => "000000000100100000001000000000000000001001001011000000000100100000000000000", -- SWAP.B Rm, Rn
    122 => "000000000100100000001000000000000000001001001011000100000100100000000000000", -- SWAP.W Rm, Rn
    123 => "000000000100100000001000000000000010000000010000010001011100100000000000000", -- TST Rm, Rn
    124 => "000000000100100000001000000000000010001001010000000100000100100000000000000", -- XOR Rm, Rn
    125 => "000000000100100000001000000000000010001001011011001000000100100000000000000", -- XTRACT Rm, Rn
    126 => "000000000100100000001000000000000010001001011000100000000100100000000000000", -- SHAD Rm, Rn
    127 => "000000000100100000001000000000000010001001011000011100000100100000000000000", -- SHLD Rm, Rn
    128 => "000000000100100000011000000101000010000000010010001000000100110110000000000", -- MOV.B Rm, @Rn
    129 => "000000000100100000011000000101000010000000010010001000000100111100000000000", -- MOV.W Rm, @Rn
    130 => "000000000100100000011000000101000010000000010010001000000100111000000000000", -- MOV.L Rm, @Rn
    131 => "000000000100100000001000000100001000000010000110000000000100100100000000000", -- MOV.B @Rm, Rn
    132 => "000000000100100000001000000100001000000010000110000000000100101110000000000", -- MOV.W @Rm, Rn
    133 => "000000000100100000001000000100001000000010000110000000000100100010000000000", -- MOV.L @Rm, Rn
    134 => "000000000000000000000000000000000010001001010010001000000000100011110000000", 135 => "000000000000000000000111000000000100110001010010001000000000100010001011000", 136 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- MAC.L @Rm+, @Rn+
    137 => "000000000000000001000000000000000010001001010010001000000000101111110000000", 138 => "000000000100100001001111000000000100110001010010001000000000101110001100000", -- MAC.W @Rm+, @Rn+
    139 => "000000000000000000100000000000000100110001010010001000000000100000000000000", 140 => "000000000100100000101000000100001100000010010010001100000000100100000000000", -- MOV.B @Rm+, Rn
    141 => "000000000000000001000000000000000100110001010010001000000000100000000000000", 142 => "000000000100100001001000000100001100000010010010001100000000101110000000000", -- MOV.W @Rm+, Rn
    143 => "000000000000000000000000000000000100110001010010001000000000100000000000000", 144 => "000000000100100000001000000100001100000010010010001100000000100010000000000", -- MOV.L @Rm+, Rn
    145 => "000000000100100000101000000101000010001001010010001100000100110110000000000", -- MOV.B Rm,@-Rn
    146 => "000000000100100001001000000101000010001001010010001100000100111100000000000", -- MOV.W Rm,@-Rn
    147 => "000000000100100000001000000101000010001001010010001100000100111000000000000", -- MOV.L Rm,@-Rn
    148 => "000000000100100000001000000101000010000000010010001000000101000110000000000", -- MOV.B Rm, @(R0, Rn)
    149 => "000000000100100000001000000101000010000000010010001000000101001100000000000", -- MOV.W Rm, @(R0, Rn)
    150 => "000000000100100000001000000101000010000000010010001000000101001000000000000", -- MOV.L Rm, @(R0, Rn)
    151 => "000000000100100000001000000100001100000010010010001000000101010100000000000", -- MOV.B @(R0, Rm), Rn
    152 => "000000000100100000001000000100001100000010010010001000000101011110000000000", -- MOV.W @(R0, Rm), Rn
    153 => "000000000100100000001000000100001100000010010010001000000101010010000000000", -- MOV.L @(R0, Rm), Rn
    154 => "000000000100100010101000000100101100000010010010001000000000100100000000000", -- MOV.B @(disp, Rm), R0
    155 => "000000000100100010111000000100101100000010010010001000000000101110000000000", -- MOV.W @(disp, Rm), R0
    156 => "000000000100100010101000000101000100000000010010001000000101100110000000000", -- MOV.B R0, @(disp, Rn)
    157 => "000000000100100010111000000101000100000000010010001000000101101100000000000", -- MOV.W R0, @(disp, Rn)
    158 => "000000000100100011001000000101000010000000010010001000000100111000000000000", -- MOV.L Rm, @(disp, Rn)
    159 => "000000000100100011001000000100001100000010010010001000000000100010000000000", -- MOV.L @(disp, Rm), Rn
    160 => "000000000100100011011000000101000101000000010010001000000101100110000000000", -- MOV.B R0, @(disp, GBR)
    161 => "000000000100100011101000000101000101000000010010001000000101101100000000000", -- MOV.W R0, @(disp, GBR)
    162 => "000000000100100011111000000101000101000000010010001000000101101000000000000", -- MOV.L R0, @(disp, GBR)
    163 => "000000000100100011011000000100101101000010010010001000000000100100000000000", -- MOV.B @(disp, GBR), R0
    164 => "000000000100100011101000000100101101000010010010001000000000101110000000000", -- MOV.W @(disp, GBR), R0
    165 => "000000000100100011111000000100101101000010010010001000000000100010000000000", -- MOV.L @(disp, GBR), R0
    166 => "110000000100100011111000000000000000111001110010001000000001000000000000000", -- MOVA @(disp, PC), R0
    167 => "000000001000100100001000000000000000000000110010001000000001000000000000101", 168 => "000000000000110000000000000000000000000000000000000000000000000000000000000", 169 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- BF label
    170 => "000000001001000100001000000000000000000000110010001000000001000000000000101", 171 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- BF /S label
    172 => "000000001100100100001000000000000000000000110010001000000001000000000000110", 173 => "000000000000110000000000000000000000000000000000000000000000000000000000000", 174 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- BT label
    175 => "000000001101100100001000000000000000000000110010001000000001000000000000110", 176 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- BT /S label
    177 => "000000000000000100011000000000000000000000110010001000000001000000000000010", 178 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- BRA label
    179 => "000000000000000100011000000000000000100001110010001000000001000000000000100", 180 => "000000010100110000000000000000000000000000000000000000000000000000000000000", -- BSR label
    181 => "000000000100100011101000000100001000000010110010001000000001001110000000000", -- MOV.W @(disp, PC), Rn
    182 => "110000000100100011111000000100001000000010110010001000000001000010000000000", -- MOV.L @(disp, PC), Rn
    183 => "000000000000000000000000000100110101000010010010001000000101110100000000000", 184 => "000000000000000000000000000000000101101001010010001000000101110000000000000", 185 => "000000000100100011011000001000000000000000010000010000000110000110000000000", -- AND.B #imm, @(R0, GBR)
    186 => "000000000000000000000000000100110101000010010010001000000101110100000000000", 187 => "000000000000000000000000000000000101101001010010001000000101110000000000000", 188 => "000000000100100011011000001000000000000000010000111100000110000110000000000", -- OR.B #imm, @(R0, GBR)
    189 => "000000000000000000000000000100110101000010010010001000000101110100000000000", 190 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 191 => "000000000100100011011000000000000000000000010000010001011000100000000000000", -- TST.B #imm, @(R0, GBR)
    192 => "000000000000000000000000000100110101000010010010001000000101110100000000000", 193 => "000000000000000000000000000000000101101001010010001000000101110000000000000", 194 => "000000000100100011011000001000000000000000010000000100000110000110000000000", -- XOR.B #imm, @(R0, GBR)
    195 => "000000000100100011011000000000000011111001010000010000000001000000000000000", -- AND #imm, R0
    196 => "000000000100100100101000000000000011000000010000000101011001000000000000000", -- CMP /EQ #imm, R0
    197 => "000000000100100011011000000000000011111001010000111100000001000000000000000", -- OR #imm, R0
    198 => "000000000100100011011000000000000011000000010000010001011001000000000000000", -- TST #imm, R0
    199 => "000000000100100011011000000000000011111001010000000100000001000000000000000", -- XOR #imm, R0
    200 => "000000000000000000000000000101000001000001010010001100000010111000000000000", 201 => "000000000000000000000000000101000001000001010010001100000110011000000000000", 202 => "000000000000000011110000000100000000000000100010001000000001110010000000000", 203 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 204 => "000000000000000000000000000000000000000000000100000000000000000000000000010", 205 => "000000000000110000000000000000000000000000000000000000000000000000000000000", 206 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- TRAPA #imm
    207 => "000000000100100100101000000000000010001001010010001000000001000000000000000", -- ADD #imm, Rn
    208 => "000000000100100100101000000000000000001001000110000000000001000000000000000", -- MOV #imm, Rn
    209 => "000000000000000001000000000000000000000000110010001100000000100000000000010", 210 => "000000000000000000000000000101000001000001010010001100000010111000000000000", 211 => "000000000000000000000000000101000001000001010010001100000110011000000000000", 212 => "000000000000000011110000000100000000000000100010001000000001110010000000000", 213 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 214 => "000000000000000000000000000000000000000000000100000000000000000000000000010", 215 => "000000000000110000000000000000000000000000000000000000000000000000000000000", 216 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- General Illegal
    217 => "000000000000000000010000000000000000000000110010001000000000100000000000010", 218 => "000000000000000000000000000101000001000001010010001100000010111000000000000", 219 => "000000000000000000000000000101000001000001010010001100000110011000000000000", 220 => "000000000000000011110000000100000000000000100010001000000001110010000000000", 221 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 222 => "000000000000000000000000000000000000000000000100000000000000000000000000010", 223 => "000000000000110000000000000000000000000000000000000000000000000000000000000", 224 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- Slot Illegal
    225 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 226 => "000000000010000000000000000000000000000000000000000000000000000000000000000", 227 => "000000000000000011110000000100000000101001000110000000000001000010000000000", 228 => "000000000000000000000000000100111110000010010010001000000000100010000000000", 229 => "000000000000000000000000000000000000000000000100000000000000000000000000010", 230 => "000000000000110000000000000000000000011001010000000100000000010000000000000", 231 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- Reset CPU
    232 => "000000000010001001000000000000000000000000110010001100000000100000000000010", 233 => "110000000000000000010000000000000001101001010010001000000000100000000000000", 234 => "000000000000000000000000000101000110101001010010001100000010111000000000000", 235 => "000000000000000000000000000101000110101001010010001100000110011000000000000", 236 => "000000000000000011110000000100000111000000010010001000000001000010000000000", 237 => "000000000000000000000000000000000001000001010010001110001000100000000000000", 238 => "000000000000000000000000000000000000000000000100000000000000000000000000010", 239 => "000000000000110000000000000000000001000001010010001100000000100000000000000", 240 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- Interrupt
    241 => "000000000010001001000000000000000000000000110010001100000000100000000000010", 242 => "110000000000000000010000000000000001101001010010001000000000100000000000000", 243 => "000000000000000000000000000101000110101001010010001100000010111000000000000", 244 => "000000000000000000000000000101000110101001010010001100000110011000000000000", 245 => "000000000000000011110000000100000111000000010010001000000001000010000000000", 246 => "000000000000000000000000000000000001000001010010001100000000100000000000000", 247 => "000000000000000000000000000000000000000000000100000000000000000000000000010", 248 => "000000000000110000000000000000000001000001010010001100000000100000000000000", 249 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- Error
    250 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 251 => "000000100000000001000000000000000000000000110010001100000000100000000000010", 252 => "000000000000110000000000000000000000000000000000000000000000000000000000000", 253 => "000000000100100000001000000000000000000000000000000000000000000000000000000", -- Break
    254 => "000000000000000000000000000000000000000000000000000000000000000000000000000", 255 => "000000000000000000000000000000000000000000000000000000000000000000000000000");
begin
    -- Read microcode line on falling edge of
    -- clock. Needs to be clocked so that xilinx
    -- uses a RAM, and needs to be falling edge to
    -- allow the ROM address to be computed.
    process(clk, op)
    begin
        if (clk = '0' and clk'event) then
            line <= microcode_rom(TO_INTEGER(unsigned(op.addr)));
        end if;
    end process;
    -- Sign extend parts of opcode
    process(op)
    begin
        -- Sign extend 8 right-most bits
        for i in 8 to 31 loop
            imms_8_0(i) <= op.code(7);
        end loop;
        imms_8_0(7 downto 0) <= op.code(7 downto 0);
        -- Sign extend 8 right-most bits shifted by 1
        for i in 9 to 31 loop
            imms_8_1(i) <= op.code(7);
        end loop;
        imms_8_1(8 downto 1) <= op.code(7 downto 0);
        imms_8_1(0) <= '0';
        -- Sign extend 12 right-most bits shifted by 1
        for i in 13 to 31 loop
            imms_12_1(i) <= op.code(11);
        end loop;
        imms_12_1(12 downto 1) <= op.code(11 downto 0);
        imms_12_1(0) <= '0';
    end process;
    with mac_busy select
        ex.mac_busy <=
            '1' when EX_BUSY,
            not next_id_stall when EX_NOT_STALL,
            '0' when others;
    with mac_busy select
        wb.mac_busy <=
            '1' when WB_BUSY,
            not next_id_stall when WB_NOT_STALL,
            '0' when others;
    with line(2 downto 0) select
        ex_stall.wrpc_z <=
            '1' when "010" | "100",
            not t_bcc when "101",
            t_bcc when "110",
            '0' when others;
    with line(2 downto 0) select
        ex_stall.wrsr_z <=
            '1' when "011",
            '0' when others;
    with line(2 downto 0) select
        wb_stall.wrsr_w <=
            '1' when "001",
            '0' when others;
    with line(2 downto 0) select
        ex_stall.wrpr_pc <=
            '1' when "100",
            '0' when others;
    with line(6 downto 3) select
        wb_stall.wrmach <=
            '1' when "0100",
            '0' when others;
    with line(6 downto 3) select
        ex_stall.wrmach <=
            '1' when "0010" | "0001",
            '0' when others;
    with line(6 downto 3) select
        ex_stall.mulcom2 <=
            MULUW when "1010",
            MULSW when "1001",
            MULL when "1000",
            DMULUL when "0111",
            DMULSL when "0110",
            NOP when others;
    with line(6 downto 3) select
        wb_stall.mulcom2 <=
            MACW when "1100",
            MACL when "1011",
            NOP when others;
    with line(6 downto 3) select
        wb_stall.macsel2 <=
            SEL_WBUS when "1100" | "1011" | "0101",
            SEL_YBUS when others;
    with line(6 downto 3) select
        ex_stall.macsel2 <=
            SEL_ZBUS when "0011" | "0001",
            SEL_YBUS when others;
    with line(9 downto 7) select
        ex_stall.mulcom1 <=
            '1' when "110",
            '0' when others;
    with line(9 downto 7) select
        wb_stall.mulcom1 <=
            '1' when "111",
            '0' when others;
    with line(9 downto 7) select
        wb_stall.macsel1 <=
            SEL_WBUS when "100" | "111",
            SEL_XBUS when others;
    with line(9 downto 7) select
        ex_stall.wrmacl <=
            '1' when "001" | "011",
            '0' when others;
    with line(9 downto 7) select
        ex_stall.macsel1 <=
            SEL_ZBUS when "001" | "010",
            SEL_XBUS when others;
    with line(9 downto 7) select
        wb_stall.wrmacl <=
            '1' when "101",
            '0' when others;
    with line(12 downto 10) select
        ex.mem_size <=
            LONG when "001" | "100" | "101",
            WORD when "110" | "111",
            BYTE when others;
    with line(12 downto 10) select
        ex_stall.ma_issue <=
            '1' when "001" | "010" | "011" | "100" | "110" | "111",
            t_bcc when "101",
            '0' when others;
    with line(12 downto 10) select
        ex.ma_wr <=
            '1' when "011" | "100" | "101" | "110",
            '0' when others;
    with line(17 downto 13) select
        ex.aluiny_sel <=
            SEL_IMM when "01110" | "01011" | "11000" | "10000" | "01101" | "01100" | "10011" | "01111" | "11001" | "00010" | "10110",
            SEL_R0 when "10100" | "10101",
            SEL_YBUS when others;
    with line(17 downto 13) select
        ex.regnum_y <=
            "10011" when "11000" | "01010",
            "10010" when "10000" | "00011",
            "10001" when "01101" | "00111",
            "10000" when "01100" | "00110",
            "10100" when "00001",
            '0' & op.code(7 downto 4) when "10011" | "10100" | "10010",
            '0' & op.code(11 downto 8) when "10001",
            "00000" when others;
    with line(17 downto 13) select
        ex.ybus_sel <=
            SEL_MACH when "01110" | "01000",
            SEL_REG when "10111" | "11000" | "10000" | "01101" | "01100" | "00001" | "10011" | "01010" | "00011" | "00111" | "00110" | "10100" | "10010" | "10110" | "10001",
            SEL_SR when "01011" | "00101",
            SEL_MACL when "01111" | "01001",
            SEL_PC when "11001",
            SEL_IMM when others;
    with line(22 downto 18) select
        ex_stall.t_sel <=
            SEL_SHIFT when "00111",
            SEL_SET when "00011",
            SEL_CARRY when "01001",
            SEL_CLEAR when others;
    with line(22 downto 18) select
        ex_stall.sr_sel <=
            SEL_DIV0U when "00010",
            SEL_SET_T when "00001" | "00111" | "00011" | "01001",
            SEL_LOGIC when "01011" | "01110",
            SEL_ZBUS when "01000",
            SEL_ARITH when "01010" | "01101" | "01100" | "00101" | "00100" | "01111" | "10000" | "00110",
            SEL_INT_MASK when "10001",
            SEL_PREV when others;
    with line(22 downto 18) select
        ex.logic_sr_func <=
            BYTE_EQ when "01110",
            ZERO when others;
    with line(22 downto 18) select
        ex.arith_sr_func <=
            OVERUNDERFLOW when "01010",
            UGRTER when "01101",
            UGRTER_EQ when "01100",
            SGRTER_EQ when "00101",
            SGRTER when "00100",
            DIV1 when "01111",
            DIV0S when "10000",
            ZERO when others;
    with line(27 downto 23) select
        ex.arith_func <=
            SUB when "00011",
            ADD when others;
    with line(27 downto 23) select
        ex.alumanip <=
            SET_BIT_7 when "01001",
            EXTEND_SBYTE when "01010",
            EXTEND_UWORD when "01101",
            EXTRACT when "10010",
            EXTEND_UBYTE when "01100",
            SWAP_WORD when "10001",
            EXTEND_SWORD when "01011",
            SWAP_BYTE when others;
    with line(27 downto 23) select
        ex_stall.shiftfunc <=
            ARITH when "01000",
            ROTC when "00110",
            ROTATE when "00101",
            LOGIC when others;
    with line(27 downto 23) select
        ex.logic_func <=
            LOGIC_OR when "01111",
            LOGIC_XOR when "00001",
            LOGIC_AND when "00100",
            LOGIC_NOT when others;
    with line(30 downto 28) select
        ex_stall.zbus_sel <=
            SEL_LOGIC when "000",
            SEL_WBUS when "010",
            SEL_YBUS when "011",
            SEL_SHIFT when "100",
            SEL_MANIP when "101",
            SEL_ARITH when others;
    with line(32 downto 31) select
        ex.xbus_sel <=
            SEL_REG when "01",
            SEL_PC when "11",
            SEL_IMM when others;
    ex_stall.wrreg_z <= line(33);
    wb_stall.wrreg_w <= line(34);
    slp <= line(35);
    with line(38 downto 36) select
        ex.regnum_z <=
            "01111" when "000",
            '0' & op.code(11 downto 8) when "001",
            "10000" when "010",
            "10001" when "011",
            "10010" when "100",
            "10011" when "101",
            '0' & op.code(7 downto 4) when "110",
            "00000" when others;
    with line(41 downto 39) select
        ex.regnum_x <=
            "10100" when "000",
            "01111" when "001",
            '0' & op.code(11 downto 8) when "010",
            '0' & op.code(7 downto 4) when "100",
            "10000" when "101",
            "10011" when "110",
            "10001" when "111",
            "00000" when others;
    with line(44 downto 42) select
        wb.regnum_w <=
            "10011" when "000",
            '0' & op.code(11 downto 8) when "001",
            "10000" when "010",
            "10001" when "011",
            "10010" when "100",
            "10100" when "110",
            "01111" when "111",
            "00000" when others;
    with line(45 downto 45) select
        ex_stall.mem_wdata_sel <=
            SEL_YBUS when "1",
            SEL_ZBUS when others;
    ex.mem_lock <= line(46);
    with line(48 downto 47) select
        ex_stall.mem_addr_sel <=
            SEL_ZBUS when "01",
            SEL_YBUS when "10",
            SEL_XBUS when others;
    maskint_next <= line(49);
    mac_stall_sense <= line(50);
    mac_s_latch <= line(51);
    with line(53 downto 52) select
        mac_busy <=
            WB_NOT_STALL when "01",
            EX_NOT_STALL when "10",
            WB_BUSY when "11",
            NOT_BUSY when others;
    id.incpc <= line(54);
    with line(59 downto 55) select
        ex.imm_val <=
            x"ffffffff" when "00011",
            x"00000001" when "00010",
            x"fffffffe" when "00101",
            x"00000002" when "00100",
            x"00000004" when "00000",
            x"fffffff8" when "00111",
            x"00000008" when "00110",
            x"fffffff0" when "01001",
            x"00000010" when "01000",
            imms_12_1 when "10001",
            x"000000" & op.code(7 downto 0) when "01101",
            "00000000000000000000000" & op.code(7 downto 0) & "0" when "01110",
            "0000000000000000000000" & op.code(7 downto 0) & "00" when "01111",
            imms_8_0 when "10010",
            imms_8_1 when "10000",
            x"0000000" & op.code(3 downto 0) when "01010",
            "000000000000000000000000000" & op.code(3 downto 0) & "0" when "01011",
            "00000000000000000000000000" & op.code(3 downto 0) & "00" when "01100",
            x"00000000" when others;
    ilevel_cap <= line(60);
    id.ifadsel <= line(61);
    with line(63 downto 62) select
        id.if_issue <=
            '1' when "01",
            t_bcc when "10",
            not t_bcc when "11",
            '0' when others;
    event_ack_0 <= line(64);
    with line(66 downto 65) select
        dispatch <=
            '1' when "01",
            t_bcc when "10",
            not t_bcc when "11",
            '0' when others;
    delay_jump <= line(67);
    debug <= line(68);
    with line(69 downto 69) select
        wb_stall.cpu_data_mux <=
            COPROC when "1",
            DBUS when others;
    with line(71 downto 70) select
        ex.coproc_cmd <=
            STS when "01",
            LDS when "10",
            CLDS when "11",
            NOP when others;
    ex.arith_ci_en <= line(72);
    with line(74 downto 73) select
        ex.aluinx_sel <=
            SEL_ZERO when "01",
            SEL_ROTCL when "10",
            SEL_FC when "11",
            SEL_XBUS when others;
end;
