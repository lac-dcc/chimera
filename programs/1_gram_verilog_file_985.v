 package  static  id_1  ;  task  id_1  (  inout  [  ]  id_1  #  (  )  [  :  ]  [  ]  [  ]  =  ,  inout  id_1  #  1  [  ]  [  ]  [  :  ]  [  :  ]  [  :  ]  )  ;  endtask  endpackage  primitive  continuous  (  access  ,  id_1  )  ;  output  id_2  ;  reg  id_3  ;  initial  id_1  =  1  ;  table  %  Q  :  _  :  0  ;  endtable  endprimitive  :  id_2  `endcelldefine  primitive  id_2  (  id_3  ,  id_3  ,  id_2  )  ;  reg  id_4  ;  output  id_5  ;  table  +  :  0  ;  endtable  endprimitive  :  flow  program  automatic  module_0 import  id_1  ::  *  ,  id_2  ::  *  ,  id_3  ::  *  ;  (  )  ;  `define  pp_6  (  pp_7  )  0
 endmodule  :  id_6  `undef  pp_8 