 primitive  sample  (  access  ,  continuous  ,  id_1  )  ;  input  sample  ;  table  b  :  -  ;  p  :  -  ;  endtable  endprimitive  :  id_1  `define  pp_2  (  pp_3  =  "" 
 )  0
 primitive  sample  (  `pp_3  ,  `pp_2  ,  `pp_3  ,  `pp_3  )  ;  input  id_4  ,  id_5  ,  id_6  ,  id_7  ,  id_8  ,  id_9  ,  id_10  ;  table  r  x  :  x  :  0  ;  M  :  R  :  x  ;  endtable  endprimitive  :  sample  module  static  module_0 #( parameter  id_1  = 32'd91,parameter  id_11  = 32'd10,parameter  id_12  = 32'd18,parameter  id_13  = 32'd17,parameter  id_14  = 32'd36,parameter  id_2  = 32'd63,parameter  id_3  = 32'd55,parameter  id_4  = 32'd90,parameter  id_5  = 32'd58,parameter  id_6  = 32'd30,parameter  id_7  = 32'd4,parameter  id_8  = 32'd71,parameter  id_9  = 32'd61 )  (  _id_1  #  1  .  _id_2  _id_3  ,  _id_4  flow  ,  enum  {  access  [  1 'b0 ]  ,  _id_5  =  ,  sample  =  }  sample  ,  _id_6  #  (  .  _id_7  (  )  )  ,  continuous  .  product  _id_8  ,  _id_9  id_10  )  ;  endprogram  `include  timeunit 1ps ; 