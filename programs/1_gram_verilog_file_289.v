 timeunit 1ps ;  macromodule  static  module_0 import  sample  ::  *  ,  id_3  ::  *  ,  id_4  ::  *  ,  id_5  ::  *  ,  access  ::  *  ;  import  continuous  ::  *  ,  id_6  ::  *  ;  import  access  ::  *  ,  sample  ::  *  ,  id_7  ::  *  ,  access  ::  *  ,  id_8  ::  *  ,  flow  ::  *  ;  (  {  sample  #  (  )  ,  id_1  #  (  ,  ,  )  ,  id_2  ,  sample  #  (  .  id_9  (  )  )  ,  id_10  #  1  }  =  ,  .  sum  (  id_3  #  (  .  access  (  )  )  )  )  ; output id_2 ; input id_1 ;  endmodule  :  id_5  module  automatic  module_1 #( parameter  id_10  = 32'd18,parameter  id_11  = 32'd11,parameter  id_12  = 32'd42,parameter  id_13  = 32'd32,parameter  id_14  = 32'd96,parameter  id_2  = 32'd79,parameter  id_3  = 32'd21,parameter  id_4  = 32'd70,parameter  id_5  = 32'd84,parameter  id_6  = 32'd72,parameter  id_8  = 32'd27,parameter  id_9  = 32'd34 )  ;  generate  begin  :  id_1  end  :  _id_2  endgenerate  static  continuous  #  (  .  _id_3  (  )  ,  .  min  (  )  )  .  _id_4  #  (  .  access  (  )  )  [  -:  ]  [  -:  ]  [  ]  .  _id_5  .  _id_6  #  (  )  (  )  ;  generate  realtime  id_7  ; type_15 #  (  ,  ,  )  access  (  ,  )  ,  (  ,  )  ;  endgenerate  endmodule 