// Seed: 2797772719
module module_0 (
    output wor id_0,
    input supply0 id_1
    , id_40,
    input tri id_2,
    input wor id_3,
    output supply1 id_4,
    input tri1 id_5,
    input uwire id_6,
    input wor id_7,
    input tri0 id_8,
    input tri0 id_9,
    input tri0 id_10,
    input wire id_11,
    output supply1 id_12,
    output supply1 id_13,
    input supply0 id_14,
    input supply0 id_15,
    output wor id_16,
    input wor id_17,
    input wor id_18,
    input tri1 id_19,
    input tri1 id_20,
    input supply1 id_21,
    input wire id_22,
    output wire id_23,
    input tri1 id_24,
    input wire id_25,
    output uwire id_26,
    output tri0 id_27,
    input supply1 id_28,
    input wor id_29,
    input wor id_30,
    input tri0 id_31,
    input tri1 id_32,
    input tri id_33,
    input wor id_34,
    input tri1 id_35,
    output tri0 id_36,
    input uwire id_37,
    output tri1 id_38
);
  logic id_41;
endmodule
module module_1 (
    input uwire id_0,
    input supply1 id_1,
    input wire id_2,
    input wire id_3,
    input wor id_4,
    output logic id_5,
    output tri1 id_6,
    input tri1 id_7,
    input wire id_8,
    output tri id_9
);
  always @(id_7 == id_0 * id_1 - 1) id_5 <= 1;
  module_0 modCall_1 (
      id_6,
      id_2,
      id_1,
      id_1,
      id_9,
      id_0,
      id_7,
      id_1,
      id_2,
      id_1,
      id_1,
      id_3,
      id_6,
      id_9,
      id_2,
      id_4,
      id_6,
      id_3,
      id_4,
      id_7,
      id_7,
      id_2,
      id_1,
      id_9,
      id_0,
      id_4,
      id_9,
      id_6,
      id_3,
      id_8,
      id_1,
      id_0,
      id_1,
      id_8,
      id_2,
      id_8,
      id_6,
      id_8,
      id_9
  );
  assign modCall_1.id_28 = 0;
endmodule
