// Seed: 2881947401
module module_0 (
    input tri1 id_0,
    output wor id_1,
    input tri0 id_2,
    output supply1 id_3,
    output tri0 id_4,
    input wand id_5,
    input wor id_6,
    input tri0 id_7,
    input tri1 id_8,
    input wire id_9,
    output wand id_10,
    output tri0 id_11,
    input supply0 id_12,
    input supply1 id_13,
    output tri1 id_14,
    output wor id_15,
    input wand id_16,
    output tri1 id_17,
    output tri0 id_18,
    output wire id_19,
    input supply0 id_20,
    input tri id_21,
    input tri1 id_22,
    input uwire id_23,
    input wire id_24,
    output wand id_25,
    input tri0 id_26,
    input tri id_27,
    output uwire id_28,
    input tri0 id_29,
    input wor id_30,
    output tri0 id_31,
    output wand id_32,
    output supply0 id_33
    , id_42,
    input wor id_34,
    output tri1 id_35,
    input uwire id_36,
    output wor id_37,
    output tri0 id_38,
    output wor id_39,
    output wand id_40
);
  assign id_19 = id_22;
  assign module_1.id_4 = 0;
endmodule
module module_1 (
    output supply0 id_0,
    input tri id_1,
    input tri0 id_2,
    output supply1 id_3,
    output logic id_4,
    output tri id_5,
    input tri1 id_6,
    output wor id_7
);
  wire id_9;
  module_0 modCall_1 (
      id_1,
      id_3,
      id_1,
      id_0,
      id_5,
      id_1,
      id_6,
      id_1,
      id_6,
      id_2,
      id_5,
      id_0,
      id_2,
      id_1,
      id_3,
      id_0,
      id_2,
      id_0,
      id_5,
      id_5,
      id_2,
      id_2,
      id_2,
      id_2,
      id_2,
      id_0,
      id_1,
      id_6,
      id_3,
      id_1,
      id_2,
      id_0,
      id_0,
      id_0,
      id_6,
      id_5,
      id_2,
      id_0,
      id_3,
      id_3,
      id_0
  );
  always @(posedge id_2 or posedge 1)
    #1 begin : LABEL_0
      if (1) id_4 = -1;
    end
endmodule
